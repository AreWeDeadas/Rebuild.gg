loadstring(game:HttpGet("https://pastebin.com/raw/gimbTwW1"))()
local a, b, c, d, e, f, g, h, i =
    loadstring(game:HttpGet("https://raw.githubusercontent.com/AreWeDeadas/Rebuild.gg/refs/heads/main/zzzzzzzzzzv1"))()
local j, k, l, m, n, o, p, q, r = a, b, c, d, e, f, g, h, i
j:set_font("WindowsXPTahoma")
local s =
    j:window(
    {
        name = os.date(
            "Rebuild.gg - skidded by 32vision - %b %d %Y - Private - onyxhub sucks - cursed by 32vision to win - creds to chagpt "
        ),
        size = k(0, 800, 0, 700)
    }
)
local t = s:tab({name = "Rage"})
local u = s:tab({name = "Misc"})
local v = s:tab({name = "Visuals"})
local w = s:tab({name = "Players"})
local x = s:tab({name = "Settings"})
local y = a:watermark({default = os.date("Rebuild.gg - fuckass - %b %d %Y - %H:%M:%S")})
local z = a:radar({size = 200, clamp = true})
local A = a:custom_hud({size = b(0, 280, 0, 32), position = b(0, 250, 0, 300), hud_type = "Rust"})
local B = {
    ps = game:GetService("Players"),
    run = game:GetService("RunService"),
    uis = game:GetService("UserInputService"),
    ts = game:GetService("TweenService"),
    hs = game:GetService("HttpService"),
    rs = game:GetService("ReplicatedStorage"),
    cam = workspace.CurrentCamera,
    camera = workspace.CurrentCamera,
    workspace = workspace,
    math = math,
    cf = CFrame,
    v2 = Vector2,
    v3 = Vector3,
    Vector3 = Vector3,
    RaycastParams = RaycastParams,
    task = task,
    tick = tick
}
g["Debug"] = true
print("[Rebuild] Debug enabled")
local C = {}
do
    local D = w:section({name = "Players"})
    C.relations = C.relations or {friend = {}, enemy = {}}
    local E = C.relations
    C.sel = C.sel
    D:playerlist(
        {callback = function(F)
                local G = F
                if G and not G.UserId then
                    local H = type(G) == "string" and G or G.Name
                    if H and B and B.ps then
                        for I, J in ipairs(B.ps:GetPlayers()) do
                            if J.Name == H or J.DisplayName == H then
                                G = J
                                break
                            end
                        end
                    end
                end
                if G and G.UserId then
                    C.sel = G
                    C.sel_uid = G.UserId
                    a:notification({text = "Selected: " .. (G.Name or "?"), time = 2})
                else
                    C.sel = nil
                    C.sel_uid = nil
                    a:notification({text = "NoSel", time = 2})
                end
            end}
    )
    do
        C.relations = C.relations or {friend = {}, enemy = {}, priority = {}}
        C.relations.priority = C.relations.priority or {}
    end
    D:dropdown(
        {
            name = "Priority",
            items = {"Enemy", "Priority", "Neutral", "Friendly"},
            default = "Neutral",
            flag = "PLAYERLIST_DROPDOWN",
            callback = function(K)
                if j and j.prioritize then
                    pcall(
                        function()
                            j.prioritize(K)
                        end
                    )
                end
                local L = C.sel
                if not L and C.sel_uid and B and B.ps then
                    L = B.ps:GetPlayerByUserId(C.sel_uid)
                    C.sel = L
                end
                if not L then
                    a:notification({text = "NoSel", time = 2})
                    return
                end
                C.relations = C.relations or {friend = {}, enemy = {}, priority = {}}
                C.relations.priority = C.relations.priority or {}
                local M = L.UserId
                if K == "Friendly" then
                    C.relations.enemy[M] = nil
                    C.relations.friend[M] = true
                    C.relations.priority[M] = nil
                elseif K == "Enemy" then
                    C.relations.friend[M] = nil
                    C.relations.enemy[M] = true
                    C.relations.priority[M] = nil
                elseif K == "Neutral" then
                    C.relations.friend[M] = nil
                    C.relations.enemy[M] = nil
                    C.relations.priority[M] = nil
                elseif K == "Priority" then
                    C.relations.friend[M] = nil
                    C.relations.enemy[M] = nil
                    C.relations.priority[M] = true
                end
                a:notification({text = K, time = 2})
            end
        }
    )
    local N = w:section({name = "Actions"})
    do
        local O = N
        local P = 0.2
        C._aura_cd = C._aura_cd or {}
        C._aura_gen = C._aura_gen or 0
        local function Q()
            if C._shoot_event and C._shoot_event.Parent then
                return C._shoot_event
            end
            local R = B.rs:FindFirstChild("ShootEvent")
            if not R then
                for I, S in ipairs(B.rs:GetDescendants()) do
                    if S.Name == "ShootEvent" then
                        R = S
                        break
                    end
                end
            end
            C._shoot_event = R
            return R
        end
        local function T(J)
            if not C:ValidateClient(J) then
                return
            end
            local r = B.ps.LocalPlayer
            local U = r and r.Character
            if not U then
                return
            end
            local V
            for I, W in ipairs(U:GetChildren()) do
                if W:IsA("Tool") then
                    V = W
                    break
                end
            end
            if not V then
                return
            end
            local X = V:FindFirstChild("Ammo")
            if X and X.Value <= 0 then
                return
            end
            local M = J and J.UserId
            local Y = false
            if C.relations and C.relations.friend and M and C.relations.friend[M] then
                Y = true
            end
            if not Y and j and j.get_priority then
                local Z, _ =
                    pcall(
                    function()
                        return j.get_priority(J)
                    end
                )
                if Z and _ == "Friendly" then
                    Y = true
                end
            end
            if Y then
                return
            end
            local a0 = g and g["aura_checks"]
            local a1, a2 = false, false
            if type(a0) == "table" then
                for I, a3 in ipairs(a0) do
                    if a3 == "KO" then
                        a1 = true
                    end
                    if a3 == "FF" then
                        a2 = true
                    end
                end
            end
            local a4 = J.Character
            if a2 and a4 and a4:FindFirstChildOfClass("ForceField") then
                return
            end
            if a1 and a4 then
                local a5 = a4:FindFirstChild("BodyEffects")
                local a6 = a5 and a5:FindFirstChild("K.O")
                if a6 and a6.Value then
                    return
                end
            end
            local a7 = J.Character and J.Character:FindFirstChild("Head")
            if not a7 then
                return
            end
            local a8 = V:FindFirstChild("Handle")
            if not a8 then
                return
            end
            local a9 = a7.Position
            local aa = {
                "ShootGun",
                a8,
                a9,
                {a9, a9, a9, a9, a9},
                {a7, a7, a7, a7, a7},
                {
                    Vector3.new(0, 1, 0),
                    Vector3.new(0, 1, 0),
                    Vector3.new(0, 1, 0),
                    Vector3.new(0, 1, 0),
                    Vector3.new(0, 1, 0)
                },
                {},
                os.clock(),
                math.huge,
                {a9, a9, a9, a9, a9},
                5,
                0.2,
                a9
            }
            local R = Q()
            if R and R.FireServer then
                pcall(
                    function()
                        R:FireServer(unpack(aa))
                    end
                )
            end
        end
        local ab =
            O:toggle(
            {
                name = "Aura",
                flag = "target_aura_enabled",
                callback = function(ac)
                    if ac then
                        if C._aura_conn then
                            return
                        end
                        C._aura_conn =
                            B.run.Heartbeat:Connect(
                            function()
                                if not (g and g["target_aura_enabled"]) then
                                    return
                                end
                                local r = B.ps.LocalPlayer
                                local U = r and r.Character
                                local ad = U and (U:FindFirstChild("HumanoidRootPart") or U:FindFirstChild("Head"))
                                if not ad then
                                    return
                                end
                                local ae = {}
                                local af = g and g["aura_mode"] or "FromList"
                                for I, J in ipairs(B.ps:GetPlayers()) do
                                    if J ~= r then
                                        local ag = false
                                        if af == "All" then
                                            ag = true
                                        else
                                            local ah = false
                                            if C.relations and C.relations.priority and C.relations.priority[J.UserId] then
                                                ah = true
                                            end
                                            if not ah and j and j.get_priority then
                                                local Z, _ =
                                                    pcall(
                                                    function()
                                                        return j.get_priority(J)
                                                    end
                                                )
                                                if Z and _ == "Priority" then
                                                    ah = true
                                                end
                                            end
                                            ag = ah
                                        end
                                        do
                                            local M = J and J.UserId
                                            local Y = false
                                            if C.relations and C.relations.friend and M and C.relations.friend[M] then
                                                Y = true
                                            end
                                            if not Y and j and j.get_priority then
                                                local Z, _ =
                                                    pcall(
                                                    function()
                                                        return j.get_priority(J)
                                                    end
                                                )
                                                if Z and _ == "Friendly" then
                                                    Y = true
                                                end
                                            end
                                            if Y then
                                                ag = false
                                            end
                                        end
                                        if ag then
                                            local a4 = J.Character
                                            local ai =
                                                a4 and
                                                (a4:FindFirstChild("HumanoidRootPart") or a4:FindFirstChild("Head"))
                                            local aj = ai and (ad.Position - ai.Position).Magnitude or math.huge
                                            table.insert(ae, {plr = J, dist = aj})
                                        end
                                    end
                                end
                                table.sort(
                                    ae,
                                    function(a, b)
                                        return a.dist < b.dist
                                    end
                                )
                                if #ae == 0 then
                                    return
                                end
                                if C._fling_wave_running then
                                    return
                                end
                                if C._aura_wave_running then
                                    return
                                end
                                C._aura_wave_running = true
                                local ak = B and B.task or task
                                local al = B and B.math or math
                                local am = tonumber(g and g["aura_cd"]) or 0.03
                                local an = al.max(1, al.floor(tonumber(g and g["aura_batch"]) or 3))
                                ak.spawn(
                                    function()
                                        local ao = C._aura_gen
                                        local w = #ae
                                        local i = 1
                                        while i <= w do
                                            if ao ~= C._aura_gen or not (g and g["target_aura_enabled"]) then
                                                break
                                            end
                                            for t = i, al.min(i + an - 1, w) do
                                                if ao ~= C._aura_gen or not (g and g["target_aura_enabled"]) then
                                                    break
                                                end
                                                local ap = ae[t]
                                                if ap and ap.plr then
                                                    ak.spawn(T, ap.plr)
                                                end
                                            end
                                            i = i + an
                                            if i <= w and am > 0 then
                                                ak.wait(am)
                                            end
                                        end
                                        C._aura_wave_running = false
                                    end
                                )
                            end
                        )
                    else
                        if C._aura_conn then
                            pcall(
                                function()
                                    C._aura_conn:Disconnect()
                                end
                            )
                            C._aura_conn = nil
                        end
                        C._aura_gen = (C._aura_gen or 0) + 1
                        C._aura_wave_running = false
                    end
                end
            }
        )
        local aq =
            N:toggle(
            {
                name = "ViewPriority",
                flag = "fling_view_priority",
                callback = function(ac)
                    if ac then
                        if C._viewprio_conn then
                            return
                        end
                        C._view_idx = 1
                        C._view_next = B.tick() + 1.5
                        C._orig_cam_subj = B.cam and B.cam.CameraSubject or C._orig_cam_subj
                        C._viewprio_conn =
                            B.run.Heartbeat:Connect(
                            function()
                                local ar = B.cam
                                if not ar then
                                    return
                                end
                                local r = B.ps.LocalPlayer
                                local as = r and r.Character and r.Character:FindFirstChildOfClass("Humanoid")
                                local ae = {}
                                for I, J in ipairs(B.ps:GetPlayers()) do
                                    if J ~= r then
                                        local M = J.UserId
                                        local Y = false
                                        if C.relations and C.relations.friend and M and C.relations.friend[M] then
                                            Y = true
                                        end
                                        if not Y and j and j.get_priority then
                                            local Z, _ =
                                                pcall(
                                                function()
                                                    return j.get_priority(J)
                                                end
                                            )
                                            if Z and _ == "Friendly" then
                                                Y = true
                                            end
                                        end
                                        if not Y then
                                            local ah = false
                                            if C.relations and C.relations.priority and M and C.relations.priority[M] then
                                                ah = true
                                            end
                                            if not ah and j and j.get_priority then
                                                local Z, _ =
                                                    pcall(
                                                    function()
                                                        return j.get_priority(J)
                                                    end
                                                )
                                                if Z and _ == "Priority" then
                                                    ah = true
                                                end
                                            end
                                            if ah and C:ValidateClient(J) then
                                                local at = J.Character and J.Character:FindFirstChildOfClass("Humanoid")
                                                if at then
                                                    table.insert(ae, at)
                                                end
                                            end
                                        end
                                    end
                                end
                                if #ae == 0 then
                                    if as then
                                        ar.CameraSubject = as
                                    end
                                    return
                                end
                                local au = B.tick()
                                if au >= (C._view_next or 0) then
                                    C._view_idx = (C._view_idx or 1) % #ae + 1
                                    C._view_next = au + 1.5
                                end
                                local av = math.clamp(C._view_idx or 1, 1, #ae)
                                local aw = ae[av]
                                if aw then
                                    ar.CameraSubject = aw
                                end
                            end
                        )
                    else
                        if C._viewprio_conn then
                            pcall(
                                function()
                                    C._viewprio_conn:Disconnect()
                                end
                            )
                        end
                        C._viewprio_conn = nil
                        local r = B.ps.LocalPlayer
                        local as = r and r.Character and r.Character:FindFirstChildOfClass("Humanoid")
                        if as then
                            B.cam.CameraSubject = as
                        elseif C._orig_cam_subj then
                            B.cam.CameraSubject = C._orig_cam_subj
                        end
                    end
                end
            }
        )
        local ax = O:dependency_box()
        ax:setup_dependencies({{ab, true}})
        ax:dropdown(
            {
                name = "Mode",
                flag = "aura_mode",
                items = {"All", "FromList"},
                default = "FromList",
                callback = function(ay)
                end
            }
        )
        ax:dropdown(
            {
                name = "Checks",
                flag = "aura_checks",
                items = {"KO", "FF"},
                default = {"KO", "FF"},
                multi = true,
                callback = function()
                end
            }
        )
        function C:ValidateClient(az)
            if not az then
                return false
            end
            local a3 = az.Character
            if not a3 then
                return false
            end
            local aA = a3:FindFirstChildOfClass("Humanoid")
            if not aA or aA.Health <= 0 then
                return false
            end
            return aA.RootPart ~= nil
        end
        do
            local aB = {enabled = false, hb_conn = nil, next_tick = 0}
            local function aC(aD)
                local aE = B and B.math and B.math.random or math.random
                local function A()
                    return (aE() * 2 - 1) * aD
                end
                return B.v3.new(A(), A(), A())
            end
            local function aF()
                if aB.hb_conn then
                    return
                end
                aB.hb_conn =
                    B.run.Heartbeat:Connect(
                    function()
                        if not aB.enabled then
                            return
                        end
                        local aG = shared and shared.Rebuild_FlingActive or false
                        local aH = C and C._fling_wave_running == true or false
                        if aG or aH then
                            return
                        end
                        local r = B.ps.LocalPlayer
                        local aI = r and r.Character
                        local at = aI and aI:FindFirstChildOfClass("Humanoid")
                        local aJ = at and at.RootPart
                        if not aJ then
                            return
                        end
                        local au = B and B.tick and B.tick() or tick()
                        if au < (aB.next_tick or 0) then
                            return
                        end
                        aB.next_tick = au + 0.15
                        local aD = 1500
                        local aK = aC(aD)
                        local aL = (B and B.cf or CFrame).new(aK)
                        pcall(
                            function()
                                aJ.CFrame = aL
                                aI:SetPrimaryPartCFrame(aL)
                            end
                        )
                    end
                )
            end
            local function aM()
                if aB.hb_conn then
                    pcall(
                        function()
                            aB.hb_conn:Disconnect()
                        end
                    )
                end
                aB.hb_conn = nil
            end
            N:toggle(
                {name = "Safety", flag = "actions_safety_enabled", callback = function(ac)
                        aB.enabled = ac
                        if ac then
                            aF()
                        else
                            aM()
                        end
                    end}
            )
            C._safety = aB
        end
        do
            local aN = N
            local function aO(aP)
                local r = B.ps.LocalPlayer
                local aQ = r and r.Character
                local aR = aQ and aQ:FindFirstChildOfClass("Humanoid")
                local aS = aR and aR.RootPart
                local aT = aP and aP.Character
                if not (aQ and aR and aS and aT) then
                    return
                end
                local aU = aT:FindFirstChildOfClass("Humanoid")
                local aV = aU and aU.RootPart or nil
                local aW = aT:FindFirstChild("Head")
                local aX = aT:FindFirstChildOfClass("Accessory")
                local aY = aX and aX:FindFirstChild("Handle") or nil
                if aR then
                    if aR.Sit then
                        aR.Sit = false
                    end
                    pcall(
                        function()
                            if Enum and Enum.HumanoidStateType then
                                aR:ChangeState(Enum.HumanoidStateType.Jumping)
                            end
                        end
                    )
                    pcall(
                        function()
                            aR.PlatformStand = false
                        end
                    )
                end
                aS.Anchored = false
                pcall(
                    function()
                        for I, ai in ipairs(aQ:GetChildren()) do
                            if ai:IsA("BasePart") then
                                ai.CanCollide = true
                                ai.Massless = false
                            end
                        end
                    end
                )
                shared.Rebuild_FlingActive = true
                if aS.Velocity.Magnitude < 50 then
                    C._fling_oldpos = aS.CFrame
                end
                local function aZ(a_, b0, b1)
                    aS.CFrame = B.cf.new(a_.Position) * b0 * b1
                    aQ:SetPrimaryPartCFrame(B.cf.new(a_.Position) * b0 * b1)
                    aS.Velocity = B.v3.new(9e7, 9e7 * 10, 9e7)
                    aS.RotVelocity = B.v3.new(9e8, 9e8, 9e8)
                    aS.AssemblyLinearVelocity = B.v3.new(9e7, 9e7 * 10, 9e7)
                    aS.AssemblyAngularVelocity = B.v3.new(9e8, 9e8, 9e8)
                end
                local function b2(a_)
                    local b3 = 1.5
                    local b4 = B.tick()
                    local b5 = 0
                    repeat
                        if aS and aU then
                            if a_.Velocity.Magnitude < 50 then
                                b5 = b5 + 100
                                aZ(
                                    a_,
                                    B.cf.new(0, 1.5, 0) + aU.MoveDirection * a_.Velocity.Magnitude / 1.25,
                                    B.cf.Angles(math.rad(b5), 0, 0)
                                )
                                B.task.wait()
                                aZ(
                                    a_,
                                    B.cf.new(0, -1.5, 0) + aU.MoveDirection * a_.Velocity.Magnitude / 1.25,
                                    B.cf.Angles(math.rad(b5), 0, 0)
                                )
                                B.task.wait()
                                aZ(a_, B.cf.new(0, 1.5, 0) + aU.MoveDirection, B.cf.Angles(math.rad(b5), 0, 0))
                                B.task.wait()
                                aZ(a_, B.cf.new(0, -1.5, 0) + aU.MoveDirection, B.cf.Angles(math.rad(b5), 0, 0))
                                B.task.wait()
                            else
                                aZ(a_, B.cf.new(0, 1.5, aU.WalkSpeed), B.cf.Angles(math.rad(90), 0, 0))
                                B.task.wait()
                                aZ(a_, B.cf.new(0, -1.5, -aU.WalkSpeed), B.cf.Angles(0, 0, 0))
                                B.task.wait()
                                aZ(a_, B.cf.new(0, 1.5, aU.WalkSpeed), B.cf.Angles(math.rad(90), 0, 0))
                                B.task.wait()
                            end
                        end
                    until B.tick() - b4 > b3
                end
                local b6 = Instance.new("BodyVelocity")
                b6.Parent = aS
                b6.Velocity = B.v3.new(0, 0, 0)
                b6.MaxForce = B.v3.new(9e9, 9e9, 9e9)
                if aV then
                    b2(aV)
                elseif aW then
                    b2(aW)
                elseif aY then
                    b2(aY)
                end
                b6:Destroy()
                if C._fling_oldpos then
                    local aL = C._fling_oldpos * B.cf.new(0, 0.5, 0)
                    for I = 1, 10 do
                        aS.CFrame = aL
                        aQ:SetPrimaryPartCFrame(aL)
                        if aR and Enum and Enum.HumanoidStateType then
                            aR:ChangeState(Enum.HumanoidStateType.GettingUp)
                        end
                        for I, ai in ipairs(aQ:GetChildren()) do
                            if ai:IsA("BasePart") then
                                ai.Velocity, ai.RotVelocity = B.v3.new(), B.v3.new()
                            end
                        end
                        B.task.wait()
                    end
                end
                aS.AssemblyLinearVelocity = B.v3.new()
                aS.AssemblyAngularVelocity = B.v3.new()
                shared.Rebuild_FlingActive = false
            end
            C._fling_gen = C._fling_gen or 0
            C._fling_wave_running = false
            local b7 =
                aN:toggle(
                {
                    name = "Fling",
                    flag = "fling_priority_enabled",
                    callback = function(ac)
                        if ac then
                            if C._fling_conn then
                                return
                            end
                            shared.Rebuild_FlingActive = true
                            if C._voiding and C._voiding.enabled and C._void_stop then
                                C._void_paused_by_fling = true
                                pcall(C._void_stop)
                            end
                            C._fling_conn =
                                B.run.Heartbeat:Connect(
                                function()
                                    if C._fling_wave_running or C._aura_wave_running then
                                        return
                                    end
                                    local r = B.ps.LocalPlayer
                                    local ae = {}
                                    for I, J in ipairs(B.ps:GetPlayers()) do
                                        if J ~= r then
                                            local M = J.UserId
                                            local Y = false
                                            if C.relations and C.relations.friend and M and C.relations.friend[M] then
                                                Y = true
                                            end
                                            if not Y and j and j.get_priority then
                                                local Z, _ =
                                                    pcall(
                                                    function()
                                                        return j.get_priority(J)
                                                    end
                                                )
                                                if Z and _ == "Friendly" then
                                                    Y = true
                                                end
                                            end
                                            if not Y then
                                                local ah = false
                                                if
                                                    C.relations and C.relations.priority and M and
                                                        C.relations.priority[M]
                                                 then
                                                    ah = true
                                                end
                                                if not ah and j and j.get_priority then
                                                    local Z, _ =
                                                        pcall(
                                                        function()
                                                            return j.get_priority(J)
                                                        end
                                                    )
                                                    if Z and _ == "Priority" then
                                                        ah = true
                                                    end
                                                end
                                                if ah and C:ValidateClient(J) then
                                                    local a4 = J.Character
                                                    local a5 = a4 and a4:FindFirstChild("BodyEffects")
                                                    local a6 = a5 and a5:FindFirstChild("K.O")
                                                    if not (a6 and a6.Value) then
                                                        table.insert(ae, J)
                                                    end
                                                end
                                            end
                                        end
                                    end
                                    if #ae == 0 then
                                        return
                                    end
                                    C._fling_wave_running = true
                                    local ak = B and B.task or task
                                    ak.spawn(
                                        function()
                                            local ao = C._fling_gen
                                            for i = 1, #ae do
                                                if ao ~= C._fling_gen or not (g and g["fling_priority_enabled"]) then
                                                    break
                                                end
                                                local b8 = ae[i]
                                                if b8 and b8.Parent then
                                                    local Z = pcall(aO, b8)
                                                    if not Z then
                                                        shared = shared or {}
                                                        shared.Rebuild_FlingActive = false
                                                    end
                                                    ak.wait(0.1)
                                                end
                                            end
                                            C._fling_wave_running = false
                                        end
                                    )
                                end
                            )
                        else
                            if C._fling_conn then
                                pcall(
                                    function()
                                        C._fling_conn:Disconnect()
                                    end
                                )
                                C._fling_conn = nil
                            end
                            shared.Rebuild_FlingActive = false
                            C._fling_gen = (C._fling_gen or 0) + 1
                            C._fling_wave_running = false
                            if C._voiding and C._voiding.enabled and C._void_start then
                                pcall(C._void_start)
                            end
                            C._void_paused_by_fling = false
                        end
                    end
                }
            )
        end
        local function ensure_visuals()
            if not state.viz_part then
                local b9 = Instance.new("Part")
                b9.Name = "RB_DesyncViz"
                b9.Anchored = true
                b9.CanCollide = false
                b9.Massless = true
                b9.Material = Enum.Material.Neon
                b9.Color = Color3.fromRGB(255, 80, 80)
                b9.Size = Vector3.new(0.6, 0.6, 0.6)
                b9.Transparency = 0.1
                b9.Parent = workspace
                state.viz_part = b9
            end
            if not state.viz_line then
                local ba = Drawing.new("Line")
                ba.Visible = false
                ba.Thickness = 2
                ba.Transparency = 1
                ba.Color = Color3.fromRGB(255, 80, 80)
                state.viz_line = ba
            end
        end
        local function bb()
            if state.followMode then
                local bc, bc, bd = desync_utility:getPlayerParts(LocalPlayer)
                return bd and bd.CFrame or nil
            end
            return state.targetCFrame or state.realCFrame
        end
        local function be()
            if not state.viz_enabled then
                return
            end
            if not desync_utility:ValidateClient(LocalPlayer) then
                return
            end
            ensure_visuals()
            local bf = bb()
            local bg = state.viz_part
            local ba = state.viz_line
            if not bf or not bg or not ba then
                return
            end
            bg.CFrame = bf
            local bh = bf.Position
            local bi, bj = desync_vars.cam:WorldToViewportPoint(bh)
            local bk = desync_vars.uis:GetMouseLocation()
            local bl = Vector2.new(bi.X, bi.Y)
            ba.From = bk
            ba.To = bl
            ba.Visible = bj == true
            bg.Transparency = 0.1
        end
        local function start_visuals()
            if state.viz_conn then
                return
            end
            state.viz_conn =
                desync_vars.RunService.RenderStepped:Connect(
                function()
                    if not state.viz_enabled then
                        return
                    end
                    be()
                end
            )
        end
        local function stop_visuals()
            if state.viz_conn then
                pcall(
                    function()
                        state.viz_conn:Disconnect()
                    end
                )
                state.viz_conn = nil
            end
            if state.viz_line then
                state.viz_line.Visible = false
            end
            if state.viz_part then
                state.viz_part.Transparency = 1
            end
        end
        function C:GetPreferredPart(a3)
            return a3 and
                (a3:FindFirstChild("HumanoidRootPart") or a3:FindFirstChild("Head") or a3:FindFirstChild("UpperTorso") or
                    a3:FindFirstChild("Torso")) or
                nil
        end
        function C:ToScreen(bh)
            local bi, bj = B.cam:WorldToViewportPoint(bh)
            return B.v2.new(bi.X, bi.Y), bj
        end
        function C:GetMouseLocation()
            return B.uis:GetMouseLocation()
        end
        function C:GetMouseDistance(bm)
            return (self:GetMouseLocation() - bm).Magnitude
        end
        function C:GetClosestToMouse()
            local bn, bo = nil, nil
            for bc, bp in ipairs(B.ps:GetPlayers()) do
                if bp ~= i and self:ValidateClient(bp) then
                    local a3 = bp.Character
                    local bg = self:GetPreferredPart(a3)
                    if bg then
                        local bq, bj = self:ToScreen(bg.Position)
                        if bj then
                            local br = self:GetMouseDistance(bq)
                            if not bo or br < bo then
                                bn, bo = bp, br
                            end
                        end
                    end
                end
            end
            return bn, bo or B.math.huge
        end
        C._hit_listeners = {}
        C._target = {info = nil, listeners = {}}
        function C:OnHit(bs)
            if typeof(bs) == "function" then
                table.insert(self._hit_listeners, bs)
            end
        end
        function C:OnTargetUpdate(bs)
            if typeof(bs) == "function" then
                table.insert(self._target.listeners, bs)
            end
        end
        function C:_emit_hit(aD)
            for bc, bt in ipairs(self._hit_listeners) do
                pcall(bt, aD)
            end
        end
        function C:_chat(bu)
            local bv = game:GetService("StarterGui")
            pcall(
                function()
                    bv:SetCore("ChatMakeSystemMessage", {Text = bu})
                end
            )
            print(bu)
        end
        function C:GetTargetInfo()
            local aD = self._target.info
            return aD ~= nil, aD
        end
        function C:SetTargetInfo(az)
            local aD = nil
            C._dd.override_player = az or nil
            if az and az.Character then
                local a3 = az.Character
                local aA = a3:FindFirstChildOfClass("Humanoid")
                local bw = aA and aA.RootPart or a3:FindFirstChild("HumanoidRootPart")
                local bx = aA and aA.Health or nil
                local by = aA and aA.MaxHealth or nil
                local bf = bw and bw.CFrame or (a3.GetPivot and a3:GetPivot() or nil)
                local bh = bw and bw.Position or (bf and bf.Position or nil)
                aD = {
                    isTarget = true,
                    player = az,
                    userId = az.UserId,
                    name = az.Name,
                    displayName = az.DisplayName,
                    character = a3,
                    humanoid = aA,
                    root = bw,
                    cframe = bf,
                    position = bh,
                    health = bx,
                    maxHealth = by,
                    alive = aA and aA.Health > 0,
                    time = os.clock()
                }
            end
            self._target.info = aD
            for bc, bt in ipairs(self._target.listeners) do
                pcall(bt, aD)
            end
            if g and g["Debug"] then
                if aD then
                    print("[TargetFeed] SetTargetInfo:", aD.name)
                else
                    print("[TargetFeed] SetTargetInfo (char not ready):", az and az.Name or "nil")
                end
            end
        end
        function C:ClearTargetInfo()
            self._target.info = nil
            C._dd.override_player = nil
            for bc, bt in ipairs(self._target.listeners) do
                pcall(bt, nil)
            end
            if g and g["Debug"] then
                print("[TargetFeed] ClearTargetInfo")
            end
        end
        C._dd = {
            last_target = nil,
            last_char = nil,
            hum = nil,
            last_health = nil,
            last_max = nil,
            conn = nil,
            hum_conn = nil,
            last_debug_t = 0,
            override_player = nil
        }
        function C:SetCurrentTarget(az)
            C._dd.override_player = az
            if g and g["Debug"] then
                print("[DD] SetCurrentTarget:", az and az.Name)
            end
        end
        function C:ClearCurrentTarget()
            C._dd.override_player = nil
            if g and g["Debug"] then
                print("[DD] ClearCurrentTarget")
            end
        end
        if not C._dd.conn then
            C._dd.conn =
                B.run.Heartbeat:Connect(
                function()
                    local bz = C._dd
                    local bA = C._dd.override_player or (targeting_state and targeting_state.current or nil)
                    if g and g["Debug"] then
                        local I = os.clock()
                        if I - (bz.last_debug_t or 0) > 1 then
                            bz.last_debug_t = I
                            print(
                                string.format(
                                    "[DD] hb: current=%s hum=%s lh=%s lm=%s",
                                    bA and bA.Name or "nil",
                                    bz.hum and "ok" or "nil",
                                    tostring(bz.last_health),
                                    tostring(bz.last_max)
                                )
                            )
                        end
                    end
                    if bA ~= bz.last_target then
                        bz.last_target = bA
                        bz.last_char = nil
                        bz.hum = nil
                        bz.last_health = nil
                        bz.last_max = nil
                        if bz.hum_conn then
                            pcall(
                                function()
                                    bz.hum_conn:Disconnect()
                                end
                            )
                            bz.hum_conn = nil
                        end
                        if g and g["Debug"] then
                            print("[DD] target switched to:", bA and bA.Name)
                        end
                    end
                    if not bA then
                        return
                    end
                    local a3 = bA.Character
                    if a3 ~= bz.last_char or bz.hum and not bz.hum.Parent then
                        bz.last_char = a3
                        bz.hum = a3 and a3:FindFirstChildOfClass("Humanoid") or nil
                        bz.last_health = nil
                        bz.last_max = nil
                        if bz.hum_conn then
                            pcall(
                                function()
                                    bz.hum_conn:Disconnect()
                                end
                            )
                            bz.hum_conn = nil
                        end
                        if bz.hum then
                            B.run.Heartbeat:Wait()
                            if g and g["Debug"] then
                                print("[DD] humanoid bound for:", bA and bA.Name)
                            end
                            bz.hum_conn =
                                bz.hum.HealthChanged:Connect(
                                function(bB)
                                    local bC = bz.hum and bz.hum.MaxHealth or 0
                                    if bz.last_health == nil or bz.last_max == nil or bC ~= bz.last_max then
                                        bz.last_health = bB
                                        bz.last_max = bC
                                        return
                                    end
                                    if bB ~= bz.last_health then
                                        local bD = bz.last_health - bB
                                        if bD > 0 then
                                            local bE = B.math.floor((bC > 0 and bB / bC or 0) * 100 + 0.5)
                                            local bF = {
                                                player = bA,
                                                damage = bD,
                                                health = bB,
                                                max = bC,
                                                percentage = bE
                                            }
                                            if g and g["Debug"] then
                                                print(
                                                    "[DD] hit:",
                                                    bF.player and bF.player.Name,
                                                    bF.damage,
                                                    bF.health,
                                                    bF.max,
                                                    bF.percentage
                                                )
                                            end
                                        end
                                        bz.last_health = bB
                                        bz.last_max = bC
                                    end
                                end
                            )
                        end
                    end
                    local aA = bz.hum
                    if not aA or not aA.Parent then
                        return
                    end
                    local bB = aA.Health
                    local bC = aA.MaxHealth
                    if bz.last_health == nil or bz.last_max == nil or bC ~= bz.last_max then
                        bz.last_health = bB
                        bz.last_max = bC
                        return
                    end
                    if bB ~= bz.last_health then
                        local bD = bz.last_health - bB
                        if bD > 0 then
                            local bE = B.math.floor((bC > 0 and bB / bC or 0) * 100 + 0.5)
                            local aD = {player = bA, damage = bD, health = bB, max = bC, percentage = bE}
                            C:_emit_hit(aD)
                        end
                        bz.last_health = bB
                        bz.last_max = bC
                    end
                end
            )
            C:OnHit(
                function(aD)
                    local bG = aD.player and aD.player.Name or "?"
                    local bD = B.math.floor(aD.damage + 0.5)
                    local bH = B.math.floor(aD.health + 0.5)
                    local bI = B.math.floor(aD.max + 0.5)
                    local bJ = B.math.floor(aD.percentage + 0.5)
                    C:_chat(string.format("[Hit] %s -%d HP | %d/%d (%d%%)", bG, bD, bH, bI, bJ))
                end
            )
        end
    end
    do
        local bK = {Desync = {Enabled = false, LogInterval = 2}}
        local desync_vars = {
            Players = game:GetService("Players"),
            RunService = game:GetService("RunService"),
            StarterGui = game:GetService("StarterGui"),
            newcf = CFrame.new,
            v3 = Vector3.new,
            typeof = typeof,
            task = task,
            math = math,
            cam = workspace.CurrentCamera,
            uis = game:GetService("UserInputService")
        }
        local LocalPlayer = desync_vars.Players.LocalPlayer
        local bL = task.wait
        local state = {
            enabled = false,
            targetCFrame = nil,
            realCFrame = nil,
            hookInstalled = false,
            logStarted = false,
            followMode = false,
            viz_enabled = false,
            viz_part = nil,
            viz_line = nil,
            viz_conn = nil
        }
        local desync_utility = {}
        function desync_utility:ValidateClient(az)
            if not az then
                return false
            end
            local a3 = az.Character
            if not a3 then
                return false
            end
            local aA = a3:FindFirstChildOfClass("Humanoid")
            if not aA or aA.Health <= 0 then
                return false
            end
            local bd = aA.RootPart
            return bd ~= nil
        end
        function desync_utility:getPlayerParts(az)
            local a3 = az and az.Character
            local aA = a3 and a3:FindFirstChildOfClass("Humanoid")
            local bd = aA and aA.RootPart
            return a3, aA, bd
        end
        local function bM(a0, bN, bO)
            local bP = desync_vars.typeof(a0)
            if bP == "CFrame" then
                return a0
            end
            if bP == "Vector3" then
                return desync_vars.newcf(a0)
            end
            if bP == "table" and a0[1] and a0[2] and a0[3] then
                return desync_vars.newcf(a0[1], a0[2], a0[3])
            end
            if bP == "number" and type(bN) == "number" and type(bO) == "number" then
                return desync_vars.newcf(a0, bN, bO)
            end
            return nil
        end
        local function bQ()
            if state.hookInstalled then
                return
            end
            if not hookmetamethod or not newcclosure or not checkcaller then
                state.hookInstalled = true
                return
            end
            local bR
            bR =
                hookmetamethod(
                game,
                "__index",
                newcclosure(
                    function(self, bS)
                        if not checkcaller() then
                            if bS == "CFrame" and state.enabled then
                                local bc, aA, bd = desync_utility:getPlayerParts(LocalPlayer)
                                if bd and self == bd and state.realCFrame then
                                    return state.realCFrame
                                end
                            end
                        end
                        return bR(self, bS)
                    end
                )
            )
            state.hookInstalled = true
        end
        local function bT()
            if state.heartbeatConn then
                return
            end
            state.heartbeatConn =
                desync_vars.RunService.Heartbeat:Connect(
                function()
                    if not bK.Desync.Enabled or not state.enabled then
                        return
                    end
                    if not desync_utility:ValidateClient(LocalPlayer) then
                        return
                    end
                    local bc, bc, bd = desync_utility:getPlayerParts(LocalPlayer)
                    if not bd then
                        return
                    end
                    state.realCFrame = bd.CFrame
                    local bU
                    if state.followMode then
                        bU = bd.CFrame
                    else
                        bU = state.targetCFrame or state.realCFrame
                    end
                    bd.CFrame = bU
                    desync_vars.RunService.RenderStepped:Wait()
                    bd.CFrame = state.realCFrame
                end
            )
        end
        local function bV()
            if state.logStarted then
                return
            end
            state.logStarted = true
            desync_vars.task.spawn(
                function()
                    while true do
                        desync_vars.task.wait(bK.Desync.LogInterval)
                        if bK.Desync.Enabled and state.enabled then
                            local bh
                            if state.targetCFrame then
                                bh = state.targetCFrame.Position
                            else
                                local bc, bc, bd = desync_utility:getPlayerParts(LocalPlayer)
                                bh = bd and bd.Position or nil
                            end
                            if bh then
                                print(string.format("[DesyncLibrary] Pos: (%.2f, %.2f, %.2f)", bh.X, bh.Y, bh.Z))
                            else
                                print("[DesyncLibrary] Pos: nil (not set)")
                            end
                        end
                    end
                end
            )
        end
        local bW = {}
        function bW.movedesyncto(a0, bN, bO)
            local bf = bM(a0, bN, bO)
            if not bf then
                error("movedesyncto: invalid coordinates")
            end
            state.targetCFrame = bf
            state.followMode = false
            bK.Desync.Enabled = true
            state.enabled = true
            bQ()
            bT()
            bV()
            return bf
        end
        function bW.checksyncposition()
            local bh
            if state.targetCFrame then
                bh = state.targetCFrame.Position
            else
                local bc, bc, bd = desync_utility:getPlayerParts(LocalPlayer)
                bh = bd and bd.Position or nil
            end
            if bh then
                print(string.format("[DesyncLibrary] Pos: (%.2f, %.2f, %.2f)", bh.X, bh.Y, bh.Z))
            else
                print("[DesyncLibrary] Pos: nil (not set)")
            end
            return bh
        end
        function bW.SynchronizeSyncWithPlayer()
            if not desync_utility:ValidateClient(LocalPlayer) then
                error("SynchronizeSyncWithPlayer: player not ready")
            end
            state.targetCFrame = nil
            state.followMode = true
            bK.Desync.Enabled = true
            state.enabled = true
            bQ()
            bT()
            bV()
            local bc, bc, bd = desync_utility:getPlayerParts(LocalPlayer)
            return bd and bd.CFrame or nil
        end
        function bW.SetVisualiseEnabled(bX)
            state.viz_enabled = bX and true or false
            if state.viz_enabled then
                ensure_visuals()
                start_visuals()
            else
                stop_visuals()
            end
            return state.viz_enabled
        end
        pcall(
            function()
                getgenv().DesyncLibrary = bW
            end
        )
        _G.DesyncLibrary = bW
    end
    local targeting_state = {current = nil}
    pcall(
        function()
            _G.targeting_state = targeting_state
        end
    )
    do
        local bY = {}
        local bZ = {
            last_char = nil,
            hl = nil,
            occ_hl = nil,
            occ_model = nil,
            char_added_conn = nil,
            char_removing_conn = nil,
            died_conn = nil,
            bound_player = nil,
            update_counter = 0
        }
        local b_ = "RB_HL_32v"
        local function c0()
            local c1 = Instance.new("Highlight")
            c1.Name = b_
            c1.DepthMode = Enum.HighlightDepthMode.Occluded
            return c1
        end
        local function c2(a3)
            if bZ.occ_model then
                pcall(
                    function()
                        bZ.occ_model:Destroy()
                    end
                )
                bZ.occ_model = nil
            end
            if not a3 then
                return
            end
            local c3 = Instance.new("Model")
            c3.Name = "RB_TH_OCC"
            c3.Parent = workspace
            for bc, c4 in ipairs(a3:GetChildren()) do
                if c4:IsA("BasePart") then
                    local c5 = c4:Clone()
                    c5:ClearAllChildren()
                    c5.CanCollide = false
                    if c5:IsA("MeshPart") then
                        c5.TextureID = ""
                    end
                    c5.Size = c5.Size * 0.99
                    c5.Parent = c3
                    local c6 = Instance.new("WeldConstraint")
                    c6.Part0 = c5
                    c6.Part1 = c4
                    c6.Parent = c5
                end
            end
            bZ.occ_model = c3
        end
        local function c7()
            if bZ.hl then
                bZ.hl.Enabled = false
                bZ.hl.Adornee = nil
                bZ.hl.Parent = nil
            end
            if bZ.occ_hl then
                bZ.occ_hl.Enabled = false
                bZ.occ_hl.Adornee = nil
                bZ.occ_hl.Parent = nil
            end
            if bZ.occ_model then
                pcall(
                    function()
                        bZ.occ_model:Destroy()
                    end
                )
                bZ.occ_model = nil
            end
            if bZ.died_conn then
                pcall(
                    function()
                        bZ.died_conn:Disconnect()
                    end
                )
                bZ.died_conn = nil
            end
            if bZ.char_added_conn then
                pcall(
                    function()
                        bZ.char_added_conn:Disconnect()
                    end
                )
                bZ.char_added_conn = nil
            end
            if bZ.char_removing_conn then
                pcall(
                    function()
                        bZ.char_removing_conn:Disconnect()
                    end
                )
                bZ.char_removing_conn = nil
            end
            bZ.last_char = nil
            bZ.bound_player = nil
        end
        local function c8()
            if bZ.hl then
                bZ.hl.Enabled = false
                bZ.hl.Adornee = nil
            end
            if bZ.occ_hl then
                bZ.occ_hl.Enabled = false
                bZ.occ_hl.Adornee = nil
            end
            bZ.last_char = nil
        end
        local function c9(ca, cb)
            local cc = g and g[ca]
            if cc == nil then
                return cb
            end
            local bP = typeof(cc)
            if bP == "table" and cc.Color then
                return cc.Color
            end
            if bP == "Color3" then
                return cc
            end
            return cb
        end
        local function cd(ca, cb)
            local cc = g and g[ca]
            if typeof(cc) == "number" then
                return cc
            end
            return cb
        end
        local function ce(a3)
            if not a3 or not g or not g["target_highlight"] then
                c8()
                return
            end
            if not bZ.hl then
                bZ.hl = c0()
            end
            if not bZ.occ_hl then
                bZ.occ_hl = c0()
            end
            if not bZ.occ_model or not bZ.occ_model.Parent then
                c2(a3)
            end
            local c1 = bZ.hl
            c1.DepthMode = Enum.HighlightDepthMode.Occluded
            c1.FillColor = c9("th_fill", Color3.fromRGB(255, 255, 0))
            c1.OutlineColor = c9("th_out", Color3.fromRGB(0, 0, 0))
            c1.FillTransparency = cd("th_ftrs", 0.5)
            c1.OutlineTransparency = cd("th_otrs", 0.5)
            if c1.Adornee ~= a3 then
                c1.Adornee = a3
            end
            if c1.Parent ~= a3 then
                c1.Parent = a3
            end
            c1.Enabled = true
            local cf = bZ.occ_hl
            cf.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
            cf.FillColor = c9("th_occ_fill", Color3.fromRGB(0, 170, 255))
            cf.OutlineColor = c9("th_occ_out", Color3.fromRGB(0, 0, 0))
            cf.FillTransparency = cd("th_occ_ftrs", 0.3)
            cf.OutlineTransparency = cd("th_occ_otrs", 0.7)
            if cf.Adornee ~= bZ.occ_model then
                cf.Adornee = bZ.occ_model
            end
            if cf.Parent ~= bZ.occ_model then
                cf.Parent = bZ.occ_model
            end
            cf.Enabled = true
            bZ.last_char = a3
        end
        local function cg(a3)
            if not a3 then
                return
            end
            local aA = a3:FindFirstChildOfClass("Humanoid")
            if aA then
                if bZ.died_conn then
                    pcall(
                        function()
                            bZ.died_conn:Disconnect()
                        end
                    )
                end
                bZ.died_conn =
                    aA.Died:Connect(
                    function()
                        print("[TH] Humanoid died for:", a3.Name, "- removing visual highlight")
                        c8()
                    end
                )
            end
        end
        local function ch(a3)
            if not a3 then
                return
            end
            print("[TH] Cleanup highlights for:", a3.Name)
            if bZ.hl then
                bZ.hl.Enabled = false
                bZ.hl.Adornee = nil
            end
            for bc, ci in ipairs(a3:GetDescendants()) do
                if typeof(ci) == "Instance" and ci:IsA("Highlight") and ci ~= bZ.hl then
                    pcall(
                        function()
                            ci:Destroy()
                        end
                    )
                end
            end
        end
        local function cj(az)
            if not az then
                return
            end
            if bZ.char_added_conn then
                pcall(
                    function()
                        bZ.char_added_conn:Disconnect()
                    end
                )
            end
            if bZ.char_removing_conn then
                pcall(
                    function()
                        bZ.char_removing_conn:Disconnect()
                    end
                )
            end
            bZ.bound_player = az
            bZ.char_removing_conn =
                az.CharacterRemoving:Connect(
                function()
                    print("[TH] CharacterRemoving for:", az.Name)
                    c8()
                end
            )
            bZ.char_added_conn =
                az.CharacterAdded:Connect(
                function(ck)
                    if not ck then
                        return
                    end
                    print("[TH] CharacterAdded for:", az.Name)
                    game:GetService("RunService").Heartbeat:Wait()
                    local cl =
                        targeting_state and targeting_state.current and
                        (targeting_state.current == az or
                            targeting_state.current.UserId and targeting_state.current.UserId == az.UserId)
                    if cl and g and g["target_highlight"] then
                        print("[TH] Reapplying highlight after respawn for:", az.Name)
                        ce(ck)
                        cg(ck)
                    end
                end
            )
            if az.Character then
                ce(az.Character)
                cg(az.Character)
            end
        end
        local function cm(a3)
            if not a3 then
                return false
            end
            local cn = workspace.CurrentCamera
            local bw = a3:FindFirstChild("HumanoidRootPart") or a3:FindFirstChild("Head")
            if not bw then
                return false
            end
            local co = cn.CFrame.Position
            local cp = bw.Position - co
            local cq = RaycastParams.new()
            cq.FilterType = Enum.RaycastFilterType.Blacklist
            cq.FilterDescendantsInstances = {i.Character, a3, bZ.occ_model}
            local cr = workspace:Raycast(co, cp, cq)
            return cr == nil
        end
        function bY:update_target_highlight()
            if not g or not g["target_highlight"] then
                c7()
                return
            end
            local bA = targeting_state and targeting_state.current
            local a3 = bA and bA.Character
            if not a3 then
                c7()
                return
            end
            if bZ.last_char ~= a3 then
                ce(a3)
                cg(a3)
            end
            local cs = cm(a3)
            if bZ.occ_hl then
                bZ.occ_hl.Enabled = not cs
            end
        end
        function bY:selectTarget()
            if not g or not g["Targeting_Enabled"] then
                return
            end
            if g and g["Debug"] then
                print("[Targeting] selectTarget called")
            end
            if targeting_state.current then
                if g and g["Debug"] then
                    print("[Targeting] Releasing target:", targeting_state.current.Name)
                end
                c7()
                targeting_state.current = nil
                C:ClearTargetInfo()
                C:ClearCurrentTarget()
                if targeting_keybind and targeting_keybind.update_visibility then
                    targeting_keybind.update_visibility()
                end
                if g and g["Debug"] then
                    print("[Targeting] Target cleared")
                end
            else
                local ct, cu = C:GetClosestToMouse()
                if ct then
                    targeting_state.current = ct
                    C:SetTargetInfo(ct)
                    C:SetCurrentTarget(ct)
                    if g and g["target_highlight"] then
                        cj(ct)
                    end
                    if targeting_keybind and targeting_keybind.update_visibility then
                        targeting_keybind.update_visibility()
                    end
                    if g and g["Debug"] then
                        print(
                            "[Targeting] Target acquired:",
                            targeting_state.current.Name,
                            "(MouseDist:",
                            B.math.floor(cu),
                            ")"
                        )
                    end
                else
                    if g and g["Debug"] then
                        print("[Targeting] No target found")
                    end
                end
            end
        end
        local cv = t:column()
        local cw, cx = cv:multi_section({names = {"Targeting", "Visuals"}})
        local targeting_keybind
        local cy =
            cw:toggle(
            {name = "Enabled", flag = "Targeting_Enabled", default = false, callback = function(state)
                    if not state then
                        if g and g["Debug"] then
                            print("[Targeting] Disabled -> clearing target")
                        end
                        c7()
                        targeting_state.current = nil
                        C:ClearTargetInfo()
                        C:ClearCurrentTarget()
                        if targeting_keybind and targeting_keybind.update_visibility then
                            targeting_keybind.update_visibility()
                        end
                    end
                end}
        )
        targeting_keybind =
            cy:keybind(
            {name = "Target", flag = "Target_Select_Bind", default = "t", visibility_condition = function()
                    return targeting_state and targeting_state.current ~= nil
                end, callback = function()
                    bY:selectTarget()
                end}
        )
        local cz =
            cw:dropdown(
            {name = "Selecting Mode", flag = "Targeting_Mode", items = {"Sticky", "Nuker"}, default = "Sticky"}
        )
        local function cA()
            if not g or not g["target_highlight"] then
                return
            end
            local a3 = bZ and bZ.last_char
            if not a3 and targeting_state and targeting_state.current then
                a3 = targeting_state.current.Character
                if a3 then
                    bZ.last_char = a3
                end
            end
            if a3 then
                ce(a3)
                cg(a3)
            end
        end
        local cB =
            cx:toggle(
            {name = "Target Highlight", flag = "target_highlight", default = false, callback = function(state)
                    if state then
                        cA()
                    else
                        c7()
                    end
                end}
        )
        cB:colorpicker(
            {name = "Fill", flag = "th_fill", default = Color3.fromRGB(255, 255, 0), callback = function()
                    cA()
                end}
        )
        cB:colorpicker(
            {name = "Outline", flag = "th_out", default = Color3.fromRGB(0, 0, 0), callback = function()
                    cA()
                end}
        )
        cB:colorpicker(
            {name = "OccludedFill", flag = "th_occ_fill", default = Color3.fromRGB(0, 170, 255), callback = function()
                    cA()
                end}
        )
        cB:colorpicker(
            {name = "OccludedOutline", flag = "th_occ_out", default = Color3.fromRGB(0, 0, 0), callback = function()
                    cA()
                end}
        )
        local cC = cx:dependency_box()
        cC:setup_dependencies({{cB, true}})
        cC:slider(
            {
                name = "Fill Transparency",
                flag = "th_ftrs",
                min = 0,
                max = 1,
                default = 0.5,
                interval = 0.01,
                callback = function()
                    cA()
                end
            }
        )
        cC:slider(
            {
                name = "Outline Transparency",
                flag = "th_otrs",
                min = 0,
                max = 1,
                default = 0.5,
                interval = 0.01,
                callback = function()
                    cA()
                end
            }
        )
        cC:slider(
            {
                name = "OccludedFill Transparency",
                flag = "th_occ_ftrs",
                min = 0,
                max = 1,
                default = 0.3,
                interval = 0.01,
                callback = function()
                    cA()
                end
            }
        )
        cC:slider(
            {
                name = "OccludedOutline Transparency",
                flag = "th_occ_otrs",
                min = 0,
                max = 1,
                default = 0.7,
                interval = 0.01,
                callback = function()
                    cA()
                end
            }
        )
        do
            local cD = {
                enabled = false,
                folder = nil,
                handles = {},
                fill_color = c("#ffffff"),
                fill_transparency = 0.5,
                last_target = nil
            }
            local function cE()
                for bc, cF in pairs(cD.handles) do
                    pcall(
                        function()
                            cF:Destroy()
                        end
                    )
                end
                cD.handles = {}
                if cD.folder then
                    pcall(
                        function()
                            cD.folder:Destroy()
                        end
                    )
                    cD.folder = nil
                end
            end
            local function cG(a3)
                if not a3 then
                    return
                end
                if not cD.folder then
                    cD.folder = Instance.new("Folder")
                    cD.folder.Name = "RB_Chams"
                    cD.folder.Parent = workspace.CurrentCamera
                end
                for bc, cF in pairs(cD.handles) do
                    pcall(
                        function()
                            cF:Destroy()
                        end
                    )
                end
                cD.handles = {}
                for bc, bg in ipairs(a3:GetChildren()) do
                    if
                        bg:IsA("BasePart") and
                            (bg.Name:find("Arm") or bg.Name:find("Leg") or bg.Name:find("Hand") or bg.Name:find("Feet") or
                                bg.Name:find("Foot") or
                                bg.Name:find("Torso") or
                                bg.Name == "Head")
                     then
                        local cF = Instance.new("BoxHandleAdornment")
                        cF.Size = bg.Size
                        cF.Adornee = bg
                        cF.AlwaysOnTop = true
                        cF.ZIndex = 0
                        cF.Transparency = cD.fill_transparency
                        cF.Color3 = cD.fill_color
                        cF.Parent = cD.folder
                        table.insert(cD.handles, cF)
                    end
                end
            end
            local function cH()
                if not cD.enabled then
                    cE()
                    return
                end
                local bU = targeting_state and targeting_state.current
                if not bU or not bU.Character then
                    cE()
                    cD.last_target = nil
                    return
                end
                if cD.last_target ~= bU.Character then
                    cG(bU.Character)
                    cD.last_target = bU.Character
                end
                for bc, cF in pairs(cD.handles) do
                    if cF and cF.Parent then
                        cF.Color3 = cD.fill_color
                        cF.Transparency = cD.fill_transparency
                        cF.AlwaysOnTop = true
                    end
                end
            end
            local cI =
                cx:toggle(
                {name = "Target Chams", flag = "target_chams", default = false, callback = function(state)
                        cD.enabled = state
                        if state then
                            cH()
                        else
                            cE()
                        end
                    end}
            )
            cI:colorpicker(
                {name = "Color", flag = "chams_color", default = c("#ffffff"), callback = function(cJ)
                        cD.fill_color = cJ
                        cH()
                    end}
            )
            local cK = cx:dependency_box()
            cK:setup_dependencies({{cI, true}})
            cK:slider(
                {
                    name = "Trs",
                    flag = "chams_trs",
                    min = 0,
                    max = 1,
                    default = 0.5,
                    interval = 0.01,
                    callback = function(cL)
                        cD.fill_transparency = cL
                        cH()
                    end
                }
            )
            table.insert(
                a.connections,
                B.run.RenderStepped:Connect(
                    function()
                        if cD.enabled then
                            cH()
                        end
                    end
                )
            )
            C:OnTargetUpdate(
                function(aD)
                    if not aD then
                        cE()
                        cD.last_target = nil
                    end
                end
            )
        end
        do
            local cM = {
                enabled = false,
                style = "Custom",
                c1 = Color3.fromRGB(128, 18, 255),
                c2 = Color3.fromRGB(255, 0, 128),
                c3 = Color3.fromRGB(0, 200, 255),
                c4 = Color3.fromRGB(255, 255, 0),
                height = 0.7,
                radius = 2,
                sides = 25,
                hat_trs = 0.35,
                line_trs = 1.0,
                drawings = {},
                conn = nil,
                speed = 0.2
            }
            local function cN(a5, cO, bP)
                return a5 + (cO - a5) * bP
            end
            local function cP(a5, cO, bP)
                return Color3.new(cN(a5.R, cO.R, bP), cN(a5.G, cO.G, bP), cN(a5.B, cO.B, bP))
            end
            local function cQ(bP, cR)
                local cS = (bP + cR * cM.speed) % 1
                if cS < 0.25 then
                    return cP(cM.c1, cM.c2, cS / 0.25)
                elseif cS < 0.5 then
                    return cP(cM.c2, cM.c3, (cS - 0.25) / 0.25)
                elseif cS < 0.75 then
                    return cP(cM.c3, cM.c4, (cS - 0.5) / 0.25)
                else
                    return cP(cM.c4, cM.c1, (cS - 0.75) / 0.25)
                end
            end
            local function cT(cU, bP, cR, cV)
                local cW = #cU
                if cW == 0 then
                    return Color3.new(1, 1, 1)
                end
                if cW == 1 then
                    return cU[1]
                end
                local cS = (bP + cR * (cV or cM.speed)) % 1
                local cX = cS * cW
                local cY = math.floor(cX) + 1
                local cZ = cX - math.floor(cX)
                local a5 = cU[cY]
                local cO = cU[cY % cW + 1]
                return cP(a5, cO, cZ)
            end
            local function c_(bP, cR)
                local cU = {Color3.fromRGB(255, 105, 180), Color3.fromRGB(255, 75, 150), Color3.fromRGB(135, 206, 250)}
                return cT(cU, bP, cR, 0.25)
            end
            local function d0(bP, cR)
                local d1 = (cR * 0.2 + bP) % 1
                return Color3.fromHSV(d1, 0.6, 1)
            end
            local d2 = 30
            local function d3()
                if #cM.drawings >= d2 then
                    return
                end
                for cY = 1, d2 do
                    local ba = Drawing.new("Line")
                    local d4 = Drawing.new("Triangle")
                    ba.ZIndex = 2
                    ba.Thickness = 1
                    ba.Visible = false
                    d4.ZIndex = 1
                    d4.Filled = true
                    d4.Visible = false
                    table.insert(cM.drawings, {ba, d4})
                end
            end
            d3()
            local function d5(cc)
                for bc = 1, d2 do
                    local d6 = cM.drawings[bc]
                    if d6 then
                        local ba, d4 = d6[1], d6[2]
                        if ba then
                            ba.Visible = cc and bc <= cM.sides
                        end
                        if d4 then
                            d4.Visible = cc and bc <= cM.sides
                        end
                    end
                end
            end
            local function d7()
                if cM.conn then
                    pcall(
                        function()
                            cM.conn:Disconnect()
                        end
                    )
                    cM.conn = nil
                end
                d5(false)
            end
            local d8 = {
                CustomPalette1 = {Color3.fromRGB(255, 94, 58), Color3.fromRGB(255, 154, 0), Color3.fromRGB(255, 212, 0)},
                CustomPalette2 = {
                    Color3.fromRGB(0, 212, 255),
                    Color3.fromRGB(0, 128, 255),
                    Color3.fromRGB(0, 64, 128),
                    Color3.fromRGB(0, 40, 80)
                },
                CustomPalette3 = {Color3.fromRGB(255, 0, 0), Color3.fromRGB(255, 102, 0)},
                CustomPalette4 = {
                    Color3.fromRGB(200, 255, 255),
                    Color3.fromRGB(150, 220, 255),
                    Color3.fromRGB(100, 200, 255),
                    Color3.fromRGB(80, 160, 220),
                    Color3.fromRGB(60, 120, 190)
                },
                CustomPalette5 = {Color3.fromRGB(88, 0, 255), Color3.fromRGB(255, 0, 191), Color3.fromRGB(0, 160, 255)},
                CustomPalette6 = {Color3.fromRGB(0, 255, 128), Color3.fromRGB(255, 0, 255), Color3.fromRGB(0, 255, 255)},
                CustomPalette7 = {
                    Color3.fromRGB(255, 255, 255),
                    Color3.fromRGB(200, 200, 200),
                    Color3.fromRGB(150, 150, 150),
                    Color3.fromRGB(100, 100, 100)
                },
                CustomPalette8 = {
                    Color3.fromRGB(255, 20, 147),
                    Color3.fromRGB(186, 85, 211),
                    Color3.fromRGB(72, 61, 139)
                },
                CustomPalette9 = {
                    Color3.fromRGB(0, 255, 255),
                    Color3.fromRGB(173, 216, 230),
                    Color3.fromRGB(25, 25, 112)
                },
                CustomPalette10 = {Color3.fromRGB(255, 215, 0), Color3.fromRGB(255, 165, 0), Color3.fromRGB(255, 69, 0)},
                CustomPalette11 = {Color3.fromRGB(124, 252, 0), Color3.fromRGB(50, 205, 50), Color3.fromRGB(0, 128, 0)},
                CustomPalette12 = {
                    Color3.fromRGB(0, 0, 0),
                    Color3.fromRGB(45, 0, 80),
                    Color3.fromRGB(120, 0, 200),
                    Color3.fromRGB(255, 0, 255)
                },
                CustomPalette13 = {
                    Color3.fromRGB(0, 0, 128),
                    Color3.fromRGB(0, 0, 255),
                    Color3.fromRGB(0, 191, 255),
                    Color3.fromRGB(135, 206, 250)
                },
                CustomPalette14 = {
                    Color3.fromRGB(255, 105, 180),
                    Color3.fromRGB(255, 182, 193),
                    Color3.fromRGB(135, 206, 250)
                },
                CustomPalette15 = {
                    Color3.fromRGB(240, 255, 255),
                    Color3.fromRGB(176, 224, 230),
                    Color3.fromRGB(135, 206, 235),
                    Color3.fromRGB(70, 130, 180)
                },
                CustomPalette16 = {
                    Color3.fromRGB(255, 255, 240),
                    Color3.fromRGB(255, 250, 205),
                    Color3.fromRGB(250, 250, 210),
                    Color3.fromRGB(238, 232, 170)
                }
            }
            local function d9(da, cR)
                local db = cM.style
                if db == "Rainbow" then
                    return d0(da, cR)
                elseif db == "Astolfo" then
                    return c_(da, cR)
                elseif d8[db] ~= nil then
                    return cT(d8[db], da, cR, 0.2)
                else
                    return cQ(da, cR)
                end
            end
            local function dc()
                local bU = targeting_state and targeting_state.current
                local a3 = bU and bU.Character or nil
                local dd = a3 and a3:FindFirstChild("Head")
                local aA = a3 and a3:FindFirstChildOfClass("Humanoid")
                if not cM.enabled or not (a3 and dd and aA and aA.Health > 0) then
                    d5(false)
                    return
                end
                local cn = workspace.CurrentCamera
                local de = dd.Position
                local df = (cn.CFrame.Position - cn.Focus.Position).Magnitude
                if df < 1 then
                    d5(false)
                    return
                end
                local dg, dh = cn:WorldToViewportPoint(de)
                if not dh or dg.Z <= 0 then
                    d5(false)
                    return
                end
                local di = tick()
                local dj = math.pi * 2
                local bh = de + Vector3.new(0, 0.75, 0)
                local dk = bh + Vector3.new(0, cM.height, 0)
                for cY = 1, cM.sides do
                    local d6 = cM.drawings[cY]
                    if d6 then
                        local ba, d4 = d6[1], d6[2]
                        if ba and d4 then
                            local dl = (cY - 1) / cM.sides * dj
                            local next = cY / cM.sides * dj
                            local dm = bh + Vector3.new(math.cos(dl), 0, math.sin(dl)) * cM.radius
                            local dn = bh + Vector3.new(math.cos(next), 0, math.sin(next)) * cM.radius
                            local dp = cn:WorldToViewportPoint(dm)
                            local dq = cn:WorldToViewportPoint(dn)
                            local dr = cn:WorldToViewportPoint(dk)
                            local ds = (cY - 1) / cM.sides
                            local dt = d9(ds, di)
                            ba.From = Vector2.new(dp.X, dp.Y)
                            ba.To = Vector2.new(dq.X, dq.Y)
                            ba.Color = dt
                            ba.Transparency = cM.line_trs
                            ba.Visible = true
                            d4.PointA = Vector2.new(dr.X, dr.Y)
                            d4.PointB = ba.From
                            d4.PointC = ba.To
                            d4.Color = dt
                            d4.Transparency = cM.hat_trs
                            d4.Visible = true
                        end
                    end
                end
                for cY = cM.sides + 1, d2 do
                    local d6 = cM.drawings[cY]
                    if d6 then
                        if d6[1] then
                            d6[1].Visible = false
                        end
                        if d6[2] then
                            d6[2].Visible = false
                        end
                    end
                end
            end
            local du =
                cx:toggle(
                {name = "Target ChinaHat", flag = "china_hat", default = false, callback = function(state)
                        cM.enabled = state
                        if state then
                            dc()
                        else
                            d7()
                        end
                    end}
            )
            du:colorpicker(
                {name = "Color 1", flag = "hat_c1", default = cM.c1, callback = function(dv)
                        cM.c1 = dv
                    end}
            )
            du:colorpicker(
                {name = "Color 2", flag = "hat_c2", default = cM.c2, callback = function(dv)
                        cM.c2 = dv
                    end}
            )
            du:colorpicker(
                {name = "Color 3", flag = "hat_c3", default = cM.c3, callback = function(dv)
                        cM.c3 = dv
                    end}
            )
            du:colorpicker(
                {name = "Color 4", flag = "hat_c4", default = cM.c4, callback = function(dv)
                        cM.c4 = dv
                    end}
            )
            local dw = cx:dependency_box()
            dw:setup_dependencies({{du, true}})
            local dx =
                dw:dropdown(
                {
                    name = "Style",
                    flag = "hat_style",
                    items = {
                        "Custom",
                        "Rainbow",
                        "Astolfo",
                        "CustomPalette1",
                        "CustomPalette2",
                        "CustomPalette3",
                        "CustomPalette4",
                        "CustomPalette5",
                        "CustomPalette6",
                        "CustomPalette7",
                        "CustomPalette8",
                        "CustomPalette9",
                        "CustomPalette10",
                        "CustomPalette11",
                        "CustomPalette12",
                        "CustomPalette13",
                        "CustomPalette14",
                        "CustomPalette15",
                        "CustomPalette16"
                    },
                    default = "Custom",
                    callback = function(dy)
                        cM.style = dy
                    end
                }
            )
            local dz = B.run.RenderStepped:Connect(dc)
            table.insert(a.connections, dz)
        end
        do
            local dA = {
                enabled = false,
                color = c("#ffffff"),
                size = 1.0,
                speed = 1.0,
                bill = nil,
                img = nil,
                angle = 0,
                conn = nil,
                last_tick = os.clock(),
                asset_items = nil,
                asset_map = nil
            }
            local function dB(dC)
                if getcustomasset then
                    return getcustomasset(dC)
                end
                if getsynasset then
                    return getsynasset(dC)
                end
                return dC
            end
            local function dD()
                local cp = (a and a.directory or "Rebuild.gg") .. "/assets"
                local dE, dF = {}, {}
                local dG, dH =
                    pcall(
                    function()
                        return listfiles and listfiles(cp) or {}
                    end
                )
                if dG and dH and #dH > 0 then
                    table.sort(dH)
                    for bc, cZ in ipairs(dH) do
                        local dI = string.lower(cZ)
                        if dI:sub(-4) == ".png" or dI:sub(-4) == ".jpg" or dI:sub(-5) == ".jpeg" then
                            local bG = cZ:match("([^/\\]+)$") or cZ
                            table.insert(dE, bG)
                            dF[bG] = dB(cZ)
                        end
                    end
                end
                dA.asset_items = dE
                dA.asset_map = dF
                return dE, dF
            end
            local function dJ(bG)
                if not bG or bG == "" then
                    return
                end
                local dF = dA.asset_map or select(2, dD())
                local dC = dF and dF[bG]
                if dA.img then
                    dA.img.Image = dC or dA.img.Image or ""
                end
            end
            local function dK()
                local cp = (a and a.directory or "Rebuild.gg") .. "/assets"
                local dG, dH =
                    pcall(
                    function()
                        return listfiles and listfiles(cp) or {}
                    end
                )
                if not dG or not dH or #dH == 0 then
                    return nil
                end
                table.sort(dH)
                for bc, cZ in ipairs(dH) do
                    local dI = string.lower(cZ)
                    if dI:sub(-4) == ".png" or dI:sub(-4) == ".jpg" or dI:sub(-5) == ".jpeg" then
                        return dB(cZ)
                    end
                end
                return dB(dH[1])
            end
            local function dL()
                if dA.bill then
                    return
                end
                local dM = Instance.new("BillboardGui")
                dM.Name = "RB_TargetESP"
                dM.AlwaysOnTop = true
                dM.LightInfluence = 0
                dM.Size = UDim2.new(dA.size, 0, dA.size, 0)
                dM.Enabled = true
                local dN = Instance.new("ImageLabel")
                dN.Name = "CrosshairImage"
                dN.BackgroundTransparency = 1
                dN.Size = UDim2.new(1, 0, 1, 0)
                dN.Position = UDim2.fromScale(0, 0)
                if not dA.asset_items or not dA.asset_map then
                    dD()
                end
                local dO = g and g["target_esp_image"] or dA.asset_items and dA.asset_items[1]
                dN.Image = dO and dA.asset_map and dA.asset_map[dO] or (dK() or "")
                dN.ImageColor3 = dA.color
                dN.Parent = dM
                dA.bill = dM
                dA.img = dN
            end
            local function dP()
                if dA.bill then
                    pcall(
                        function()
                            dA.bill:Destroy()
                        end
                    )
                end
                dA.bill = nil
                dA.img = nil
            end
            local function dQ()
                local az = targeting_state and targeting_state.current
                if not az or not az.Character then
                    return nil
                end
                local a3 = az.Character
                local dR = g and g["aimbot_part"]
                if dR and a3:FindFirstChild(dR) then
                    return a3[dR]
                end
                return C:GetPreferredPart(a3)
            end
            local function dS()
                if not dA.enabled then
                    return
                end
                dL()
                local bg = dQ()
                if not bg then
                    if dA.bill then
                        dA.bill.Parent = nil
                    end
                    return
                end
                dA.bill.Adornee = bg
                dA.bill.Parent = bg
                local cn = B and B.cam or workspace.CurrentCamera
                local dT = (cn.CFrame.Position - bg.Position).Magnitude
                local dU = math.clamp(dT / 30, 0.8, 4)
                local dV = g and g["target_esp_size"] or dA.size
                dV = (dV or 1) * dU
                dA.bill.Size = UDim2.new(dV, 0, dV, 0)
                local I = os.clock()
                local dW = math.max(0, I - (dA.last_tick or I))
                dA.last_tick = I
                local dX = g and g["target_esp_speed"] or dA.speed
                dA.angle = (dA.angle + (dX or 1) * 180 * dW) % 360
                if dA.img then
                    dA.img.Rotation = dA.angle
                    local cJ = g and g["target_esp_color"] or dA.color
                    if type(cJ) == "table" then
                        if cJ.R and cJ.G and cJ.B then
                            dA.img.ImageColor3 = Color3.new(cJ.R, cJ.G, cJ.B)
                        elseif cJ.r and cJ.g and cJ.b then
                            dA.img.ImageColor3 = Color3.new(cJ.r, cJ.g, cJ.b)
                        else
                            dA.img.ImageColor3 = Color3.new(1, 1, 1)
                        end
                    else
                        dA.img.ImageColor3 = cJ
                    end
                end
            end
            local dY =
                cx:toggle(
                {
                    name = "Target Esp",
                    flag = "target_esp",
                    default = false,
                    callback = function(state)
                        dA.enabled = state
                        if state then
                            dL()
                            if not dA.conn then
                                dA.conn = B.run.RenderStepped:Connect(dS)
                                table.insert(a.connections, dA.conn)
                            end
                        else
                            if dA.conn then
                                pcall(
                                    function()
                                        dA.conn:Disconnect()
                                    end
                                )
                            end
                            dA.conn = nil
                            dP()
                        end
                    end
                }
            )
            dY:colorpicker(
                {name = "Color", flag = "target_esp_color", default = c("#ffffff"), callback = function(cJ)
                        dA.color = cJ
                        if dA.img then
                            dA.img.ImageColor3 = cJ
                        end
                    end}
            )
            local dZ = cx:dependency_box()
            dZ:setup_dependencies({{dY, true}})
            local dE = dD()
            local d_ = dE and dE[1] or nil
            dZ:dropdown(
                {name = "Image", flag = "target_esp_image", items = dE or {}, default = d_, callback = function(bG)
                        dJ(bG)
                    end}
            )
            dZ:slider(
                {
                    name = "Size",
                    flag = "target_esp_size",
                    min = 0.1,
                    max = 40,
                    default = 1,
                    interval = 0.05,
                    callback = function(cc)
                        dA.size = cc
                    end
                }
            )
            dZ:slider(
                {
                    name = "Speed",
                    flag = "target_esp_speed",
                    min = 0.1,
                    max = 10,
                    default = 1,
                    interval = 0.1,
                    callback = function(cc)
                        dA.speed = cc
                    end
                }
            )
            C:OnTargetUpdate(
                function(aD)
                    if not aD then
                        dP()
                    end
                end
            )
            table.insert(
                a.connections,
                {
                    Disconnect = function()
                        if dA.conn then
                            pcall(
                                function()
                                    dA.conn:Disconnect()
                                end
                            )
                        end
                        dA.conn = nil
                        dP()
                    end
                }
            )
        end
        do
            local e0 = {
                enabled = false,
                body_part = "HumanoidRootPart",
                origin = "mouse",
                line = nil,
                outline = nil,
                connection = nil,
                line_thickness = 2,
                outline_thickness = 4,
                line_color = Color3.fromRGB(255, 255, 255),
                outline_color = Color3.fromRGB(0, 0, 0)
            }
            local function e1()
                if e0.line then
                    pcall(
                        function()
                            e0.line:Remove()
                        end
                    )
                    e0.line = nil
                end
                if e0.outline then
                    pcall(
                        function()
                            e0.outline:Remove()
                        end
                    )
                    e0.outline = nil
                end
                if e0.connection then
                    e0.connection:Disconnect()
                    e0.connection = nil
                end
            end
            local function e2()
                if not e0.enabled then
                    e1()
                    return
                end
                if not e0.outline then
                    e0.outline = Drawing.new("Line")
                    e0.outline.Visible = false
                    e0.outline.Color = e0.outline_color
                    e0.outline.Thickness = e0.outline_thickness
                end
                if not e0.line then
                    e0.line = Drawing.new("Line")
                    e0.line.Visible = false
                    e0.line.Color = e0.line_color
                    e0.line.Thickness = e0.line_thickness
                end
                if not e0.connection then
                    local e3 = B and B.run or game:GetService("RunService")
                    local e4 = B and B.uis or game:GetService("UserInputService")
                    local e5 = workspace and workspace.CurrentCamera or game:GetService("Workspace").CurrentCamera
                    e0.connection =
                        e3.RenderStepped:Connect(
                        function()
                            if not e0.enabled or not targeting_state.current then
                                if e0.line then
                                    e0.line.Visible = false
                                end
                                if e0.outline then
                                    e0.outline.Visible = false
                                end
                                if e0.beam_line then
                                    e0.beam_line.Enabled = false
                                end
                                if e0.beam_outline then
                                    e0.beam_outline.Enabled = false
                                end
                                return
                            end
                            local bU = targeting_state.current
                            local a3 = bU and bU.Character
                            if not a3 then
                                if e0.line then
                                    e0.line.Visible = false
                                end
                                if e0.outline then
                                    e0.outline.Visible = false
                                end
                                return
                            end
                            local bg = a3:FindFirstChild(e0.body_part)
                            if not bg then
                                if e0.line then
                                    e0.line.Visible = false
                                end
                                if e0.outline then
                                    e0.outline.Visible = false
                                end
                                return
                            end
                            local e6, e7 = e5:WorldToViewportPoint(bg.Position)
                            if not e7 then
                                if e0.line then
                                    e0.line.Visible = false
                                end
                                if e0.outline then
                                    e0.outline.Visible = false
                                end
                                if e0.beam_line then
                                    e0.beam_line.Enabled = false
                                end
                                if e0.beam_outline then
                                    e0.beam_outline.Enabled = false
                                end
                                return
                            end
                            local e8 = Vector2.new(e6.X, e6.Y)
                            local e9
                            if e0.origin == "mouse" then
                                e9 = e4:GetMouseLocation()
                            elseif e0.origin == "top" then
                                e9 = Vector2.new(e5.ViewportSize.X / 2, 0)
                            elseif e0.origin == "bottom" then
                                e9 = Vector2.new(e5.ViewportSize.X / 2, e5.ViewportSize.Y)
                            elseif e0.origin == "center" then
                                e9 = Vector2.new(e5.ViewportSize.X / 2, e5.ViewportSize.Y / 2)
                            end
                            if e0.outline then
                                e0.outline.From = e9
                                e0.outline.To = e8
                                e0.outline.Visible = true
                                e0.outline.Thickness = e0.outline_thickness
                            end
                            if e0.line then
                                e0.line.From = e9
                                e0.line.To = e8
                                e0.line.Visible = true
                                e0.line.Thickness = e0.line_thickness
                                e0.line.Color = e0.line_color
                            end
                        end
                    )
                end
            end
            local ea =
                cx:toggle(
                {name = "Target Tracer", flag = "target_tracer", default = false, callback = function(state)
                        e0.enabled = state
                        if state then
                            e2()
                        else
                            e1()
                        end
                    end}
            )
            ea:colorpicker(
                {name = "Outline", flag = "tt_out", default = Color3.fromRGB(0, 0, 0), callback = function(cJ)
                        e0.outline_color = cJ
                        if e0.outline then
                            e0.outline.Color = cJ
                        end
                    end}
            )
            ea:colorpicker(
                {name = "Fill", flag = "tt_fill", default = Color3.fromRGB(255, 255, 255), callback = function(cJ)
                        e0.line_color = cJ
                        if e0.line then
                            e0.line.Color = cJ
                        end
                    end}
            )
            local eb = cx:dependency_box()
            eb:setup_dependencies({{ea, true}})
            eb:dropdown(
                {
                    name = "Part",
                    flag = "tt_part",
                    items = {
                        "HumanoidRootPart",
                        "Head",
                        "UpperTorso",
                        "LowerTorso",
                        "LeftUpperArm",
                        "LeftLowerArm",
                        "LeftHand",
                        "RightUpperArm",
                        "RightLowerArm",
                        "RightHand",
                        "LeftUpperLeg",
                        "LeftLowerLeg",
                        "LeftFoot",
                        "RightUpperLeg",
                        "RightLowerLeg",
                        "RightFoot"
                    },
                    default = "HumanoidRootPart",
                    callback = function(cL)
                        e0.body_part = cL
                    end
                }
            )
            eb:dropdown(
                {
                    name = "Origin",
                    flag = "tt_origin",
                    items = {"mouse", "top", "bottom", "center"},
                    default = "mouse",
                    callback = function(cL)
                        e0.origin = cL
                    end
                }
            )
            C:OnTargetUpdate(
                function(aD)
                    if not aD then
                        if e0.line then
                            e0.line.Visible = false
                        end
                        if e0.outline then
                            e0.outline.Visible = false
                        end
                        if e0.beam_line then
                            e0.beam_line.Enabled = false
                        end
                        if e0.beam_outline then
                            e0.beam_outline.Enabled = false
                        end
                    end
                end
            )
            table.insert(
                a.connections,
                {Disconnect = function()
                        e1()
                    end}
            )
        end
        do
            local ec = game:GetService("RunService")
            local w = game:GetService("Players")
            local LocalPlayer = w.LocalPlayer
            local e5 = workspace.CurrentCamera
            local e4 = game:GetService("UserInputService")
            local function ed(a3)
                return a3 and
                    (a3:FindFirstChild("HumanoidRootPart") or a3:FindFirstChild("Head") or
                        a3:FindFirstChild("UpperTorso") or
                        a3:FindFirstChild("Torso"))
            end
            local ee =
                ec.RenderStepped:Connect(
                function()
                    if not g then
                        return
                    end
                    if not g["Targeting_Enabled"] then
                        return
                    end
                    if g["Targeting_Mode"] ~= "Nuker" then
                        return
                    end
                    local ef = e4:GetMouseLocation()
                    local ct, cu
                    cu = math.huge
                    for bc, bp in ipairs(w:GetPlayers()) do
                        if bp ~= LocalPlayer then
                            local a3 = bp.Character
                            local bg = ed(a3)
                            if bg then
                                local eg, e7 = e5:WorldToViewportPoint(bg.Position)
                                if e7 then
                                    local br = (ef - Vector2.new(eg.X, eg.Y)).Magnitude
                                    if br < cu then
                                        cu = br
                                        ct = bp
                                    end
                                end
                            end
                        end
                    end
                    targeting_state.current = ct
                    if ct then
                        if g and g["target_highlight"] then
                            local a3 = ct.Character
                            if a3 and bZ.last_char ~= a3 then
                                ce(a3)
                            end
                        end
                    else
                        if bZ and bZ.hl then
                            c7()
                        end
                    end
                end
            )
            table.insert(a.connections, ee)
        end
    end
    do
        local eh = t:column()
        local ei, ej, ek = eh:multi_section({names = {"Aimbot", "Prediction", "Resolver"}})
        local el, em = eh:multi_section({names = {"Tweaks", "OnDamage"}})
        do
            local ec = game:GetService("RunService")
            local w = game:GetService("Players")
            local LocalPlayer = w.LocalPlayer
            local en, eo = 0, 0.2
            local ep
            local function eq()
                if ep then
                    ep:Disconnect()
                    ep = nil
                end
            end
            local function er()
                if ep then
                    return
                end
                ep =
                    ec.RenderStepped:Connect(
                    function()
                        if not (g and g["aimbot_enabled"]) then
                            return
                        end
                        local bU = targeting_state and targeting_state.current
                        if not (bU and bU.Character) then
                            return
                        end
                        local bd = bU.Character:FindFirstChild("HumanoidRootPart")
                        if not bd then
                            return
                        end
                        local es = LocalPlayer.Character
                        if not es then
                            return
                        end
                        local dd = es:FindFirstChild("Head") or es:FindFirstChild("HumanoidRootPart")
                        if not dd then
                            return
                        end
                        local co = dd.Position
                        local et = bd.Position - co
                        if et.Magnitude <= 0 then
                            return
                        end
                        local eu = RaycastParams.new()
                        eu.FilterType = Enum.RaycastFilterType.Blacklist
                        eu.FilterDescendantsInstances = {es, bU.Character}
                        local ev = workspace:Raycast(co, et, eu)
                        if ev then
                            return
                        end
                        local ew = bd.AssemblyLinearVelocity or bd.Velocity or Vector3.zero
                        if ew.Y <= 15 then
                            return
                        end
                        local I = tick()
                        if I - en < eo then
                            return
                        end
                        en = I
                        local ex = es:FindFirstChildOfClass("Tool")
                        if ex then
                            pcall(
                                function()
                                    ex:Activate()
                                end
                            )
                        end
                    end
                )
                table.insert(a.connections, ep)
            end
            el:toggle(
                {name = "AutoAir", flag = "autoair_enabled", default = false, callback = function(bj)
                        if bj then
                            er()
                        else
                            eq()
                        end
                    end}
            )
        end
        do
            local ec = game:GetService("RunService")
            local w = game:GetService("Players")
            local ey = game:GetService("ReplicatedStorage")
            local LocalPlayer = w.LocalPlayer
            local ez, eo = 0, 1
            local eA
            local function eB()
                if eA then
                    eA:Disconnect()
                    eA = nil
                end
            end
            local function eC()
                if eA then
                    return
                end
                eA =
                    ec.Heartbeat:Connect(
                    function()
                        local a3 = LocalPlayer and LocalPlayer.Character
                        if not a3 then
                            return
                        end
                        local ex = a3:FindFirstChildOfClass("Tool")
                        if not ex then
                            return
                        end
                        local eD = ex:FindFirstChild("Ammo")
                        if not eD then
                            return
                        end
                        local cL = tonumber(eD.Value)
                        if not cL then
                            return
                        end
                        if cL > 0 then
                            return
                        end
                        local I = tick()
                        if I - ez < eo then
                            return
                        end
                        ez = I
                        pcall(
                            function()
                                ey.MainEvent:FireServer("Reload", ex)
                            end
                        )
                    end
                )
                table.insert(a.connections, eA)
            end
            el:toggle(
                {name = "AutoReload", flag = "autoreload_enabled", default = false, callback = function(bj)
                        if bj then
                            eC()
                        else
                            eB()
                        end
                    end}
            )
        end
        do
            local eE
            local function eF()
                if eE then
                    eE:Disconnect()
                    eE = nil
                end
            end
            local function eG()
                if eE then
                    return
                end
                eE =
                    B.run.RenderStepped:Connect(
                    function()
                        local bU = targeting_state and targeting_state.current
                        if not (bU and C:ValidateClient(bU)) then
                            return
                        end
                        local eH = i and i.Character
                        if not eH then
                            return
                        end
                        local eI = eH:FindFirstChild("HumanoidRootPart")
                        if not eI then
                            return
                        end
                        local bg = C:GetPreferredPart(bU.Character)
                        if not bg then
                            return
                        end
                        local eJ = eI.Position
                        local cp = bg.Position - eJ
                        cp = B.v3.new(cp.X, 0, cp.Z)
                        local eK = cp.Magnitude
                        if eK < 1e-6 then
                            return
                        end
                        local eL = cp.Unit
                        eI.CFrame = B.cf.new(eJ, eJ + eL)
                    end
                )
                table.insert(a.connections, eE)
            end
            el:toggle(
                {name = "LookAtTarget", flag = "lookat_enabled", default = false, callback = function(bj)
                        if bj then
                            eG()
                        else
                            eF()
                        end
                    end}
            )
        end
        do
            local eM = game:GetService("UserInputService")
            local ey = game:GetService("ReplicatedStorage")
            local ec = game:GetService("RunService")
            local w = game:GetService("Players")
            local LocalPlayer = w.LocalPlayer
            local eN, eO
            local en, eo = 0, 0.15
            local eP, eQ = 0, 1
            local function eR()
                local i = LocalPlayer
                if not i then
                    return
                end
                local eS, eT = 0, 60
                local ee
                ee =
                    ec.Heartbeat:Connect(
                    function()
                        eS = eS + 1
                        if not (g and g["forcereload_enabled"] and g["forcereload_autoequip"]) then
                            if ee then
                                ee:Disconnect()
                            end
                            return
                        end
                        local a3 = i.Character
                        if not a3 then
                            if eS >= eT and ee then
                                ee:Disconnect()
                            end
                            return
                        end
                        local aA = a3:FindFirstChildOfClass("Humanoid")
                        local eU = i:FindFirstChildOfClass("Backpack") or i:FindFirstChild("Backpack")
                        local function eV(eW)
                            if not eW then
                                return nil
                            end
                            local bP = eW:FindFirstChild("[Revolver]")
                            if bP and bP:IsA("Tool") and bP:FindFirstChild("Handle") then
                                return bP
                            end
                            return nil
                        end
                        local eX = eV(a3)
                        if eX then
                            if aA then
                                pcall(
                                    function()
                                        aA:EquipTool(eX)
                                    end
                                )
                            end
                            if ee then
                                ee:Disconnect()
                            end
                            return
                        end
                        local eY = eV(eU)
                        if eY then
                            pcall(
                                function()
                                    eY.Parent = a3
                                end
                            )
                            if aA then
                                pcall(
                                    function()
                                        aA:EquipTool(eY)
                                    end
                                )
                            end
                            if ee then
                                ee:Disconnect()
                            end
                            return
                        end
                        if eS >= eT then
                            if ee then
                                ee:Disconnect()
                            end
                            return
                        end
                    end
                )
                table.insert(a.connections, ee)
            end
            local function eZ()
                if eN then
                    eN:Disconnect()
                    eN = nil
                end
            end
            local function e_()
                if eN then
                    return
                end
                eN =
                    eM.InputBegan:Connect(
                    function(f0, f1)
                        if f1 then
                            return
                        end
                        if f0.UserInputType ~= Enum.UserInputType.Keyboard then
                            return
                        end
                        if f0.KeyCode ~= Enum.KeyCode.R then
                            return
                        end
                        if eM:GetFocusedTextBox() then
                            return
                        end
                        local I = tick()
                        if I - en < eo then
                            return
                        end
                        en = I
                        local f2 = {"ChangeLoadout", "[Knife]", "Slot3"}
                        pcall(
                            function()
                                ey:WaitForChild("MainEvent"):FireServer(unpack(f2))
                            end
                        )
                    end
                )
                table.insert(a.connections, eN)
            end
            local function f3()
                if eO then
                    eO:Disconnect()
                    eO = nil
                end
            end
            local function f4()
                if eO then
                    return
                end
                eO =
                    ec.Heartbeat:Connect(
                    function()
                        if not (g and g["forcereload_enabled"]) then
                            return
                        end
                        local a3 = LocalPlayer and LocalPlayer.Character
                        if not a3 then
                            return
                        end
                        local ex = a3:FindFirstChildOfClass("Tool")
                        if not ex then
                            return
                        end
                        local eD = ex:FindFirstChild("Ammo")
                        if not eD then
                            return
                        end
                        local cL = tonumber(eD.Value)
                        if not cL or cL > 0 then
                            return
                        end
                        local I = tick()
                        if I - eP < eQ then
                            return
                        end
                        eP = I
                        local f2 = {"ChangeLoadout", "[Knife]", "Slot3"}
                        pcall(
                            function()
                                ey:WaitForChild("MainEvent"):FireServer(unpack(f2))
                            end
                        )
                        if g and g["forcereload_autoequip"] then
                            eR()
                        end
                    end
                )
                table.insert(a.connections, eO)
            end
            local function f5()
                if forcere_autoequip_conn then
                    forcere_autoequip_conn:Disconnect()
                    forcere_autoequip_conn = nil
                end
            end
            local function f6()
                if forcere_autoequip_conn then
                    return
                end
                forcere_autoequip_conn =
                    ec.Heartbeat:Connect(
                    function()
                        if not (g and g["forcereload_enabled"] and g["forcereload_autoequip"]) then
                            return
                        end
                        local i = LocalPlayer
                        if not i then
                            return
                        end
                        local a3 = i.Character
                        if not a3 then
                            return
                        end
                        local aA = a3:FindFirstChildOfClass("Humanoid")
                        if not aA then
                            return
                        end
                        local I = os.clock()
                        if I - (last_equip_try or 0) < 0.2 then
                            return
                        end
                        last_equip_try = I
                        local f7 = a3:FindFirstChild("[Revolver]")
                        if f7 then
                            pcall(
                                function()
                                    aA:EquipTool(f7)
                                end
                            )
                        else
                            eR()
                        end
                    end
                )
                table.insert(a.connections, forcere_autoequip_conn)
            end
            local f8 =
                el:toggle(
                {name = "ForceReload", flag = "forcereload_enabled", default = false, callback = function(bj)
                        if bj then
                            e_()
                            if g and g["forcereload_auto"] then
                                f4()
                            end
                            if g and g["forcereload_autoequip"] then
                                f6()
                            end
                        else
                            eZ()
                            f3()
                            f5()
                            if g then
                                g["forcereload_auto"] = false
                                g["forcereload_autoequip"] = false
                            end
                        end
                    end}
            )
            local f9 = el:dependency_box()
            f9:setup_dependencies({{f8, true}})
            local fa =
                f9:toggle(
                {name = "Auto", flag = "forcereload_auto", default = false, callback = function(bj)
                        if bj then
                            if g and g["forcereload_enabled"] then
                                f4()
                            end
                        else
                            f3()
                        end
                    end}
            )
            local fb = el:dependency_box()
            fb:setup_dependencies({{f8, true}, {fa, true}})
            fb:toggle(
                {name = "AutoEquip", flag = "forcereload_autoequip", default = false, callback = function(bj)
                        if g and g["forcereload_enabled"] and bj then
                            f6()
                        else
                            f5()
                        end
                    end}
            )
        end
        do
            local ec = B.run
            local w = B.ps
            local LocalPlayer = w.LocalPlayer
            local ey = game:GetService("ReplicatedStorage")
            local fc
            local fd = 0
            local fe = 0.00000000001
            local function ff(az)
                local a3 = az and az.Character
                local fg = a3 and a3:FindFirstChild("BodyEffects")
                local fh = fg and fg:FindFirstChild("K.O")
                return fh and fh.Value and true or false
            end
            local function fi(az)
                local a3 = az and az.Character
                return a3 and a3:FindFirstChildOfClass("ForceField") and true or false
            end
            local function fj()
                local a3 = LocalPlayer and LocalPlayer.Character
                if not a3 then
                    return nil
                end
                for bc, fk in ipairs(a3:GetChildren()) do
                    if fk:IsA("Tool") then
                        return fk
                    end
                end
                return nil
            end
            local function fl(az)
                if not (az and az.Character) then
                    return
                end
                local I = os.clock()
                if I - (fd or 0) < fe then
                    return
                end
                local ex = fj()
                if not ex then
                    return
                end
                local eD = ex:FindFirstChild("Ammo")
                if eD and eD.Value and eD.Value <= 0 then
                    return
                end
                local cF = ex:FindFirstChild("Handle")
                if not cF then
                    return
                end
                local dd = az.Character:FindFirstChild("Head")
                if not dd then
                    return
                end
                local fm = dd.Position
                local fn = {fm, fm, fm, fm, fm}
                local fo = {
                    Vector3.new(0, 1, 0),
                    Vector3.new(0, 1, 0),
                    Vector3.new(0, 1, 0),
                    Vector3.new(0, 1, 0),
                    Vector3.new(0, 1, 0)
                }
                local fp = {dd, dd, dd, dd, dd}
                local f2 = {"ShootGun", cF, fm, fn, fp, fo, {}, os.clock(), math.huge, fn, 5, 0.2, fm}
                local fq = ey:FindFirstChild("ShootEvent")
                if fq then
                    fd = I
                    pcall(
                        function()
                            fq:FireServer(unpack(f2))
                        end
                    )
                end
            end
            local function fr()
                if fc then
                    fc:Disconnect()
                    fc = nil
                end
            end
            local function fs()
                if fc then
                    return
                end
                fc =
                    ec.Heartbeat:Connect(
                    function()
                        if not (g and g["magicbullets_enabled"]) then
                            return
                        end
                        local bU = targeting_state and targeting_state.current
                        if not bU then
                            return
                        end
                        local dR = g and g["magicbullets_checks"]
                        local ft, fu = false, false
                        if typeof(dR) == "table" then
                            for bc, cc in ipairs(dR) do
                                if cc == "KO" then
                                    ft = true
                                end
                                if cc == "FF" then
                                    fu = true
                                end
                            end
                        end
                        if ft and ff(bU) then
                            return
                        end
                        if fu and fi(bU) then
                            return
                        end
                        fl(bU)
                    end
                )
                table.insert(a.connections, fc)
            end
            local fv =
                el:toggle(
                {name = "MagicBullets", flag = "magicbullets_enabled", default = false, callback = function(bj)
                        if bj then
                            fs()
                        else
                            fr()
                        end
                    end}
            )
            local fw = el:dependency_box()
            fw:setup_dependencies({{fv, true}})
            fw:label({name = "Checks"})
            fw:dropdown(
                {
                    name = "Checks",
                    flag = "magicbullets_checks",
                    items = {"KO", "FF"},
                    default = {"KO", "FF"},
                    multi = true,
                    callback = function()
                    end
                }
            )
        end
        do
            local function fx()
                local dE = {}
                local cp = (a and a.directory or "Rebuild.gg") .. "/sounds"
                local dG, dH =
                    pcall(
                    function()
                        return listfiles and listfiles(cp) or {}
                    end
                )
                if dG and type(dH) == "table" then
                    for bc, dC in ipairs(dH) do
                        local bG = dC:match("[^/\\]+$")
                        if bG then
                            table.insert(dE, bG)
                        end
                    end
                end
                table.sort(dE)
                return #dE > 0 and dE or {"ding.ogg", "bell.wav", "hit.mp3"}
            end
            function play_hitsound(fy)
                local fz = game:GetService("SoundService")
                local fA = fz:FindFirstChild("RB_HitSound")
                if not fA then
                    fA = Instance.new("Sound")
                    fA.Name = "RB_HitSound"
                    fA.Looped = false
                    fA.Parent = fz
                end
                local fB = (a and a.directory or "Rebuild.gg") .. "/sounds/" .. tostring(fy or "")
                local fC
                if getcustomasset then
                    fC = getcustomasset(fB)
                elseif getsynasset then
                    fC = getsynasset(fB)
                end
                if fC then
                    fA.SoundId = fC
                    fA.Volume = tonumber(g["hs_volume"]) or 0.5
                    local fD = tonumber(g["hs_pitch"]) or 1
                    fA.PlaybackSpeed = fD
                    pcall(
                        function()
                            fA:Play()
                        end
                    )
                end
            end
            local fE = em:toggle({name = "Sounds", flag = "hitsound_enabled", default = false})
            local fF = em:dependency_box()
            fF:setup_dependencies({{fE, true}})
            local fG = fF:dropdown({name = "Sound", flag = "hs_file", items = fx()})
            fF:slider({name = "Vol", flag = "hs_volume", min = 0, max = 10, default = 0.5, interval = 0.05})
            fF:slider({name = "Pitch", flag = "hs_pitch", min = 0.5, max = 2, default = 1, interval = 0.05})
            fF:toggle({name = "MuteOriginalSound", flag = "hs_mute_original", default = false})
            local fH = {Sound = {}}
            fH.Sound.TargetIds =
                fH.Sound.TargetIds or
                {"rbxassetid://6773912589", "6773912589", "http://www.roblox.com/asset/?id=6773912589"}
            function fH.Sound.MuteTargetSound(fA)
                if not fA or not fA:IsA("Sound") then
                    return false
                end
                local fI = tostring(fA.SoundId or ""):lower()
                for bc, fJ in pairs(fH.Sound.TargetIds) do
                    if fI:find(tostring(fJ):lower(), 1, true) then
                        if g and g["hs_mute_original"] then
                            pcall(
                                function()
                                    fA:Stop()
                                    fA.Volume = 0
                                    fA.Playing = false
                                end
                            )
                            if not fH.Sound._guarded then
                                fH.Sound._guarded = {}
                            end
                            if not fH.Sound._guarded[fA] then
                                fH.Sound._guarded[fA] =
                                    fA:GetPropertyChangedSignal("Playing"):Connect(
                                    function()
                                        if g and g["hs_mute_original"] and fA.Playing then
                                            pcall(
                                                function()
                                                    fA:Stop()
                                                    fA.Volume = 0
                                                end
                                            )
                                        end
                                    end
                                )
                            end
                            return true
                        end
                    end
                end
                return false
            end
            function fH.Sound.MuteExistingSounds()
                for bc, ci in ipairs(game:GetDescendants()) do
                    if ci:IsA("Sound") then
                        fH.Sound.MuteTargetSound(ci)
                    end
                end
            end
            task.defer(
                function()
                    fH.Sound.MuteExistingSounds()
                end
            )
            if not fH.Sound._conn then
                fH.Sound._conn =
                    game.DescendantAdded:Connect(
                    function(ci)
                        if ci:IsA("Sound") then
                            fH.Sound.MuteTargetSound(ci)
                        end
                    end
                )
            end
        end
        do
            local fK = em:toggle({name = "Notifications", flag = "notif_enabled", default = false})
            local fL = em:dependency_box()
            fL:setup_dependencies({{fK, true}})
            fL:slider({name = "Duration", flag = "notif_duration", min = 0.5, max = 3, default = 1.5, interval = 0.1})
        end
        C:OnHit(
            function(aD)
                if g and g["hitsound_enabled"] then
                    local fy = g["hs_file"]
                    if fy and fy ~= "" then
                        play_hitsound(fy)
                    end
                end
                if g and g["hitchams_enabled"] and aD and aD.player then
                    HitChams(aD.player)
                end
                local cZ = g or a and a.flags or {}
                local bX = cZ["notif_enabled"] == true or cZ["notif_enabled"] == 1 or cZ["notif_enabled"] == "true"
                if not bX then
                    return
                end
                if aD and aD.player and aD.player.Character then
                    local a3 = aD.player.Character
                    local fM = a3:FindFirstChildOfClass("Humanoid")
                    if fM then
                        aD.health = fM.Health
                        aD.remaining_health = fM.Health
                    end
                end
                local bG = "Player"
                if aD then
                    if aD.player then
                        if typeof(aD.player) == "Instance" then
                            bG = aD.player.Name or "Player"
                        else
                            bG = tostring(aD.player)
                        end
                    elseif aD.name then
                        bG = tostring(aD.name)
                    end
                end
                local bH = 0
                if aD and aD.health then
                    local fN = tonumber(aD.health)
                    bH = fN and math.floor(fN) or 0
                end
                local fO = tostring(bG) .. " " .. tostring(bH)
                local fP = tonumber(cZ and cZ["notif_duration"] or g and g["notif_duration"]) or 1.5
                if fP <= 0 or fP > 10 or fP ~= fP then
                    fP = 1.5
                end
                if a and a.notification then
                    a:notification({text = fO, time = fP})
                end
            end
        )
        local HitChams
        do
            HitChams = function(fQ)
                if not g["hitchams_enabled"] then
                    return
                end
                if fQ and fQ.Character and fQ.Character:FindFirstChild("HumanoidRootPart") then
                    fQ.Character.Archivable = true
                    local fR = fQ.Character:Clone()
                    fR.Name = "Player Clone"
                    local fS = {
                        "Head",
                        "UpperTorso",
                        "LowerTorso",
                        "LeftUpperArm",
                        "LeftLowerArm",
                        "LeftHand",
                        "RightUpperArm",
                        "RightLowerArm",
                        "RightHand",
                        "LeftUpperLeg",
                        "LeftLowerLeg",
                        "LeftFoot",
                        "RightUpperLeg",
                        "RightLowerLeg",
                        "RightFoot"
                    }
                    for bc, fT in ipairs(fR:GetChildren()) do
                        if fT:IsA("BasePart") then
                            local fU = false
                            for bc, fV in ipairs(fS) do
                                if fT.Name == fV then
                                    fU = true
                                    break
                                end
                            end
                            if not fU then
                                fT:Destroy()
                            end
                        elseif
                            fT:IsA("Accessory") or fT:IsA("Tool") or fT.Name == "face" or fT:IsA("Shirt") or
                                fT:IsA("Pants") or
                                fT:IsA("Hat")
                         then
                            fT:Destroy()
                        end
                    end
                    if fR:FindFirstChild("Humanoid") then
                        fR.Humanoid:Destroy()
                    end
                    local fW = a and a.flags or {}
                    local fX = fW["hitchams_color"] or fW["hitcham_color"] or nil
                    local fY = fX and (fX.Color or fX) or nil
                    for bc, fZ in ipairs(fR:GetChildren()) do
                        if fZ:IsA("BasePart") then
                            fZ.CanCollide = false
                            fZ.Anchored = true
                            fZ.Transparency = g["hitchams_transparency"] or 0.5
                            if fY then
                                fZ.Color = fY
                            end
                            fZ.Material = g["hitchams_material"] or Enum.Material.Neon
                        end
                    end
                    if fR:FindFirstChild("Head") then
                        local f_ = fR.Head
                        f_.Transparency = g["hitchams_transparency"] or 0.5
                        if fY then
                            f_.Color = fY
                        end
                        f_.Material = g["hitchams_material"] or Enum.Material.Neon
                        if f_:FindFirstChild("face") then
                            f_.face:Destroy()
                        end
                    end
                    fR.Parent = game.Workspace
                    local g0 =
                        TweenInfo.new(
                        g["hitchams_duration"] or 2,
                        Enum.EasingStyle.Sine,
                        Enum.EasingDirection.InOut,
                        0,
                        true
                    )
                    for bc, fZ in ipairs(fR:GetChildren()) do
                        if fZ:IsA("BasePart") then
                            local g1 = game:GetService("TweenService"):Create(fZ, g0, {Transparency = 1})
                            g1:Play()
                        end
                    end
                    task.delay(
                        g["hitchams_duration"] or 2,
                        function()
                            if fR and fR.Parent then
                                fR:Destroy()
                            end
                        end
                    )
                end
            end
            local g2 = em:toggle({name = "Chams", flag = "hitchams_enabled", default = false})
            g2:colorpicker({name = "Color", flag = "hitchams_color", default = Color3.fromRGB(255, 0, 0)})
            local g3 = em:dependency_box()
            g3:setup_dependencies({{g2, true}})
            g3:dropdown(
                {
                    name = "Material",
                    flag = "hitchams_material",
                    items = {"Neon", "ForceField", "Glass", "Plastic", "Metal", "Concrete"},
                    default = "Neon"
                }
            )
            g3:slider({name = "Duration", flag = "hitchams_duration", min = 0.5, max = 5, default = 2, interval = 0.1})
            g3:slider({name = "Trs", flag = "hitchams_transparency", min = 0, max = 1, default = 0.5, interval = 0.05})
        end
        do
            local g4 = {}
            local R = nil
            local function g5()
                if not R or not R.Parent then
                    R = workspace:FindFirstChild("RebuildHitEffects") or Instance.new("Folder")
                    R.Name = "RebuildHitEffects"
                    R.Parent = workspace
                end
                return R
            end
            local function g6()
                local g7 = Instance.new("Attachment")
                local g8 = Instance.new("ParticleEmitter")
                g8.Name = "Foam"
                g8.LightInfluence = 0.5
                g8.Lifetime = NumberRange.new(1, 1)
                g8.SpreadAngle = Vector2.new(360, -360)
                g8.VelocitySpread = 360
                g8.Speed = NumberRange.new(20, 20)
                g8.Brightness = 2.5
                g8.Size =
                    NumberSequence.new(
                    {
                        NumberSequenceKeypoint.new(0, 0),
                        NumberSequenceKeypoint.new(0.1, 0.65),
                        NumberSequenceKeypoint.new(0.65, 1.42),
                        NumberSequenceKeypoint.new(1, 0)
                    }
                )
                g8.Enabled = false
                g8.Acceleration = Vector3.new(0, -66, 0)
                g8.Rate = 100
                g8.Texture = "rbxassetid://8297030850"
                g8.Rotation = NumberRange.new(-90, -90)
                g8.Orientation = Enum.ParticleOrientation.VelocityParallel
                g8.Color = ColorSequence.new(Color3.fromRGB(255, 255, 255))
                g8.Parent = g7
                g4["Cum"] = g7
                local g9 = Instance.new("Attachment")
                local ga = Instance.new("ParticleEmitter")
                ga.Name = "Dots 1"
                ga.LightEmission = 1
                ga.Color = ColorSequence.new(Color3.fromRGB(255, 255, 255))
                ga.LockedToPart = false
                ga.ZOffset = 10
                ga.Texture = "rbxassetid://7216849075"
                ga.VelocitySpread = 360
                ga.Transparency =
                    NumberSequence.new({NumberSequenceKeypoint.new(0, 0), NumberSequenceKeypoint.new(1, 0.663)})
                ga.Lifetime = NumberRange.new(1, 5)
                ga.Speed = NumberRange.new(1, 210)
                ga.SpreadAngle = Vector2.new(360, -360)
                ga.Rate = 60
                ga.Size =
                    NumberSequence.new(
                    {
                        NumberSequenceKeypoint.new(0, 0.1),
                        NumberSequenceKeypoint.new(0.428, 0),
                        NumberSequenceKeypoint.new(1, 0.627)
                    }
                )
                ga.Enabled = false
                ga.Parent = g9
                local gb = Instance.new("ParticleEmitter")
                gb.Name = "Dots 2"
                gb.LightEmission = 1
                gb.Color = ColorSequence.new(Color3.fromRGB(255, 255, 255))
                gb.LockedToPart = false
                gb.ZOffset = 10
                gb.Texture = "rbxassetid://7216849075"
                gb.VelocitySpread = 360
                gb.Transparency =
                    NumberSequence.new({NumberSequenceKeypoint.new(0, 0), NumberSequenceKeypoint.new(1, 0.663)})
                gb.Lifetime = NumberRange.new(1, 5)
                gb.Speed = NumberRange.new(1, 210)
                gb.SpreadAngle = Vector2.new(360, -360)
                gb.Rate = 100
                gb.Size =
                    NumberSequence.new(
                    {
                        NumberSequenceKeypoint.new(0, 0.1),
                        NumberSequenceKeypoint.new(0.502, 1.438),
                        NumberSequenceKeypoint.new(0.925, 1.125),
                        NumberSequenceKeypoint.new(1, 0.397)
                    }
                )
                gb.Enabled = false
                gb.Orientation = Enum.ParticleOrientation.FacingCamera
                gb.Parent = g9
                g4["Particle"] = g9
                local gc = Instance.new("Attachment")
                local gd = Instance.new("ParticleEmitter")
                gd.Name = "Break2"
                gd.RotSpeed = NumberRange.new(1000)
                gd.VelocitySpread = -360
                gd.Color = ColorSequence.new(Color3.fromRGB(255, 255, 255))
                gd.Rate = 1
                gd.Texture = "rbxassetid://11973936966"
                gd.Rotation = NumberRange.new(-360, 360)
                gd.Transparency =
                    NumberSequence.new(
                    {
                        NumberSequenceKeypoint.new(0, 1, 0),
                        NumberSequenceKeypoint.new(0.10972569137811661, 0.27699530124664307, 0),
                        NumberSequenceKeypoint.new(0.5, 0, 0),
                        NumberSequenceKeypoint.new(1, 1, 0)
                    }
                )
                gd.Lifetime = NumberRange.new(0.5)
                gd.Speed = NumberRange.new(0.01)
                gd.LightEmission = 0.5
                gd.SpreadAngle = Vector2.new(-360, 360)
                gd.Size = NumberSequence.new({NumberSequenceKeypoint.new(0, 6, 0), NumberSequenceKeypoint.new(1, 6, 0)})
                gd.Enabled = false
                gd.Parent = gc
                local ge = Instance.new("ParticleEmitter")
                ge.Name = "Break3"
                ge.RotSpeed = NumberRange.new(-150, 150)
                ge.Color = ColorSequence.new(Color3.fromRGB(255, 255, 255))
                ge.ZOffset = 4
                ge.Rotation = NumberRange.new(-360, 360)
                ge.Texture = "rbxassetid://5726444189"
                ge.Lifetime = NumberRange.new(0.5)
                ge.Speed = NumberRange.new(0.01)
                ge.LightEmission = 1
                ge.Rate = 1
                ge.Size = NumberSequence.new({NumberSequenceKeypoint.new(0, 7, 0), NumberSequenceKeypoint.new(1, 7, 0)})
                ge.Enabled = false
                ge.Parent = gc
                local gf = Instance.new("ParticleEmitter")
                gf.Name = "Break1"
                gf.VelocitySpread = -360
                gf.Texture = "rbxassetid://12239789629"
                gf.Color = ColorSequence.new(Color3.fromRGB(255, 255, 255))
                gf.LockedToPart = true
                gf.ZOffset = 3
                gf.LightEmission = 0.5
                gf.Rotation = NumberRange.new(-360, 360)
                gf.Transparency =
                    NumberSequence.new(
                    {
                        NumberSequenceKeypoint.new(0, 1, 0),
                        NumberSequenceKeypoint.new(0.5, 0, 0),
                        NumberSequenceKeypoint.new(1, 1, 0)
                    }
                )
                gf.Lifetime = NumberRange.new(0.5)
                gf.Speed = NumberRange.new(0.01)
                gf.SpreadAngle = Vector2.new(-360, 360)
                gf.Rate = 1
                gf.Size =
                    NumberSequence.new({NumberSequenceKeypoint.new(0, 10, 0), NumberSequenceKeypoint.new(1, 10, 0)})
                gf.Enabled = false
                gf.Parent = gc
                g4["Break"] = gc
            end
            local function gg(cc)
                if typeof(cc) == "Color3" then
                    return cc
                end
                if typeof(cc) == "table" then
                    local gh = cc.Color or cc.color or cc.Value or cc.value
                    if gh and typeof(gh) == "Color3" then
                        return gh
                    end
                    local gi, gj, cO = cc.r or cc.R or cc[1], cc.g or cc.G or cc[2], cc.b or cc.B or cc[3]
                    if gi and gj and cO then
                        if gi <= 1 and gj <= 1 and cO <= 1 then
                            return Color3.new(gi, gj, cO)
                        else
                            return Color3.fromRGB(gi, gj, cO)
                        end
                    end
                end
                if typeof(cc) == "string" then
                    local c = cc:match("#?([%da-fA-F]+)")
                    if c and #c == 6 then
                        local gi = tonumber(c:sub(1, 2), 16)
                        local gj = tonumber(c:sub(3, 4), 16)
                        local cO = tonumber(c:sub(5, 6), 16)
                        if gi and gj and cO then
                            return Color3.fromRGB(gi, gj, cO)
                        end
                    end
                end
                return Color3.fromRGB(255, 0, 0)
            end
            function HitEffect(bU, gk)
                if not bU or not bU.Character then
                    return
                end
                local bd = bU.Character:FindFirstChild("HumanoidRootPart")
                if not bd then
                    return
                end
                if not next(g4) then
                    g6()
                end
                local gl = g4[gk]
                if not gl then
                    return
                end
                local gm = gl:Clone()
                local fW = a and a.flags or {}
                local cJ = gg(fW["hiteffects_color"] or fW["hiteffect_color"] or Color3.fromRGB(255, 255, 255))
                for bc, ci in pairs(gm:GetDescendants()) do
                    if ci:IsA("ParticleEmitter") then
                        ci.Color = ColorSequence.new(cJ)
                    elseif ci:IsA("Trail") then
                        ci.Color = ColorSequence.new(cJ)
                    elseif ci:IsA("Beam") then
                        ci.Color = ColorSequence.new(cJ)
                    end
                end
                gm.Parent = bd
                for bc, ci in pairs(gm:GetDescendants()) do
                    if ci:IsA("ParticleEmitter") then
                        ci:Emit(ci.Rate or 100)
                    end
                end
                task.delay(
                    2,
                    function()
                        if gm and gm.Parent then
                            gm:Destroy()
                        end
                    end
                )
            end
            _G.HitEffect = HitEffect
            local gn = em:toggle({name = "Effects", flag = "hiteffect_enabled", default = false})
            gn:colorpicker({name = "Color", flag = "hiteffects_color", default = Color3.fromRGB(255, 255, 255)})
            local go = em:dependency_box()
            go:setup_dependencies({{gn, true}})
            go:dropdown({name = "Type", flag = "hiteffect_type", items = {"Cum", "Particle", "Break"}, default = "Cum"})
        end
        do
            local gp = nil
            local gq = nil
            local gr = 0
            local gs = 0.1
            local gt = 0.5
            local function gu()
                local bU = targeting_state and targeting_state.current
                if not bU or not bU.Character then
                    gp = nil
                    gq = nil
                    return
                end
                local fM = bU.Character:FindFirstChildOfClass("Humanoid")
                if not fM then
                    gp = nil
                    return
                end
                if gq ~= bU then
                    gp = fM.Health
                    gq = bU
                    gr = 0
                    return
                end
                local gv = fM.Health
                local gw = tick()
                if gp and gv < gp then
                    local gx = gp - gv
                    if gx >= gt and gw - gr >= gs then
                        gr = gw
                        if g and g["hitchams_enabled"] then
                            HitChams(bU)
                        end
                        if g and g["hiteffect_enabled"] then
                            local gk = g["hiteffect_type"] or "Cum"
                            if _G.HitEffect then
                                _G.HitEffect(bU, gk)
                            end
                        end
                        if g and g["hitsound_enabled"] then
                            local fy = g["hs_file"]
                            if fy and fy ~= "" then
                                play_hitsound(fy)
                            end
                        end
                        local bX = g and g["notif_enabled"]
                        if bX then
                            local bG = bU.Name or "Player"
                            local bH = math.floor(math.max(gv, 0))
                            local fO = tostring(bG) .. " " .. tostring(bH)
                            local fP = tonumber(g["notif_duration"]) or 1.5
                            if fP <= 0 or fP > 10 or fP ~= fP then
                                fP = 1.5
                            end
                            if a and a.notification then
                                a:notification({text = fO, time = fP})
                            end
                        end
                    end
                end
                gp = gv
            end
            B.run.Stepped:Connect(
                function()
                    gu()
                end
            )
        end
        local gy = ei:toggle({name = "Enabled", flag = "aimbot_enabled", default = false})
        local gz = ei:dependency_box()
        gz:setup_dependencies({{gy, true}})
        gz:dropdown(
            {
                name = "Part",
                flag = "aimbot_part",
                items = {
                    "HumanoidRootPart",
                    "Head",
                    "UpperTorso",
                    "LowerTorso",
                    "LeftUpperArm",
                    "LeftLowerArm",
                    "LeftHand",
                    "RightUpperArm",
                    "RightLowerArm",
                    "RightHand",
                    "LeftUpperLeg",
                    "LeftLowerLeg",
                    "LeftFoot",
                    "RightUpperLeg",
                    "RightLowerLeg",
                    "RightFoot"
                },
                default = "HumanoidRootPart"
            }
        )
        local gA = ej:toggle({name = "Enabled", flag = "pred_enabled", default = false})
        local gB = ej:dependency_box()
        gB:setup_dependencies({{gA, true}})
        local gC =
            gB:dropdown({name = "Prediction Mode", flag = "pred_mode", items = {"Sets", "Auto"}, default = "Auto"})
        local gD = ej:dependency_box()
        gD:setup_dependencies({{gA, true}, {gC, "Sets"}})
        gD:label({name = "PredictionX"})
        gD:textbox({flag = "pred_x", default = "0"})
        gD:label({name = "PredictionY"})
        gD:textbox({flag = "pred_y", default = "0"})
        gD:label({name = "PredictionZ"})
        gD:textbox({flag = "pred_z", default = "0"})
        ej:toggle({name = "ShowPrediction", flag = "show_prediction", default = false}):colorpicker(
            {name = "Color", flag = "prediction_color", default = c("#ffffff")}
        )
        local gE = ek:toggle({name = "Enabled", flag = "resolver_enabled", default = false})
        local gF = ek:dependency_box()
        gF:setup_dependencies({{gE, true}})
        gF:dropdown(
            {
                name = "Resolver Mode",
                flag = "resolver_mode",
                items = {"Velocity", "Recalculate", "MoveDirection", "LookVector", "CalculateCFrame"},
                default = "Velocity"
            }
        )
    end
    do
        local gG = {"HumanoidRootPart", "Head", "UpperTorso", "Torso"}
        local gH = {
            {20, 0.08960952},
            {21, 0.091171428},
            {22, 0.092733336},
            {23, 0.094295244},
            {24, 0.095857152},
            {25, 0.09741906},
            {26, 0.098980968},
            {27, 0.100542876},
            {28, 0.102104784},
            {29, 0.103666692},
            {30, 0.11252476},
            {31, 0.112978758},
            {32, 0.113432756},
            {33, 0.113886754},
            {34, 0.114340752},
            {35, 0.11479475},
            {36, 0.115248748},
            {37, 0.115702746},
            {38, 0.116156744},
            {39, 0.116610742},
            {40, 0.11706474},
            {41, 0.117518738},
            {42, 0.117972736},
            {43, 0.118426734},
            {44, 0.118880732},
            {45, 0.11933473},
            {46, 0.119788728},
            {47, 0.120242726},
            {48, 0.120696724},
            {49, 0.121150722},
            {50, 0.13544},
            {51, 0.1348236},
            {52, 0.1342072},
            {53, 0.1335908},
            {54, 0.1329744},
            {55, 0.132358},
            {56, 0.1317416},
            {57, 0.1311252},
            {58, 0.1305088},
            {59, 0.1298924},
            {60, 0.129276},
            {61, 0.1286596},
            {62, 0.1280432},
            {63, 0.1274268},
            {64, 0.1268104},
            {65, 0.1264236},
            {66, 0.1262627},
            {67, 0.1261018},
            {68, 0.1259409},
            {69, 0.12578},
            {70, 0.12533},
            {71, 0.125474},
            {72, 0.125618},
            {73, 0.125762},
            {74, 0.125906},
            {75, 0.12605},
            {76, 0.126194},
            {77, 0.126338},
            {78, 0.126482},
            {79, 0.126626},
            {80, 0.13934},
            {81, 0.1395937},
            {82, 0.1398474},
            {83, 0.1401011},
            {84, 0.1403548},
            {85, 0.1406085},
            {86, 0.1408622},
            {87, 0.1411159},
            {88, 0.1413696},
            {89, 0.1416233},
            {90, 0.141877},
            {91, 0.1421307},
            {92, 0.1423844},
            {93, 0.1426381},
            {94, 0.1428918},
            {95, 0.1431455},
            {96, 0.1433992},
            {97, 0.1436529},
            {98, 0.1439066},
            {99, 0.1441603},
            {100, 0.141987},
            {101, 0.1423107},
            {102, 0.1426344},
            {103, 0.1429581},
            {104, 0.1432818},
            {105, 0.1436055},
            {106, 0.1439292},
            {107, 0.1442529},
            {108, 0.1445766},
            {109, 0.1449003},
            {110, 0.144634},
            {111, 0.1449577},
            {112, 0.1452814},
            {113, 0.1456051},
            {114, 0.1459288},
            {115, 0.1462525},
            {116, 0.1465762},
            {117, 0.1468999},
            {118, 0.1472236},
            {119, 0.1475473},
            {120, 0.147281},
            {121, 0.1476047},
            {122, 0.1479284},
            {123, 0.1482521},
            {124, 0.1485758},
            {125, 0.1488995},
            {126, 0.1492232},
            {127, 0.1495469},
            {128, 0.1498706},
            {129, 0.1501943},
            {130, 0.149928},
            {131, 0.1502517},
            {132, 0.1505754},
            {133, 0.1508991},
            {134, 0.1512228},
            {135, 0.1515465},
            {136, 0.1518702},
            {137, 0.1521939},
            {138, 0.1525176},
            {139, 0.1528413},
            {140, 0.152575},
            {141, 0.1528987},
            {142, 0.1532224},
            {143, 0.1535461},
            {144, 0.1538698},
            {145, 0.1541935},
            {146, 0.1545172},
            {147, 0.1548409},
            {148, 0.1551646},
            {149, 0.1554883},
            {150, 0.155222},
            {151, 0.1555457},
            {152, 0.1558694},
            {153, 0.1561931},
            {154, 0.1565168},
            {155, 0.1568405},
            {156, 0.1571642},
            {157, 0.1574879},
            {158, 0.1578116},
            {159, 0.1581353},
            {160, 0.157869},
            {161, 0.1581927},
            {162, 0.1585164},
            {163, 0.1588401},
            {164, 0.1591638},
            {165, 0.1594875},
            {166, 0.1598112},
            {167, 0.1601349},
            {168, 0.1604586},
            {169, 0.1607823},
            {170, 0.160516},
            {171, 0.1608397},
            {172, 0.1611634},
            {173, 0.1614871},
            {174, 0.1618108},
            {175, 0.1621345},
            {176, 0.1624582},
            {177, 0.1627819},
            {178, 0.1631056},
            {179, 0.1634293},
            {180, 0.163163},
            {181, 0.1634867},
            {182, 0.1638104},
            {183, 0.1641341},
            {184, 0.1644578},
            {185, 0.1647815},
            {186, 0.1651052},
            {187, 0.1654289},
            {188, 0.1657526},
            {189, 0.1660763},
            {190, 0.16581},
            {191, 0.1661337},
            {192, 0.1664574},
            {193, 0.1667811},
            {194, 0.1671048},
            {195, 0.1674285},
            {196, 0.1677522},
            {197, 0.1680759},
            {198, 0.1683996},
            {199, 0.1687233},
            {200, 0.168457},
            {201, 0.1687807},
            {202, 0.1691044},
            {203, 0.1694281},
            {204, 0.1697518},
            {205, 0.1700755},
            {206, 0.1703992},
            {207, 0.1707229},
            {208, 0.1710466},
            {209, 0.1713703},
            {210, 0.171104},
            {211, 0.1714277},
            {212, 0.1717514},
            {213, 0.1720751},
            {214, 0.1723988},
            {215, 0.1727225},
            {216, 0.1730462},
            {217, 0.1733699},
            {218, 0.1736936},
            {219, 0.1740173},
            {220, 0.173751},
            {221, 0.1740747},
            {222, 0.1743984},
            {223, 0.1747221},
            {224, 0.1750458},
            {225, 0.1753695},
            {226, 0.1756932},
            {227, 0.1760169},
            {228, 0.1763406},
            {229, 0.1766643},
            {230, 0.176398},
            {231, 0.1767217},
            {232, 0.1770454},
            {233, 0.1773691},
            {234, 0.1776928},
            {235, 0.1780165},
            {236, 0.1783402},
            {237, 0.1786639},
            {238, 0.1789876},
            {239, 0.1793113},
            {240, 0.179045},
            {241, 0.1793687},
            {242, 0.1796924},
            {243, 0.1800161},
            {244, 0.1803398},
            {245, 0.1806635},
            {246, 0.1809872},
            {247, 0.1813109},
            {248, 0.1816346},
            {249, 0.1819583},
            {250, 0.181692},
            {251, 0.1820157},
            {252, 0.1823394},
            {253, 0.1826631},
            {254, 0.1829868},
            {255, 0.1833105},
            {256, 0.1836342},
            {257, 0.1839579},
            {258, 0.1842816},
            {259, 0.1846053},
            {260, 0.184339},
            {261, 0.1846627},
            {262, 0.1849864},
            {263, 0.1853101},
            {264, 0.1856338},
            {265, 0.1859575},
            {266, 0.1862812},
            {267, 0.1866049},
            {268, 0.1869286},
            {269, 0.1872523},
            {270, 0.186986},
            {271, 0.1873097},
            {272, 0.1876334},
            {273, 0.1879571},
            {274, 0.1882808},
            {275, 0.1886045},
            {276, 0.1889282},
            {277, 0.1892519},
            {278, 0.1895756},
            {279, 0.1898993},
            {280, 0.189633},
            {281, 0.1899567},
            {282, 0.1902804},
            {283, 0.1906041},
            {284, 0.1909278},
            {285, 0.1912515},
            {286, 0.1915752},
            {287, 0.1918989},
            {288, 0.1922226},
            {289, 0.1925463},
            {290, 0.19228},
            {291, 0.1926037},
            {292, 0.1929274},
            {293, 0.1932511},
            {294, 0.1935748},
            {295, 0.1938985},
            {296, 0.1942222},
            {297, 0.1945459},
            {298, 0.1948696},
            {299, 0.1951933},
            {300, 0.194927}
        }
        local function gI()
            local gJ = game:GetService("Stats")
            local gK
            local dG, bc =
                pcall(
                function()
                    local gL = gJ.Network.ServerStatsItem["Data Ping"]:GetValueString()
                    gK = tonumber((gL or ""):match("%d+"))
                end
            )
            if not dG or not gK then
                return 0
            end
            local gM, gN
            for bc, d6 in ipairs(gH) do
                local gO = math.abs(gK - d6[1])
                if not gN or gO < gN then
                    gN = gO
                    gM = d6[2]
                end
            end
            return gM or 0
        end
        local function dQ(az)
            if not az or not az.Character then
                return nil
            end
            local a3 = az.Character
            local dR = g and g["aimbot_part"]
            if dR and a3:FindFirstChild(dR) then
                return a3[dR]
            end
            for bc, bG in ipairs(gG) do
                local b9 = a3:FindFirstChild(bG)
                if b9 then
                    return b9
                end
            end
            return nil
        end
        local gP = {lastPos = nil, lastTick = nil, lastPart = nil}
        local function gQ(bg)
            if not bg then
                return nil
            end
            local bh = bg.Position
            if g["pred_enabled"] then
                local ew
                local gR = g["resolver_enabled"]
                local gS = g["resolver_mode"]
                if gR and gS and gS ~= "Velocity" then
                    if gS == "Recalculate" or gS == "CalculateCFrame" then
                        if gP.lastPart ~= bg then
                            gP.lastPos, gP.lastTick, gP.lastPart = bg.Position, tick(), bg
                        end
                        local I = tick()
                        local dW = gP.lastTick and I - gP.lastTick or 0
                        if dW > 0 and gP.lastPos then
                            ew = (bg.Position - gP.lastPos) / dW
                        else
                            ew = bg.AssemblyLinearVelocity or bg.Velocity or Vector3.zero
                        end
                        gP.lastPos, gP.lastTick = bg.Position, I
                    elseif gS == "MoveDirection" then
                        local fM = bg.Parent and bg.Parent:FindFirstChildOfClass("Humanoid")
                        if fM then
                            ew = fM.MoveDirection * (fM.WalkSpeed or 16)
                        end
                    elseif gS == "LookVector" then
                        local fM = bg.Parent and bg.Parent:FindFirstChildOfClass("Humanoid")
                        local cV = fM and fM.WalkSpeed or 16
                        ew = bg.CFrame.LookVector * cV * 1.5
                    end
                end
                ew = ew or bg.AssemblyLinearVelocity or bg.Velocity or Vector3.zero
                local gT = g["pred_mode"]
                if gT == "Auto" then
                    local gL = gI()
                    bh = bh + ew * Vector3.new(gL, gL, gL)
                else
                    local gU = tonumber(g["pred_x"]) or 0
                    local gV = tonumber(g["pred_y"]) or 0
                    local gW = tonumber(g["pred_z"]) or 0
                    bh = bh + ew * Vector3.new(gU, gV, gW)
                end
            end
            return bh
        end
        local gX = getrawmetatable(game)
        local bR = gX.__index
        setreadonly(gX, false)
        gX.__index =
            newcclosure(
            function(self, bS)
                if
                    not checkcaller() and bS and (bS == "Hit" or bS == "Silent" or bS == "Target") and g and
                        g["aimbot_enabled"]
                 then
                    local az = targeting_state.current
                    local bg = dQ(az)
                    if bg then
                        local gY = gQ(bg) or bg.Position
                        if bS == "Hit" then
                            return CFrame.new(gY)
                        elseif bS == "Silent" or bS == "Target" then
                            return bg
                        end
                    end
                end
                return bR(self, bS)
            end
        )
        setreadonly(gX, true)
    end
    do
        local Drawing = Drawing
        local eM = game:GetService("UserInputService")
        local ec = game:GetService("RunService")
        local e5 = workspace.CurrentCamera
        do
            local gZ = getgenv().PredictionTracer
            if gZ and gZ.cleanup then
                pcall(gZ.cleanup)
            end
        end
        local g_ = {}
        getgenv().PredictionTracer = g_
        local h0 = Drawing.new("Line")
        h0.Visible = false
        h0.Thickness = 6
        h0.Transparency = 0.7
        h0.Color = Color3.fromRGB(0, 0, 0)
        g_.tracerOutline = h0
        local h1 = Drawing.new("Line")
        h1.Visible = false
        h1.Thickness = 1.5
        h1.Transparency = 1
        g_.tracer = h1
        local h2 = 4
        local h3 = Drawing.new("Circle")
        h3.Visible = false
        h3.Filled = false
        h3.Color = Color3.fromRGB(0, 0, 0)
        h3.Transparency = 0.8
        h3.Radius = 4
        g_.startOutline = h3
        local h4 = Drawing.new("Circle")
        h4.Visible = false
        h4.Filled = true
        h4.Color = Color3.fromRGB(255, 255, 255)
        h4.Transparency = 1
        h4.Radius = 2
        g_.startCircle = h4
        local h5 = Drawing.new("Circle")
        h5.Visible = false
        h5.Filled = false
        h5.Color = Color3.fromRGB(0, 0, 0)
        h5.Transparency = 0.8
        h5.Radius = 4
        g_.endOutline = h5
        local h6 = Drawing.new("Circle")
        h6.Visible = false
        h6.Filled = true
        h6.Color = Color3.fromRGB(255, 255, 255)
        h6.Transparency = 1
        h6.Radius = 2
        g_.endCircle = h6
        local gG = {"HumanoidRootPart", "Head", "UpperTorso", "Torso"}
        local gH = {
            {20, 0.08960952},
            {30, 0.11252476},
            {50, 0.13544},
            {65, 0.1264236},
            {70, 0.12533},
            {80, 0.13934},
            {100, 0.141987},
            {110, 0.144634},
            {120, 0.147281},
            {130, 0.149928},
            {140, 0.152575},
            {150, 0.155222},
            {160, 0.157869},
            {170, 0.160516},
            {180, 0.163163},
            {190, 0.16581},
            {200, 0.168457},
            {210, 0.171104},
            {220, 0.173751},
            {230, 0.176398},
            {240, 0.179045},
            {250, 0.181692},
            {260, 0.184339},
            {270, 0.186986},
            {280, 0.189633},
            {290, 0.19228},
            {300, 0.194927}
        }
        local h7 = {t = 0, val = 0}
        local function gI()
            local I = tick and tick() or os.clock()
            if I - (h7.t or 0) < 0.25 then
                return h7.val or 0
            end
            local gJ = game:GetService("Stats")
            local gK
            local dG, bc =
                pcall(
                function()
                    local gL = gJ.Network.ServerStatsItem["Data Ping"]:GetValueString()
                    gK = tonumber((gL or ""):match("%d+"))
                end
            )
            if not dG or not gK then
                return h7.val or 0
            end
            local gM, gN
            for bc, d6 in ipairs(gH) do
                local gO = math.abs(gK - d6[1])
                if not gN or gO < gN then
                    gN = gO
                    gM = d6[2]
                end
            end
            h7.t = I
            h7.val = gM or h7.val or 0
            return h7.val or 0
        end
        local function dQ(az)
            if not az or not az.Character then
                return nil
            end
            local a3 = az.Character
            local dR = g and g["aimbot_part"]
            if dR and a3:FindFirstChild(dR) then
                return a3[dR]
            end
            for bc, bG in ipairs(gG) do
                local b9 = a3:FindFirstChild(bG)
                if b9 then
                    return b9
                end
            end
            return nil
        end
        local function gQ(bg)
            if not bg then
                return nil
            end
            local bh = bg.Position
            if g["pred_enabled"] then
                local ew = bg.AssemblyLinearVelocity or bg.Velocity or Vector3.zero
                local gT = g["pred_mode"]
                if gT == "Auto" then
                    local gL = gI()
                    bh = bh + ew * Vector3.new(gL, gL, gL)
                else
                    local gU = tonumber(g["pred_x"]) or 0
                    local gV = tonumber(g["pred_y"]) or 0
                    local gW = tonumber(g["pred_z"]) or 0
                    bh = bh + ew * Vector3.new(gU, gV, gW)
                end
            end
            return bh
        end
        local ee =
            ec.Heartbeat:Connect(
            function()
                if g["show_prediction"] and targeting_state.current then
                    local bg = dQ(targeting_state.current)
                    if bg then
                        local gY = gQ(bg)
                        if gY then
                            local e6, e7 = e5:WorldToViewportPoint(gY)
                            if e7 then
                                local h8 = eM:GetMouseLocation()
                                h0.From = h8
                                h0.To = Vector2.new(e6.X, e6.Y)
                                h0.Thickness = math.max(1, (h1.Thickness or 2) + 2)
                                if not h0.Visible then
                                    h0.Visible = true
                                end
                                h1.From = h8
                                h1.To = Vector2.new(e6.X, e6.Y)
                                local h9 =
                                    g["prediction_color"] and g["prediction_color"].Color or
                                    Color3.fromRGB(255, 255, 255)
                                if h1.Color ~= h9 then
                                    h1.Color = h9
                                end
                                if not h1.Visible then
                                    h1.Visible = true
                                end
                                local ha = h1.Color
                                local hb = Vector2.new(e6.X, e6.Y)
                                h4.Position = h8
                                h4.Radius = math.max(1, h2 * 0.25)
                                if h4.Color ~= ha then
                                    h4.Color = ha
                                end
                                if not h4.Visible then
                                    h4.Visible = true
                                end
                                h6.Position = hb
                                h6.Radius = math.max(1, h2 * 0.5)
                                if h6.Color ~= ha then
                                    h6.Color = ha
                                end
                                if not h6.Visible then
                                    h6.Visible = true
                                end
                                local hc = math.max(1, (h1.Thickness or 2) + 2)
                                h3.Position = h8
                                h3.Thickness = hc
                                h3.Radius = h4.Radius + hc / 2
                                if not h3.Visible then
                                    h3.Visible = true
                                end
                                h5.Position = hb
                                h5.Thickness = hc
                                h5.Radius = h6.Radius + hc / 2
                                if not h5.Visible then
                                    h5.Visible = true
                                end
                            else
                                if h1.Visible then
                                    h1.Visible = false
                                end
                                if h0.Visible then
                                    h0.Visible = false
                                end
                                if h4.Visible then
                                    h4.Visible = false
                                end
                                if h6.Visible then
                                    h6.Visible = false
                                end
                                if h3.Visible then
                                    h3.Visible = false
                                end
                                if h5.Visible then
                                    h5.Visible = false
                                end
                            end
                        else
                            if h1.Visible then
                                h1.Visible = false
                            end
                            if h0.Visible then
                                h0.Visible = false
                            end
                            if h4.Visible then
                                h4.Visible = false
                            end
                            if h6.Visible then
                                h6.Visible = false
                            end
                            if h3.Visible then
                                h3.Visible = false
                            end
                            if h5.Visible then
                                h5.Visible = false
                            end
                        end
                    else
                        if h1.Visible then
                            h1.Visible = false
                        end
                        if h0.Visible then
                            h0.Visible = false
                        end
                        if h4.Visible then
                            h4.Visible = false
                        end
                        if h6.Visible then
                            h6.Visible = false
                        end
                        if h3.Visible then
                            h3.Visible = false
                        end
                        if h5.Visible then
                            h5.Visible = false
                        end
                    end
                else
                    if h1.Visible then
                        h1.Visible = false
                    end
                    if h0.Visible then
                        h0.Visible = false
                    end
                    if h4.Visible then
                        h4.Visible = false
                    end
                    if h6.Visible then
                        h6.Visible = false
                    end
                    if h3.Visible then
                        h3.Visible = false
                    end
                    if h5.Visible then
                        h5.Visible = false
                    end
                end
            end
        )
        table.insert(a.connections, ee)
        g_.conn = ee
        g_.cleanup = function()
            pcall(
                function()
                    if g_.conn then
                        g_.conn:Disconnect()
                    end
                end
            )
            local function hd(ci)
                if ci and ci.Remove then
                    pcall(
                        function()
                            ci:Remove()
                        end
                    )
                end
            end
            hd(g_.tracer)
            hd(g_.tracerOutline)
            hd(g_.startCircle)
            hd(g_.startOutline)
            hd(g_.endCircle)
            hd(g_.endOutline)
            getgenv().PredictionTracer = nil
        end
    end
    do
        local B = {
            rs = game:GetService("RunService"),
            uis = game:GetService("UserInputService"),
            camera = workspace.CurrentCamera
        }
        local e0 = {
            line = nil,
            line_outline = nil,
            enabled = false,
            part = "HumanoidRootPart",
            origin = "mouse",
            connection = nil
        }
        local he = {
            "Head",
            "UpperTorso",
            "LowerTorso",
            "HumanoidRootPart",
            "LeftUpperArm",
            "LeftLowerArm",
            "LeftHand",
            "RightUpperArm",
            "RightLowerArm",
            "RightHand",
            "LeftUpperLeg",
            "LeftLowerLeg",
            "LeftFoot",
            "RightUpperLeg",
            "RightLowerLeg",
            "RightFoot"
        }
    end
    getgenv().load_config = function(bG)
        a:load_config(readfile(a.directory .. "/configs/" .. bG .. ".cfg"))
    end
    local hf = x:column()
    local hg = hf:section({name = "Options"})
    local hh = a:get_config()
    config_holder = hg:list({flag = "config_name_list"})
    hg:textbox({flag = "config_name_text_box"})
    hg:button_holder({})
    hg:button(
        {name = "Create", callback = function()
                writefile(a.directory .. "/configs/" .. g["config_name_text_box"] .. ".cfg", a:get_config())
                a:config_list_update()
            end}
    )
    hg:button(
        {name = "Delete", callback = function()
                delfile(a.directory .. "/configs/" .. g["config_name_list"] .. ".cfg")
                a:config_list_update()
            end}
    )
    hg:button_holder({})
    hg:button(
        {name = "Load", callback = function()
                a:load_config(readfile(a.directory .. "/configs/" .. g["config_name_list"] .. ".cfg"))
                a:notification({text = "Loaded Config: " .. g["config_name_list"], time = 3})
            end}
    )
    hg:button(
        {name = "Save", callback = function()
                writefile(a.directory .. "/configs/" .. g["config_name_list"] .. ".cfg", a:get_config())
                a:config_list_update()
                a:notification({text = "Saved Config: " .. g["config_name_list"], time = 3})
            end}
    )
    hg:button_holder({})
    hg:button(
        {name = "Refresh Configs", callback = function()
                a:config_list_update()
            end}
    )
    hg:button_holder({})
    hg:button(
        {name = "Unload Config", callback = function()
                a:load_config(hh)
            end}
    )
    hg:button(
        {name = "Unload Menu", callback = function()
                a:load_config(hh)
                for bc, hi in a.guis do
                    hi:Destroy()
                end
                for bc, hj in a.connections do
                    hj:Disconnect()
                end
            end}
    )
    local hk, hl, hm = x:column():multi_section({names = {"Theme", "Game", "HUD"}})
    hk:label({name = "Accent"}):colorpicker(
        {name = "Accent", color = c("#ffffff"), flag = "accent", callback = function(cJ, hn)
                a:update_theme("accent", cJ)
            end}
    )
    hk:label({name = "Contrast"}):colorpicker(
        {name = "Low", color = c("#2d2d2d"), flag = "low_contrast", callback = function(cJ)
                if g["high_contrast"] and g["low_contrast"] then
                    a:update_theme("contrast", d({e(0, g["low_contrast"].Color), e(1, g["high_contrast"].Color)}))
                end
            end}
    ):colorpicker(
        {name = "High", color = c("#101010"), flag = "high_contrast", callback = function(cJ)
                a:update_theme("contrast", d({e(0, g["low_contrast"].Color), e(1, g["high_contrast"].Color)}))
            end}
    )
    hk:label({name = "Inline"}):colorpicker(
        {name = "Inline", color = c("#313131"), flag = "theme_inline", callback = function(cJ, hn)
                a:update_theme("inline", cJ)
            end}
    )
    hk:label({name = "Outline"}):colorpicker(
        {name = "Outline", color = c("#000000"), flag = "theme_outline", callback = function(cJ, hn)
                a:update_theme("outline", cJ)
            end}
    )
    hk:label({name = "Text Color"}):colorpicker(
        {name = "Main", color = c("#7b7b7b"), flag = "theme_text", callback = function(cJ, hn)
                a:update_theme("text", cJ)
            end}
    ):colorpicker(
        {name = "Outline", color = c("#282828"), flag = "theme_text_outline", callback = function(cJ, hn)
                a:update_theme("text_outline", cJ)
            end}
    )
    hk:label({name = "Glow"}):colorpicker(
        {name = "Glow", color = c("#ffffff"), flag = "theme_glow", callback = function(cJ, hn)
                a:update_theme("glow", cJ)
            end}
    )
    hm:label({name = "UI Bind"}):keybind({callback = s.set_menu_visibility, key = Enum.KeyCode.Insert})
    hm:toggle(
        {name = "Keybind List", flag = "keybind_list", callback = function(ho)
                a.keybind_list_frame.Visible = ho
            end}
    )
    hm:toggle(
        {name = "CustomUI", flag = "custom_hud_enabled", callback = function(ho)
                A.set_visible(ho)
            end}
    ):colorpicker(
        {name = "Health", flag = "hud_health_color", color = A.colors.health_bar, callback = function(cJ)
                A.colors.health_bar = cJ
                A.update_bar_colors()
            end}
    ):colorpicker(
        {name = "Armor", flag = "hud_armor_color", color = A.colors.armor_bar, callback = function(cJ)
                A.colors.armor_bar = cJ
                A.update_bar_colors()
            end}
    ):colorpicker(
        {name = "Text", flag = "hud_text_color", color = A.colors.text, callback = function(cJ)
                A.colors.text = cJ
                A.update_bar_colors()
            end}
    )
    local hp
    local function hq()
        local hr = g["watermark_type"]
        local hs = {}
        local function ht()
            if hp ~= nil then
                return hp
            end
            local dG, aD =
                pcall(
                function()
                    return game:GetService("MarketplaceService"):GetProductInfo(game.PlaceId)
                end
            )
            local bG = dG and aD and aD.Name or tostring(game.PlaceId)
            hp = bG
            return bG
        end
        if type(hr) == "table" then
            local dR = {}
            for bc, bS in next, hr do
                dR[bS] = true
            end
            if dR["Date"] then
                hs[#hs + 1] = os.date("%y:%m:%d")
            end
            if dR["Time"] then
                hs[#hs + 1] = os.date("%H:%M:%S")
            end
            if dR["Place"] then
                hs[#hs + 1] = ht()
            end
            if dR["User"] then
                hs[#hs + 1] = i and i.Name or "?"
            end
        end
        if #hs == 0 then
            hs[1] = os.date("%H:%M:%S")
        end
        return "Rebuild.gg - " .. table.concat(hs, " - ")
    end
    local hu =
        hm:toggle(
        {name = "Watermark", flag = "watermark", callback = function(ho)
                y.set_visible(ho)
                if ho then
                    y.change_text(hq())
                end
            end}
    )
    local hv = hm:dependency_box()
    hv:setup_dependencies({{hu, true}})
    hv:dropdown(
        {
            name = "Type",
            flag = "watermark_type",
            items = {"Time", "Date", "Place", "User"},
            multi = true,
            default = {"Time"},
            callback = function(dR)
                y.change_text(hq())
            end
        }
    )
    local hw =
        hm:toggle(
        {name = "Radar", flag = "hud_radar", callback = function(ho)
                z.set_visible(ho)
            end}
    )
    local hx = hm:dependency_box()
    hx:setup_dependencies({{hw, true}})
    hx:slider(
        {name = "Zoom", flag = "radar_zoom", min = 0.1, max = 2, default = 1, interval = 0.1, callback = function(cc)
                z.set_zoom(cc)
            end}
    )
    hl:button_holder({})
    hl:button(
        {name = "Copy JobId", callback = function()
                setclipboard(game.JobId)
            end}
    )
    hl:button_holder({})
    hl:button(
        {name = "Copy GameID", callback = function()
                setclipboard(game.GameId)
            end}
    )
    hl:button_holder({})
    hl:button(
        {
            name = "Copy Join Script",
            callback = function()
                setclipboard(
                    'game:GetService("TeleportService"):TeleportToPlaceInstance(' ..
                        game.PlaceId .. ', "' .. game.JobId .. '", game.Players.LocalPlayer)'
                )
            end
        }
    )
    hl:button_holder({})
    hl:button(
        {name = "Rejoin", callback = function()
                game:GetService("TeleportService"):TeleportToPlaceInstance(game.PlaceId, game.JobId, i)
            end}
    )
    hl:button_holder({})
    hl:button(
        {
            name = "Join New Server",
            callback = function()
                local hy =
                    game:GetService("HttpService"):JSONDecode(
                    game:HttpGetAsync(
                        "https://games.roblox.com/v1/games/" ..
                            game.PlaceId .. "/servers/Public?sortOrder=Asc&limit=100"
                    )
                )
                local hz = hy.data[h(1, #hy.data)]
                if hz.playing <= g["max_players"] then
                    game:GetService("TeleportService"):TeleportToPlaceInstance(game.PlaceId, hz.id)
                end
            end
        }
    )
    hl:slider({name = "Max Players", flag = "max_players", min = 0, max = 40, default = 15, interval = 1})
    t.open_tab()
    task.spawn(
        function()
            while task.wait(1) do
                y.change_text(hq())
            end
        end
    )
    do
        local w = game:GetService("Players")
        local ec = game:GetService("RunService")
        local function hA(b9)
            if b9 ~= i then
                z.add_dot(b9)
            end
        end
        for bc, b9 in ipairs(w:GetPlayers()) do
            hA(b9)
        end
        table.insert(a.connections, w.PlayerAdded:Connect(hA))
        table.insert(
            a.connections,
            w.PlayerRemoving:Connect(
                function(b9)
                    z.remove_dot(b9)
                end
            )
        )
        local hB = nil
        local function hC()
            if z then
                for bc, b9 in ipairs(w:GetPlayers()) do
                    if b9 ~= i then
                        local a3 = b9.Character
                        local bd = a3 and a3:FindFirstChild("HumanoidRootPart")
                        if bd then
                            z.update_dot(b9, bd.Position)
                        end
                    end
                end
            end
        end
        local function hD()
            if g["hud_radar"] then
                if not hB then
                    hB = ec.RenderStepped:Connect(hC)
                    table.insert(a.connections, hB)
                end
            else
                if hB then
                    hB:Disconnect()
                    hB = nil
                end
            end
        end
        hD()
        local hE = g["hud_radar"]
        local hF = getmetatable(g) or {}
        local hG = hF.__newindex
        hF.__newindex = function(t, k, v)
            if k == "hud_radar" then
                hE = v
                hD()
            end
            if hG then
                return hG(t, k, v)
            else
                rawset(t, k, v)
            end
        end
        setmetatable(g, hF)
    end
    a:config_list_update()
    for hH, cL in next, f.preset do
        pcall(
            function()
                a:update_theme(hH, cL)
            end
        )
    end
    do
        local hI = u:column()
        local hJ = hI:section({name = "Desync"})
        local hK = {
            enabled = false,
            value_to_buy = 100,
            loop_conn = nil,
            armor_conn = nil,
            char_conn = nil,
            stopped = false,
            busy = false,
            last_click_t = 0,
            click_interval = 0.02,
            post_wait_frames = 2,
            last_attempt = 0,
            attempt_cooldown = 0.1,
            shop_head = nil,
            shop_clickdet = nil
        }
        local hL = {autostomp_active = false}
        local function hM()
            local a3 = i.Character
            if not a3 then
                return nil
            end
            local fg = a3:FindFirstChild("BodyEffects")
            local hN = fg and fg:FindFirstChild("Armor")
            return hN and hN.Value or nil
        end
        local function hO()
            local hP = i:FindFirstChild("DataFolder")
            local hQ = hP and hP:FindFirstChild("Currency")
            return hQ and hQ.Value or 0
        end
        local function hR()
            local hS = workspace:FindFirstChild("Ignored")
            hS = hS and hS:FindFirstChild("Shop")
            if not hS then
                return nil
            end
            local dE = hS:GetChildren()
            local hT = dE[16]
            local dd, hU
            if hT then
                dd = hT:FindFirstChild("Head")
                if dd then
                    hU = dd:FindFirstChildOfClass("ClickDetector") or hT:FindFirstChildOfClass("ClickDetector")
                end
            end
            if not (hT and dd and hU) then
                hT, dd, hU = nil, nil, nil
                for bc, hV in ipairs(dE) do
                    local c1 = hV:FindFirstChild("Head")
                    if c1 then
                        local hW =
                            c1:FindFirstChildOfClass("ClickDetector") or hV:FindFirstChildOfClass("ClickDetector")
                        if hW then
                            hT, dd, hU = hV, c1, hW
                            break
                        end
                    end
                end
            end
            return hT, dd, hU
        end
        local function hX()
            if hK.shop_head and hK.shop_clickdet then
                return hK.shop_head, hK.shop_clickdet
            end
            local bc, dd, hY = hR()
            hK.shop_head, hK.shop_clickdet = dd, hY
            return dd, hY
        end
        local function hZ()
            if not hK.enabled or hK.stopped or hK.busy then
                return
            end
            local I = tick()
            if I - hK.last_attempt < hK.attempt_cooldown then
                return
            end
            hK.last_attempt = I
            local hQ = hM()
            if not hQ then
                return
            end
            if hQ >= 200 or hQ > hK.value_to_buy then
                return
            end
            if hO() < 1000 then
                return
            end
            local dd, hY = hX()
            if not (dd and hY) then
                return
            end
            if _G.DesyncLibrary then
                hK.busy = true
                if g and g["Debug"] then
                    print("[AutoArmor] moving to shop (instant)")
                end
                _G.DesyncLibrary.movedesyncto(dd.CFrame)
                pcall(
                    function()
                        B.run.Heartbeat:Wait()
                        B.run.RenderStepped:Wait()
                    end
                )
                for cY = 1, 30 do
                    if hK.stopped or not hK.enabled then
                        break
                    end
                    local cc = hM()
                    if cc and (cc >= 200 or cc >= hK.value_to_buy) then
                        break
                    end
                    if hO() < 1000 then
                        break
                    end
                    B.run.RenderStepped:Wait()
                    pcall(fireclickdetector, hY)
                    if hK.click_interval and hK.click_interval > 0 then
                        B.run.Heartbeat:Wait()
                        _G.DesyncLibrary.SynchronizeSyncWithPlayer()
                    end
                end
                if g and g["Debug"] then
                    print("[AutoArmor] resynced after purchase")
                end
                hK.busy = false
            end
        end
        local function h_()
            if hK.armor_conn then
                return
            end
            local a3 = i.Character
            if not a3 then
                return
            end
            local fg = a3:FindFirstChild("BodyEffects")
            local hN = fg and fg:FindFirstChild("Armor")
            if not hN then
                return
            end
            hK.armor_conn =
                hN.Changed:Connect(
                function()
                    hZ()
                end
            )
            hZ()
        end
        local function i0()
            if hK.char_conn then
                return
            end
            hK.char_conn =
                i.CharacterAdded:Connect(
                function()
                    pcall(
                        function()
                            B.run.Heartbeat:Wait()
                            B.run.RenderStepped:Wait()
                        end
                    )
                    if hK.armor_conn then
                        hK.armor_conn:Disconnect()
                        hK.armor_conn = nil
                    end
                    hK.shop_head, hK.shop_clickdet = nil, nil
                    if hK.enabled then
                        hX()
                        h_()
                        hZ()
                    end
                end
            )
        end
        local function i1()
            if hK.loop_conn then
                return
            end
            hX()
            h_()
            i0()
            hK.loop_conn =
                B.task.spawn(
                function()
                    while hK.enabled do
                        B.task.wait(0.05)
                        if not hK.stopped then
                            hZ()
                        end
                    end
                end
            )
        end
        local function i2()
            if hK.loop_conn then
                pcall(
                    function()
                        B.task.cancel(hK.loop_conn)
                    end
                )
                hK.loop_conn = nil
            end
            if hK.armor_conn then
                hK.armor_conn:Disconnect()
                hK.armor_conn = nil
            end
            if hK.char_conn then
                hK.char_conn:Disconnect()
                hK.char_conn = nil
            end
            hK.busy = false
            hK.shop_head, hK.shop_clickdet = nil, nil
            if _G.DesyncLibrary then
                pcall(
                    function()
                        _G.DesyncLibrary.SynchronizeSyncWithPlayer()
                    end
                )
            end
        end
        local i3 =
            hJ:toggle(
            {name = "Auto Armor", flag = "auto_armor_enabled", default = false, callback = function(state)
                    hK.enabled = state
                    if state then
                        i1()
                    else
                        i2()
                    end
                    if autostomp_state and autostomp_state.enabled then
                        autostomp_state.last_sync = 0
                        autostomp_state.last_stomp = 0
                    end
                    hK.busy = state and hK.busy or false
                end}
        )
        local i4 = hJ:dependency_box()
        i4:setup_dependencies({{i3, true}})
        i4:slider(
            {name = "BuyAt", flag = "armor_percent_to_buy", min = 1, max = 199, default = 100, callback = function(cL)
                    hK.value_to_buy = cL
                end}
        )
        hK.value_to_buy =
            g and typeof(g["armor_percent_to_buy"]) == "number" and g["armor_percent_to_buy"] or hK.value_to_buy
        do
            local autostomp_state = {
                enabled = false,
                loop_conn = nil,
                hb_conn = nil,
                stomp_rate = 10,
                last_stomp = 0,
                was_active = false,
                tu_registered = false,
                noclip_char = nil,
                noclip_parts = {},
                y_offset = 0,
                last_sync = 0,
                sync_interval = 3
            }
            local function i5(az)
                return az and az.Character and az.Character:FindFirstChild("BodyEffects") and
                    az.Character.BodyEffects:FindFirstChild("K.O") and
                    az.Character.BodyEffects["K.O"].Value
            end
            local function i6(az)
                if not az or not az.Character then
                    return nil
                end
                local a3 = az.Character
                local i7 = a3:FindFirstChild("UpperTorso")
                local i8 = a3:FindFirstChild("LowerTorso")
                local i9 = i7 or i8
                return i9 and i9.CFrame
            end
            local function ia()
                if autostomp_state.noclip_char then
                    for bg, ib in pairs(autostomp_state.noclip_parts) do
                        if bg and bg.Parent then
                            pcall(
                                function()
                                    bg.CanCollide = ib
                                end
                            )
                        end
                    end
                    autostomp_state.noclip_parts = {}
                    autostomp_state.noclip_char = nil
                end
            end
            local function ic(az)
                local a3 = az and az.Character
                if not a3 then
                    return
                end
                if autostomp_state.noclip_char == a3 then
                    return
                end
                ia()
                autostomp_state.noclip_char = a3
                for bc, br in ipairs(a3:GetDescendants()) do
                    if br:IsA("BasePart") then
                        autostomp_state.noclip_parts[br] = br.CanCollide
                        pcall(
                            function()
                                br.CanCollide = false
                            end
                        )
                    end
                end
            end
            local function id()
                if autostomp_state.hb_conn then
                    return
                end
                autostomp_state.last_stomp = 0
                autostomp_state.last_sync = 0
                autostomp_state.was_active = false
                if not autostomp_state.tu_registered and C and C.OnTargetUpdate then
                    autostomp_state.tu_registered = true
                    C:OnTargetUpdate(
                        function(aD)
                            if not autostomp_state.enabled then
                                return
                            end
                            if not aD and autostomp_state.was_active then
                                ia()
                                pcall(
                                    function()
                                        if _G.DesyncLibrary and _G.DesyncLibrary.SynchronizeSyncWithPlayer then
                                            _G.DesyncLibrary.SynchronizeSyncWithPlayer()
                                        end
                                    end
                                )
                                autostomp_state.was_active = false
                            end
                            autostomp_state.last_stomp = 0
                        end
                    )
                end
                autostomp_state.hb_conn =
                    B.run.Heartbeat:Connect(
                    function()
                        local bU = targeting_state and targeting_state.current
                        local ie = hK.busy == true
                        local ig = autostomp_state.enabled and not ie and bU and i5(bU)
                        hL.autostomp_active = ig and true or false
                        if not ie and autostomp_state.was_active and not ig then
                            autostomp_state.last_sync = 0
                            autostomp_state.last_stomp = 0
                        end
                        if ig then
                            ic(bU)
                            autostomp_state.was_active = true
                            local I = os.clock()
                            if I - autostomp_state.last_sync >= autostomp_state.sync_interval then
                                autostomp_state.last_sync = I
                                pcall(
                                    function()
                                        if _G.DesyncLibrary and _G.DesyncLibrary.SynchronizeSyncWithPlayer then
                                            _G.DesyncLibrary.SynchronizeSyncWithPlayer()
                                        end
                                    end
                                )
                            end
                            local ih = i6(bU)
                            if ih then
                                pcall(
                                    function()
                                        if _G.DesyncLibrary and _G.DesyncLibrary.movedesyncto then
                                            _G.DesyncLibrary.movedesyncto(ih.X, ih.Y + autostomp_state.y_offset, ih.Z)
                                        end
                                    end
                                )
                            end
                            local I = os.clock()
                            local ii = 1 / math.max(1, autostomp_state.stomp_rate)
                            if I - autostomp_state.last_stomp >= ii then
                                autostomp_state.last_stomp = I
                                pcall(
                                    function()
                                        local ij = game:GetService("ReplicatedStorage"):FindFirstChild("MainEvent")
                                        if ij then
                                            ij:FireServer("Stomp")
                                        end
                                    end
                                )
                            end
                        else
                            if autostomp_state.was_active then
                                ia()
                                pcall(
                                    function()
                                        if _G.DesyncLibrary and _G.DesyncLibrary.SynchronizeSyncWithPlayer then
                                            _G.DesyncLibrary.SynchronizeSyncWithPlayer()
                                        end
                                    end
                                )
                                autostomp_state.was_active = false
                            end
                        end
                    end
                )
            end
            local function ik()
                if autostomp_state.loop_conn then
                    B.task.cancel(autostomp_state.loop_conn)
                    autostomp_state.loop_conn = nil
                end
                if autostomp_state.hb_conn then
                    autostomp_state.hb_conn:Disconnect()
                    autostomp_state.hb_conn = nil
                end
                ia()
                pcall(
                    function()
                        if _G.DesyncLibrary and _G.DesyncLibrary.SynchronizeSyncWithPlayer then
                            _G.DesyncLibrary.SynchronizeSyncWithPlayer()
                        end
                    end
                )
                autostomp_state.was_active = false
                hL.autostomp_active = false
            end
            local il =
                hJ:toggle(
                {name = "AutoStomp", flag = "autostomp_enabled", default = false, callback = function(bX)
                        autostomp_state.enabled = bX
                        if bX then
                            id()
                        else
                            ik()
                        end
                    end}
            )
            local im = hJ:dependency_box()
            im:setup_dependencies({{il, true}})
            im:slider(
                {
                    name = "YOff",
                    flag = "autostomp_y_offset",
                    min = -1,
                    max = 3,
                    default = 0,
                    interval = 0.01,
                    callback = function(cc)
                        autostomp_state.y_offset = cc
                    end
                }
            )
        end
        do
            local io = {enabled = false, hb_conn = nil, mode = "VoidStatic"}
            local function ip()
                return B.math.random() * 1e21
            end
            local function iq()
                return (B.math.random() < 0.5 and -1 or 1) * ip()
            end
            local function ir()
                if io.hb_conn then
                    return
                end
                io.hb_conn =
                    B.run.Heartbeat:Connect(
                    function()
                        local is = hK.busy == true or hL.autostomp_active == true
                        local aG = shared and shared.Rebuild_FlingActive or false
                        local aH = C and C._fling_wave_running == true or false
                        if io.enabled and not is and not aG and not aH then
                            pcall(
                                function()
                                    if _G.DesyncLibrary and _G.DesyncLibrary.movedesyncto then
                                        local c3 = io.mode
                                        local a0, bN, bO
                                        if c3 == "VoidStatic" then
                                            a0, bN, bO = -18e18, -18e18, -18e18
                                        elseif c3 == "VoidRandom" then
                                            a0 = iq()
                                            bN = -ip()
                                            bO = iq()
                                        elseif c3 == "SkyStatic" then
                                            a0, bN, bO = 18e20, 18e20, 18e20
                                        elseif c3 == "SkyRandom" then
                                            a0 = iq()
                                            bN = ip()
                                            bO = iq()
                                        elseif c3 == "WorldRandom" then
                                            a0 = iq()
                                            bN = iq()
                                            bO = iq()
                                        elseif c3 == "Infinity" then
                                            a0 = B.math.huge
                                            bN = B.math.huge
                                            bO = -B.math.huge
                                        else
                                            a0, bN, bO = -18e18, -18e18, -18e18
                                        end
                                        _G.DesyncLibrary.movedesyncto(a0, bN, bO)
                                    end
                                end
                            )
                        end
                    end
                )
            end
            local function it()
                if io.hb_conn then
                    io.hb_conn:Disconnect()
                    io.hb_conn = nil
                end
                local is = hK.busy == true or hL.autostomp_active == true
                if not is then
                    pcall(
                        function()
                            local iu = _G.DesyncLibrary
                            if iu and iu.SynchronizeSyncWithPlayer then
                                iu.SynchronizeSyncWithPlayer()
                                return
                            end
                            if iu and iu.movedesyncto then
                                local i = game and game.Players and game.Players.LocalPlayer
                                local a3 = i and i.Character
                                local bd = a3 and a3:FindFirstChild("HumanoidRootPart")
                                if bd then
                                    local b9 = bd.Position
                                    iu.movedesyncto(b9.X, b9.Y, b9.Z)
                                end
                            end
                        end
                    )
                end
            end
            C._voiding = io
            C._void_start = ir
            C._void_stop = it
            local iv =
                hJ:toggle(
                {name = "Voiding", flag = "voiding_enabled", default = false, callback = function(state)
                        local aG = shared and shared.Rebuild_FlingActive or false
                        local aH = C and C._fling_wave_running == true or false
                        if state and (aG or aH) then
                            io.enabled = false
                            if a and a.notification then
                                a:notification({text = "FlingActive", time = 2})
                            end
                            return
                        end
                        io.enabled = state
                        if state then
                            ir()
                        else
                            it()
                        end
                    end}
            )
            local iw = hJ:dependency_box()
            iw:setup_dependencies({{iv, true}})
            iw:dropdown(
                {
                    name = "Mode",
                    flag = "voiding_mode",
                    items = {"VoidStatic", "VoidRandom", "SkyStatic", "SkyRandom", "WorldRandom", "Infinity"},
                    callback = function(cc)
                        io.mode = cc
                    end
                }
            )
        end
        local ix = hI:section({name = "Classics"})
        do
            local iy = {enabled = false, originals = {}, loop_gen = 0, loop_running = false}
            local iz = B and B.Players or game:GetService("Players")
            local r = i or iz and iz.LocalPlayer
            local iA = task and task.wait or wait
            local iB = task and task.spawn or spawn
            local iC = 1e-20
            local function iD(V)
                if not (V and V:IsA("Tool") and V:FindFirstChild("GunScript")) then
                    return
                end
                if type(getconnections) ~= "function" then
                    return
                end
                local iE = V.Activated
                local Z, iF = pcall(getconnections, iE)
                if not Z or type(iF) ~= "table" then
                    return
                end
                for I, iG in ipairs(iF) do
                    local iH = iG.Function
                    if iH then
                        local iI = debug.getinfo(iH)
                        if iI and iI.nups then
                            iy.originals[iH] = iy.originals[iH] or {}
                            for av = 1, iI.nups do
                                local iJ = select(1, debug.getupvalue(iH, av))
                                if type(iJ) == "number" then
                                    if iy.originals[iH][av] == nil and iJ ~= iC then
                                        iy.originals[iH][av] = iJ
                                    end
                                    if iy.enabled then
                                        pcall(debug.setupvalue, iH, av, iC)
                                    end
                                end
                            end
                        end
                    end
                end
            end
            local function aF()
                if iy.loop_running then
                    return
                end
                iy.loop_gen = iy.loop_gen + 1
                local iK = iy.loop_gen
                iy.loop_running = true
                iB(
                    function()
                        while iy.enabled and iy.loop_gen == iK do
                            local aI = r and r.Character
                            local V = aI and aI:FindFirstChildOfClass("Tool")
                            iD(V)
                            iA(0.01)
                        end
                        iy.loop_running = false
                    end
                )
            end
            local function iL()
                for iH, iM in pairs(iy.originals) do
                    for av, iN in pairs(iM) do
                        pcall(debug.setupvalue, iH, av, iN)
                    end
                end
                iy.originals = {}
            end
            local function aM()
                iy.loop_gen = iy.loop_gen + 1
                iL()
            end
            ix:toggle(
                {name = "RapidFire", flag = "rapidfire_enabled", callback = function(a3)
                        iy.enabled = a3
                        if a3 then
                            aF()
                        else
                            aM()
                        end
                    end}
            )
        end
        do
            local i6 = {
                enabled = false,
                range = 1000,
                hb_conn = nil,
                bp_added_conn = nil,
                char_child_conn = nil,
                char_added_conn = nil
            }
            local iz = B and B.Players
            local r = i
            local iO = B and B.RunService
            local iP = B and B.workspace
            local function iQ(V)
                if not V then
                    return
                end
                local A = V:FindFirstChild("Range")
                if A and A:IsA("ValueBase") then
                    pcall(
                        function()
                            A.Value = i6.range
                        end
                    )
                end
            end
            local function iR()
                if not i6.enabled then
                    return
                end
                local iS
                do
                    local iT = iP and iP:FindFirstChild("Players")
                    if iT and r and r.Name then
                        iS = iT:FindFirstChild(r.Name)
                    end
                end
                for I, iU in ipairs({r and r.Character, r and r.Backpack, iS}) do
                    if iU then
                        for I, V in ipairs(iU:GetChildren()) do
                            iQ(V)
                        end
                    end
                end
            end
            local function iV(V)
                if i6.enabled then
                    iQ(V)
                end
            end
            local function iW(c)
                if i6.char_child_conn then
                    pcall(
                        function()
                            i6.char_child_conn:Disconnect()
                        end
                    )
                    i6.char_child_conn = nil
                end
                if c then
                    i6.char_child_conn = c.ChildAdded:Connect(iV)
                end
            end
            local function aF()
                if i6.hb_conn then
                    return
                end
                i6.hb_conn = iO.Heartbeat:Connect(iR)
                if r then
                    if r.Backpack and not i6.bp_added_conn then
                        i6.bp_added_conn = r.Backpack.ChildAdded:Connect(iV)
                    end
                    iW(r.Character)
                    if not i6.char_added_conn then
                        i6.char_added_conn = r.CharacterAdded:Connect(iW)
                    end
                end
                iR()
            end
            local function aM()
                if i6.hb_conn then
                    pcall(
                        function()
                            if i6.hb_conn.Connected then
                                i6.hb_conn:Disconnect()
                            else
                                i6.hb_conn:Disconnect()
                            end
                        end
                    )
                    i6.hb_conn = nil
                end
                if i6.bp_added_conn then
                    pcall(
                        function()
                            i6.bp_added_conn:Disconnect()
                        end
                    )
                    i6.bp_added_conn = nil
                end
                if i6.char_child_conn then
                    pcall(
                        function()
                            i6.char_child_conn:Disconnect()
                        end
                    )
                    i6.char_child_conn = nil
                end
                if i6.char_added_conn then
                    pcall(
                        function()
                            i6.char_added_conn:Disconnect()
                        end
                    )
                    i6.char_added_conn = nil
                end
            end
            local iX =
                ix:toggle(
                {name = "Gunrange", flag = "gunrange_enabled", callback = function(a3)
                        i6.enabled = a3
                        if a3 then
                            aF()
                        else
                            aM()
                        end
                    end}
            )
            local iY = ix:dependency_box()
            iY:setup_dependencies({{iX, true}})
            iY:textbox(
                {name = "Range", flag = "gunrange_range", placeholder = "1000", callback = function(K)
                        local w = tonumber(K)
                        if w then
                            i6.range = w
                            if i6.enabled then
                                iR()
                            end
                        end
                    end}
            )
        end
        do
            local iZ = {
                enabled = false,
                mode = "Collide",
                stepped = nil,
                rayCheck = nil,
                modified = {},
                char_touched = {}
            }
            local iz = B and B.Players or game:GetService("Players")
            local r = i or iz and iz.LocalPlayer
            local iO = B and B.RunService or game:GetService("RunService")
            local iP = B and B.workspace or workspace
            local function i_()
                for ai, j0 in pairs(iZ.modified) do
                    pcall(
                        function()
                            if ai then
                                if j0.cancollide ~= nil then
                                    ai.CanCollide = j0.cancollide
                                end
                            end
                        end
                    )
                    iZ.modified[ai] = nil
                end
                for ai, iN in pairs(iZ.char_touched) do
                    pcall(
                        function()
                            if ai and ai.Parent then
                                ai.CanCollide = iN
                            end
                        end
                    )
                    iZ.char_touched[ai] = nil
                end
            end
            local function j1()
                local j2 = {}
                local ar = B and B.workspace and B.workspace.CurrentCamera
                if ar then
                    table.insert(j2, ar)
                end
                if i and i.Character then
                    table.insert(j2, i.Character)
                end
                local j3 = B and B.Players
                if j3 then
                    for I, j4 in ipairs(j3:GetPlayers()) do
                        if j4 ~= i and j4.Character then
                            table.insert(j2, j4.Character)
                        end
                    end
                end
                return j2
            end
            local function j5()
                if not iZ.rayCheck then
                    local j6 = B and B.RaycastParams and B.RaycastParams.new or RaycastParams and RaycastParams.new
                    iZ.rayCheck = j6 and j6() or nil
                    if iZ.rayCheck and iZ.rayCheck.FilterType then
                        iZ.rayCheck.FilterType = Enum.RaycastFilterType.Blacklist
                    end
                end
                local j7 = j1()
                if iZ.rayCheck and iZ.rayCheck.FilterDescendantsInstances then
                    iZ.rayCheck.FilterDescendantsInstances = j7
                end
            end
            local function aF()
                if iZ.stepped then
                    return
                end
                iZ.stepped =
                    B and B.RunService and
                    B.RunService.Stepped:Connect(
                        function()
                            local aI = i and i.Character
                            local at = aI and aI:FindFirstChildOfClass("Humanoid")
                            local aJ = aI and aI:FindFirstChild("HumanoidRootPart")
                            local a7 = aI and aI:FindFirstChild("Head")
                            if not (at and aJ and a7) then
                                return
                            end
                            if iZ.mode == "LocalCollid" then
                                for I, d in ipairs(aI:GetDescendants()) do
                                    if d:IsA("BasePart") then
                                        if iZ.char_touched[d] == nil then
                                            iZ.char_touched[d] = d.CanCollide
                                        end
                                        d.CanCollide = false
                                    end
                                end
                            elseif iZ.mode == "Collide" then
                                j5()
                                if not iZ.rayCheck then
                                    return
                                end
                                local j8 = at.MoveDirection
                                if j8.Magnitude < 1e-3 then
                                    return
                                end
                                local j9 = B and B.workspace and B.workspace:Raycast(a7.Position, j8 * 3, iZ.rayCheck)
                                if j9 and j9.Instance and j9.Instance:IsA("BasePart") then
                                    local ja = j9.Instance
                                    if not iZ.modified[ja] then
                                        iZ.modified[ja] = {cancollide = ja.CanCollide}
                                        pcall(
                                            function()
                                                ja.CanCollide = false
                                            end
                                        )
                                    end
                                end
                            end
                        end
                    )
            end
            local function aM()
                if iZ.stepped then
                    pcall(
                        function()
                            iZ.stepped:Disconnect()
                        end
                    )
                    iZ.stepped = nil
                end
                i_()
            end
            local jb =
                ix:toggle(
                {name = "Noclip", flag = "noclip_enabled", callback = function(a3)
                        iZ.enabled = a3
                        if a3 then
                            aF()
                        else
                            aM()
                        end
                    end}
            )
            local jc = ix:dependency_box()
            jc:setup_dependencies({{jb, true}})
            local jd =
                jc:dropdown(
                {
                    name = "Mode",
                    flag = "noclip_mode",
                    items = {"Collide", "LocalCollid"},
                    default = "Collide",
                    callback = function(ay)
                        iZ.mode = ay
                        if iZ.enabled then
                            i_()
                        end
                    end
                }
            )
        end
        do
            local bP = {enabled = false, mode = "Smart", hb = nil, touched = {}, detected = {}}
            local function je()
                for ai, iN in pairs(bP.touched) do
                    pcall(
                        function()
                            if ai and ai.Parent then
                                ai.CanCollide = iN
                            end
                        end
                    )
                    bP.touched[ai] = nil
                end
                for j4, I in pairs(bP.detected) do
                    bP.detected[j4] = nil
                end
            end
            local function jf(dT)
                if not dT then
                    return
                end
                for I, d in ipairs(dT:GetDescendants()) do
                    if d:IsA("BasePart") then
                        if bP.touched[d] == nil then
                            bP.touched[d] = d.CanCollide
                        end
                        d.CanCollide = false
                        local jg = B and B.Vector3 or Vector3
                        pcall(
                            function()
                                d.AssemblyLinearVelocity = jg.new(0, 0, 0)
                            end
                        )
                        pcall(
                            function()
                                d.AssemblyAngularVelocity = jg.new(0, 0, 0)
                            end
                        )
                        pcall(
                            function()
                                if PhysicalProperties then
                                    d.CustomPhysicalProperties = PhysicalProperties.new(0, 0, 0)
                                end
                            end
                        )
                    end
                end
            end
            local function aF()
                if bP.hb then
                    return
                end
                bP.hb =
                    B and B.RunService and
                    B.RunService.Heartbeat:Connect(
                        function()
                            if not bP.enabled then
                                return
                            end
                            local j3 = B and B.Players
                            if j3 then
                                for I, j4 in ipairs(j3:GetPlayers()) do
                                    if j4 ~= i and j4.Character then
                                        local dT = j4.Character
                                        if dT and dT:IsDescendantOf(workspace) then
                                            for I, d in ipairs(dT:GetDescendants()) do
                                                if d:IsA("BasePart") then
                                                    if bP.touched[d] == nil then
                                                        bP.touched[d] = d.CanCollide
                                                    end
                                                    d.CanCollide = false
                                                end
                                            end
                                        end
                                    end
                                end
                            end
                            local jh = i and i.Character
                            local ji = jh and jh:FindFirstChild("HumanoidRootPart")
                            if ji then
                                local jj = ji.AssemblyLinearVelocity
                                local c4 = ji.AssemblyAngularVelocity
                                local jk = shared and shared.Rebuild_SilentFling or false
                                local jl = shared and shared.Rebuild_FlingActive or false
                                if not jk and not jl and (jj and jj.Magnitude > 250 or c4 and c4.Magnitude > 250) then
                                    local jg = B and B.Vector3 or Vector3
                                    pcall(
                                        function()
                                            ji.AssemblyLinearVelocity = jg.new(0, 0, 0)
                                        end
                                    )
                                    pcall(
                                        function()
                                            ji.AssemblyAngularVelocity = jg.new(0, 0, 0)
                                        end
                                    )
                                    pcall(
                                        function()
                                            local jm = B and B.StarterGui or game:GetService("StarterGui")
                                            jm:SetCore(
                                                "ChatMakeSystemMessage",
                                                {
                                                    Text = "You were flung. Neutralizing velocity.",
                                                    Color = Color3.fromRGB(255, 0, 0)
                                                }
                                            )
                                        end
                                    )
                                end
                            end
                        end
                    )
            end
            local function aM()
                if bP.hb then
                    pcall(
                        function()
                            bP.hb:Disconnect()
                        end
                    )
                    bP.hb = nil
                end
                je()
            end
            local jn =
                ix:toggle(
                {name = "AntiFling", flag = "antifling_enabled", callback = function(a3)
                        bP.enabled = a3
                        if a3 then
                            aF()
                        else
                            aM()
                        end
                    end}
            )
            local jo = ix:dependency_box()
            jo:setup_dependencies({{jn, true}})
            jo:dropdown(
                {name = "Mode", flag = "antifling_mode", items = {"All"}, default = "All", callback = function(ay)
                        bP.mode = ay
                    end}
            )
        end
        do
            local jp = {
                CurrentTrack = nil,
                CurrentAnimator = nil,
                StopConnection = nil,
                CharAddedConn = nil,
                Settings = {customAnimEnabled = false, customAnimId = "10714340543", customAnimSpeed = 1}
            }
            if not getgenv().AnimBreakerSettings then
                getgenv().AnimBreakerSettings = jp.Settings
            end
            function jp.StopAnimation()
                if jp.StopConnection then
                    pcall(
                        function()
                            jp.StopConnection:Disconnect()
                        end
                    )
                    jp.StopConnection = nil
                end
                if jp.CurrentTrack then
                    pcall(
                        function()
                            jp.CurrentTrack:Stop()
                        end
                    )
                    jp.CurrentTrack = nil
                end
            end
            function jp.StartAnimation(jq, jr)
                jp.StopAnimation()
                local iz = B and B.Players or game:GetService("Players")
                local r = i or iz and iz.LocalPlayer
                local js = r and r.Character
                if not js then
                    return
                end
                local jt = js:FindFirstChildOfClass("Humanoid")
                if not jt then
                    return
                end
                jp.CurrentAnimator = jt:FindFirstChildOfClass("Animator")
                if not jp.CurrentAnimator then
                    pcall(
                        function()
                            local a = Instance.new("Animator")
                            a.Parent = jt
                            jp.CurrentAnimator = a
                        end
                    )
                end
                if not jp.CurrentAnimator then
                    return
                end
                local ju = Instance.new("Animation")
                ju.AnimationId = "rbxassetid://" .. tostring(jq)
                pcall(
                    function()
                        jp.CurrentTrack = jp.CurrentAnimator:LoadAnimation(ju)
                    end
                )
                if jp.CurrentTrack then
                    pcall(
                        function()
                            for _, jv in ipairs(jp.CurrentAnimator:GetPlayingAnimationTracks()) do
                                if jv ~= jp.CurrentTrack then
                                    jv:Stop(0)
                                end
                            end
                        end
                    )
                    jp.CurrentTrack.Looped = true
                    jp.CurrentTrack.Priority = Enum.AnimationPriority.Action
                    jp.CurrentTrack:Play()
                    local jw = math.clamp(tonumber(jr) or 1, 0.1, 20)
                    pcall(
                        function()
                            jp.CurrentTrack:AdjustSpeed(jw)
                        end
                    )
                    jp.StopConnection =
                        jp.CurrentTrack.Stopped:Connect(
                        function()
                            if jp.Settings.customAnimEnabled then
                                task.delay(
                                    0.1,
                                    function()
                                        if jp.Settings.customAnimEnabled then
                                            jp.StartAnimation(jp.Settings.customAnimId, jp.Settings.customAnimSpeed)
                                        end
                                    end
                                )
                            end
                        end
                    )
                end
            end
            function jp.UpdateSpeed(jr)
                if jp.CurrentTrack then
                    local jw = math.clamp(tonumber(jr) or 1, 0.1, 20)
                    pcall(
                        function()
                            jp.CurrentTrack:AdjustSpeed(jw)
                        end
                    )
                end
            end
            local ca =
                ix:toggle(
                {name = "CustomAnimation", flag = "customanim_enabled", default = false, callback = function(state)
                        jp.Settings.customAnimEnabled = state
                        getgenv().AnimBreakerSettings.customAnimEnabled = state
                        if state then
                            jp.StartAnimation(jp.Settings.customAnimId, jp.Settings.customAnimSpeed)
                        else
                            jp.StopAnimation()
                        end
                    end}
            )
            local cb = ix:dependency_box()
            cb:setup_dependencies({{ca, true}})
            cb:dropdown(
                {
                    name = "Animation",
                    flag = "customanim_select",
                    items = {
                        "Floss",
                        "TakeTheL",
                        "CaramelDancen",
                        "ModelBreak",
                        "Ziga",
                        "ReverseFlash",
                        "SpeedMirage",
                        "DogJump"
                    },
                    default = "Floss",
                    callback = function(jx)
                        if jx == "Floss" then
                            jp.Settings.customAnimId = "10714340543"
                        elseif jx == "TakeTheL" then
                            jp.Settings.customAnimId = "117865821073911"
                        elseif jx == "CaramelDancen" then
                            jp.Settings.customAnimId = "83570358825425"
                        elseif jx == "ModelBreak" then
                            jp.Settings.customAnimId = "109873544976020"
                        elseif jx == "Ziga" then
                            jp.Settings.customAnimId = "100823802222093"
                        elseif jx == "ReverseFlash" then
                            jp.Settings.customAnimId = "73295259493176"
                        elseif jx == "SpeedMirage" then
                            jp.Settings.customAnimId = "115334992181298"
                        elseif jx == "DogJump" then
                            jp.Settings.customAnimId = "82726502516305"
                        end
                        getgenv().AnimBreakerSettings.customAnimId = jp.Settings.customAnimId
                        if jp.Settings.customAnimEnabled then
                            jp.StartAnimation(jp.Settings.customAnimId, jp.Settings.customAnimSpeed)
                        end
                    end
                }
            )
            cb:slider(
                {
                    name = "Spd",
                    flag = "customanim_speed",
                    min = 0.1,
                    max = 20,
                    default = 1,
                    interval = 0.1,
                    callback = function(v)
                        jp.Settings.customAnimSpeed = tonumber(v) or 1
                        getgenv().AnimBreakerSettings.customAnimSpeed = jp.Settings.customAnimSpeed
                        jp.UpdateSpeed(jp.Settings.customAnimSpeed)
                    end
                }
            )
            do
                local iz = B and B.Players or game:GetService("Players")
                local r = i or iz and iz.LocalPlayer
                if r and not jp.CharAddedConn then
                    jp.CharAddedConn =
                        r.CharacterAdded:Connect(
                        function()
                            if jp.Settings.customAnimEnabled then
                                task.delay(
                                    0.5,
                                    function()
                                        if jp.Settings.customAnimEnabled then
                                            jp.StartAnimation(jp.Settings.customAnimId, jp.Settings.customAnimSpeed)
                                        end
                                    end
                                )
                            end
                        end
                    )
                end
            end
        end
        do
            local jy = {map = {}}
            local function jz(H, jA, gX)
                if not H or type(gX) ~= "function" then
                    return
                end
                local jB = string.lower(H)
                jy.map[jB] = gX
                if jA and type(jA) == "table" then
                    for I, a in ipairs(jA) do
                        if type(a) == "string" then
                            jy.map[string.lower(a)] = gX
                        end
                    end
                end
            end
            local function jC(jD, jE, jF)
                local j4 = jF or i
                if type(jD) == "string" then
                    local jG = {}
                    for jH in string.gmatch(jD, "%S+") do
                        table.insert(jG, jH)
                    end
                    local jI = jG[1] and string.lower(jG[1]) or nil
                    local aa = jE or {}
                    if #jG > 1 and not jE then
                        for av = 2, #jG do
                            table.insert(aa, jG[av])
                        end
                    end
                    local gX = jy.map[jI]
                    if gX then
                        return gX(aa, j4)
                    end
                elseif type(jD) == "table" and jD.name then
                    local gX = jy.map[string.lower(jD.name)]
                    if gX then
                        return gX(jD.args or {}, j4)
                    end
                end
            end
            shared = shared or {}
            shared.Rebuild_ExecCmd = jC
            shared.Rebuild_AddCmd = jz
            local function jJ(jK)
                jK = jK or 10
                local C = table.create(jK)
                for w = 1, jK do
                    C[w] = string.char(math.random(97, 122))
                end
                return table.concat(C)
            end
            local function jL(aI)
                if not aI then
                    return nil
                end
                return aI:FindFirstChild("HumanoidRootPart") or aI.PrimaryPart
            end
            local gV = {flinging = false, conn = nil, bambam = nil}
            local jM = {conn = nil}
            jz(
                "fling",
                {},
                function(aa, jF)
                    if gV.flinging then
                        jC("unfling", nil, jF)
                    end
                    gV.flinging = false
                    local jN = jF and jF.Character
                    if not jN then
                        return
                    end
                    shared = shared or {}
                    shared.Rebuild_FlingActive = true
                    for I, W in ipairs(jN:GetDescendants()) do
                        if W:IsA("BasePart") then
                            pcall(
                                function()
                                    if PhysicalProperties then
                                        W.CustomPhysicalProperties = PhysicalProperties.new(100, 0.3, 0.5)
                                    end
                                end
                            )
                        end
                    end
                    pcall(
                        function()
                            jC("noclip", nil, jF)
                        end
                    )
                    task.wait(0.1)
                    local aJ = jL(jN)
                    if not aJ then
                        shared.Rebuild_FlingActive = false
                        return
                    end
                    local jO = Instance.new("BodyAngularVelocity")
                    jO.Name = jJ()
                    jO.Parent = aJ
                    jO.AngularVelocity = Vector3.new(0, 99999, 0)
                    jO.MaxTorque = Vector3.new(0, math.huge, 0)
                    jO.P = math.huge
                    gV.bambam = jO
                    for I, a3 in ipairs(jN:GetChildren()) do
                        if a3:IsA("BasePart") then
                            a3.CanCollide = false
                            a3.Massless = true
                            pcall(
                                function()
                                    a3.Velocity = Vector3.new(0, 0, 0)
                                end
                            )
                        end
                    end
                    gV.flinging = true
                    local at = jN:FindFirstChildOfClass("Humanoid")
                    if at then
                        gV.conn =
                            at.Died:Connect(
                            function()
                                jC("unfling", nil, jF)
                            end
                        )
                    end
                    task.spawn(
                        function()
                            while gV.flinging and gV.bambam and gV.bambam.Parent do
                                pcall(
                                    function()
                                        gV.bambam.AngularVelocity = Vector3.new(0, 99999, 0)
                                    end
                                )
                                task.wait(0.2)
                                pcall(
                                    function()
                                        gV.bambam.AngularVelocity = Vector3.new(0, 0, 0)
                                    end
                                )
                                task.wait(0.1)
                            end
                        end
                    )
                end
            )
            jz(
                "unfling",
                {},
                function(aa, jF)
                    shared = shared or {}
                    shared.Rebuild_FlingActive = false
                    gV.flinging = false
                    if gV.conn then
                        pcall(
                            function()
                                gV.conn:Disconnect()
                            end
                        )
                        gV.conn = nil
                    end
                    if gV.bambam then
                        pcall(
                            function()
                                gV.bambam:Destroy()
                            end
                        )
                        gV.bambam = nil
                    end
                end
            )
            jz(
                "antifling",
                {},
                function(aa, jF)
                    if jM.conn then
                        pcall(
                            function()
                                jM.conn:Disconnect()
                            end
                        )
                        jM.conn = nil
                    end
                    local iO = B and B.RunService
                    local iz = B and B.Players
                    if not (iO and iz) then
                        return
                    end
                    jM.conn =
                        iO.Stepped:Connect(
                        function()
                            for I, F in ipairs(iz:GetPlayers()) do
                                if F ~= jF and F.Character then
                                    for I, a3 in ipairs(F.Character:GetDescendants()) do
                                        if a3:IsA("BasePart") then
                                            a3.CanCollide = false
                                        end
                                    end
                                end
                            end
                        end
                    )
                end
            )
            jz(
                "unantifling",
                {},
                function()
                    if jM.conn then
                        pcall(
                            function()
                                jM.conn:Disconnect()
                            end
                        )
                        jM.conn = nil
                    end
                end
            )
        end
        do
            local jP = u:column()
            local jQ = jP:section({name = "Movement"})
            local jR = {
                enabled = false,
                active = false,
                method = "Velocity",
                connection = nil,
                options = {
                    Value = {Value = 16},
                    TPTiming = 0,
                    TPFrequency = {Value = 0.1},
                    WallCheck = {Enabled = false},
                    rayCheck = B and B.RaycastParams and B.RaycastParams.new() or RaycastParams.new(),
                    PulseLength = {Value = 0.5},
                    PulseDelay = {Value = 0.2}
                },
                correction = {mode = "None", last_dir = nil}
            }
            local jS = {"Velocity"}
            local jT = {"None", "Lerp"}
            local SpeedMethods = {Velocity = function(jU, jV)
                    local bw = i.Character and i.Character:FindFirstChild("HumanoidRootPart")
                    if not bw then
                        return
                    end
                    bw.AssemblyLinearVelocity = jV * jU.Value.Value + B.Vector3.new(0, bw.AssemblyLinearVelocity.Y, 0)
                end, Impulse = function(jU, jV)
                    local bw = i.Character and i.Character:FindFirstChild("HumanoidRootPart")
                    if not bw then
                        return
                    end
                    local gO = (jV * jU.Value.Value - bw.AssemblyLinearVelocity) * B.Vector3.new(1, 0, 1)
                    if gO.Magnitude > (jV == B.Vector3.new(0, 0, 0) and 10 or 2) then
                        bw:ApplyImpulse(gO * bw.AssemblyMass)
                    end
                end, CFrame = function(jU, jV, dW)
                    local bw = i.Character and i.Character:FindFirstChild("HumanoidRootPart")
                    local fM = i.Character and i.Character:FindFirstChildOfClass("Humanoid")
                    if not bw or not fM then
                        return
                    end
                    local jW = jV * B.math.max(jU.Value.Value - fM.WalkSpeed, 0) * dW
                    if jU.WallCheck.Enabled then
                        jU.rayCheck.FilterDescendantsInstances = {i.Character, B.camera}
                        jU.rayCheck.CollisionGroup = bw.CollisionGroup
                        local jX = B.workspace:Raycast(bw.Position, jW, jU.rayCheck)
                        if jX then
                            jW = jX.Position + jX.Normal - bw.Position
                        end
                    end
                    bw.CFrame = bw.CFrame + jW
                end, TP = function(jU, jV)
                    if jU.TPTiming < B.tick() then
                        jU.TPTiming = B.tick() + jU.TPFrequency.Value
                        SpeedMethods.CFrame(jU, jV, 1)
                    end
                end, Pulse = function(jU, jV)
                    local bw = i.Character and i.Character:FindFirstChild("HumanoidRootPart")
                    local fM = i.Character and i.Character:FindFirstChildOfClass("Humanoid")
                    if not bw or not fM then
                        return
                    end
                    local dW = B.math.max(jU.Value.Value - fM.WalkSpeed, 0)
                    dW =
                        dW *
                        (1 -
                            B.math.min(
                                B.tick() % (jU.PulseLength.Value + jU.PulseDelay.Value) / jU.PulseLength.Value,
                                1
                            ))
                    bw.AssemblyLinearVelocity =
                        jV * (fM.WalkSpeed + dW) + B.Vector3.new(0, bw.AssemblyLinearVelocity.Y, 0)
                end}
            local function jY(cp, dW, bw, fM)
                local gT = jR.correction.mode
                if gT == "None" then
                    return cp
                end
                if cp.Magnitude > 1e-3 then
                    cp = cp.Unit
                else
                    return cp
                end
                if gT == "Lerp" then
                    local jZ = jR.correction.last_dir or cp
                    local hn = (B and B.math and B.math.clamp or math.clamp)(dW * 60 * 0.18, 0, 1)
                    local j_ = jZ:Lerp(cp, hn)
                    jR.correction.last_dir = j_
                    return j_.Magnitude > 1e-3 and j_.Unit or cp
                end
                return cp
            end
            local k0 = B and B.table and B.table.find or table.find
            local k1 = B and B.table and B.table.insert or table.insert
            for bG in pairs(SpeedMethods) do
                if not k0(jS, bG) then
                    k1(jS, bG)
                end
            end
            local function k2()
                local fM = i.Character and i.Character:FindFirstChildOfClass("Humanoid")
                if not fM then
                    return B.Vector3.new(0, 0, 0)
                end
                return fM.MoveDirection
            end
            local function k3()
                if jR.connection and jR.connection.Connected then
                    return
                end
                if not (B and B.run) then
                    if g and g["Debug"] then
                        warn("[SpeedHack] RunService missing; abort start")
                    end
                    return
                end
                if not i then
                    return
                end
                jR.connection =
                    B.run.Heartbeat:Connect(
                    function(dW)
                        if not (jR.enabled and jR.active) then
                            return
                        end
                        local eH = i.Character
                        local fM = eH and eH:FindFirstChildOfClass("Humanoid")
                        local bw = eH and eH:FindFirstChild("HumanoidRootPart")
                        if not (fM and bw) then
                            return
                        end
                        local k4 = SpeedMethods[jR.method]
                        if k4 then
                            local jV = fM.MoveDirection or B.Vector3.new(0, 0, 0)
                            jV = jY(jV, dW, bw, fM)
                            k4(jR.options, jV, dW)
                        end
                    end
                )
                if g and g["Debug"] then
                    print("[SpeedHack] started (", jR.method, ")")
                end
            end
            local function k5()
                if jR.connection then
                    pcall(
                        function()
                            if jR.connection.Connected then
                                jR.connection:Disconnect()
                            end
                        end
                    )
                    jR.connection = nil
                    if g and g["Debug"] then
                        print("[SpeedHack] stopped")
                    end
                end
            end
            local k6 =
                jQ:toggle(
                {name = "Speed", flag = "SpeedHack_Toggle", default = false, callback = function(dy)
                        jR.enabled = dy
                        if dy then
                            k3()
                        else
                            k5()
                        end
                        if g and g["Debug"] then
                            print("[SpeedHack] enabled:", dy)
                        end
                    end}
            )
            if g then
                g["SpeedHack_Active"] = jR.active or false
            end
            local k7 =
                k6:keybind(
                {name = "Speed", flag = "SpeedHack_Keybind", default = "v", callback = function()
                        jR.active = not jR.active
                        if g then
                            g["SpeedHack_Active"] = jR.active
                        end
                        if a and a.update_dependencies then
                            a:update_dependencies()
                        end
                        if g and g["Debug"] then
                            print("[SpeedHack] active:", jR.active)
                        end
                    end}
            )
            local k8 = jQ:dependency_box()
            k8:setup_dependencies({{k6, true}})
            k8:textbox(
                {name = "Speed", flag = "SpeedHack_Value", default = "16", placeholder = "16", callback = function(dy)
                        local cL = tonumber(dy) or 16
                        jR.options.Value.Value = cL
                    end}
            )
            k8:dropdown(
                {name = "Method", flag = "SpeedHack_Method", items = jS, default = "Velocity", callback = function(dy)
                        jR.method = dy
                        if a and a.update_dependencies then
                            a:update_dependencies()
                        end
                    end}
            )
            k8:dropdown(
                {name = "MoveFix", flag = "SpeedHack_MoveFix", items = jT, default = "None", callback = function(dy)
                        jR.correction.mode = dy
                        jR.correction.last_dir = nil
                    end}
            )
            local k9 = jQ:dependency_box()
            k9:setup_dependencies({{k6, true}})
            k9:toggle(
                {name = "WallCheck", flag = "SpeedHack_WallCheck", default = false, callback = function(dy)
                        jR.options.WallCheck.Enabled = dy
                    end}
            )
            local ka = jQ:dependency_box()
            ka:setup_dependencies({{k6, true}, {"SpeedHack_Method", "TP"}})
            ka:slider(
                {
                    name = "TPFreq",
                    flag = "SpeedHack_TPFreq",
                    min = 0.05,
                    max = 1,
                    default = 0.1,
                    decimals = 2,
                    callback = function(dy)
                        jR.options.TPFrequency.Value = dy
                    end
                }
            )
            local kb = jQ:dependency_box()
            kb:setup_dependencies({{k6, true}, {"SpeedHack_Method", "Pulse"}})
            kb:slider(
                {
                    name = "PulseLen",
                    flag = "SpeedHack_PulseLen",
                    min = 0.1,
                    max = 5,
                    default = 0.5,
                    decimals = 1,
                    callback = function(dy)
                        jR.options.PulseLength.Value = dy
                    end
                }
            )
            kb:slider(
                {
                    name = "PulseDly",
                    flag = "SpeedHack_PulseDly",
                    min = 0.1,
                    max = 1,
                    default = 0.2,
                    decimals = 2,
                    callback = function(dy)
                        jR.options.PulseDelay.Value = dy
                    end
                }
            )
            local function kc(a3)
                if B and B.run then
                    B.run.Heartbeat:Wait()
                end
                jR.active = false
                if g then
                    g["SpeedHack_Active"] = false
                end
                if a and a.update_dependencies then
                    a:update_dependencies()
                end
                k5()
                if jR.enabled then
                    k3()
                end
                local aA = a3 and a3:FindFirstChildOfClass("Humanoid")
                if aA then
                    if jR._died_conn then
                        pcall(
                            function()
                                jR._died_conn:Disconnect()
                            end
                        )
                    end
                    jR._died_conn =
                        aA.Died:Connect(
                        function()
                            if g and g["Debug"] then
                                print("[SpeedHack] died -> reset active & stop")
                            end
                            jR.active = false
                            if g then
                                g["SpeedHack_Active"] = false
                            end
                            if a and a.update_dependencies then
                                a:update_dependencies()
                            end
                            k5()
                        end
                    )
                end
            end
            if i then
                if i.Character then
                    kc(i.Character)
                end
                if jR._char_added then
                    pcall(
                        function()
                            jR._char_added:Disconnect()
                        end
                    )
                end
                jR._char_added =
                    i.CharacterAdded:Connect(
                    function(a3)
                        if g and g["Debug"] then
                            print("[SpeedHack] CharacterAdded")
                        end
                        kc(a3)
                    end
                )
                if jR._char_removing then
                    pcall(
                        function()
                            jR._char_removing:Disconnect()
                        end
                    )
                end
                jR._char_removing =
                    i.CharacterRemoving:Connect(
                    function()
                        if g and g["Debug"] then
                            print("[SpeedHack] CharacterRemoving")
                        end
                        jR.active = false
                        if g then
                            g["SpeedHack_Active"] = false
                        end
                        if a and a.update_dependencies then
                            a:update_dependencies()
                        end
                        k5()
                    end
                )
            end
            local kd = {enabled = false, active = false, connection = nil, options = {Speed = {Value = 1.5}}}
            local function ke(a0, bN, bO)
                local kf = B and B.Vector3 and B.Vector3.new or Vector3 and Vector3.new
                return kf and kf(a0, bN, bO) or nil
            end
            local function kg(es, state)
                if not es then
                    return
                end
                for bc, bg in ipairs(es:GetDescendants()) do
                    if bg:IsA("BasePart") then
                        if state then
                            if bg:GetAttribute("OriginalCollision") == nil then
                                bg:SetAttribute("OriginalCollision", bg.CanCollide)
                                bg:SetAttribute("OriginalTouch", bg.CanTouch)
                                bg:SetAttribute("OriginalQuery", bg.CanQuery)
                            end
                            bg.CanCollide, bg.CanTouch, bg.CanQuery = false, false, false
                        else
                            if bg:GetAttribute("OriginalCollision") ~= nil then
                                bg.CanCollide = bg:GetAttribute("OriginalCollision")
                                bg.CanTouch = bg:GetAttribute("OriginalTouch")
                                bg.CanQuery = bg:GetAttribute("OriginalQuery")
                                bg:SetAttribute("OriginalCollision", nil)
                                bg:SetAttribute("OriginalTouch", nil)
                                bg:SetAttribute("OriginalQuery", nil)
                            end
                        end
                    end
                end
            end
            local function kh()
                if kd.connection and kd.connection.Connected then
                    return
                end
                if not (B and B.run) then
                    return
                end
                kd.connection =
                    B.run.Stepped:Connect(
                    function()
                        if not (kd.enabled and kd.active) then
                            return
                        end
                        local a3 = i and i.Character
                        if not a3 then
                            return
                        end
                        kg(a3, true)
                        local bd = a3:FindFirstChild("HumanoidRootPart")
                        local aA = a3:FindFirstChildOfClass("Humanoid")
                        if not (bd and aA) then
                            return
                        end
                        local cV = (kd.options.Speed.Value or 1.5) * 50
                        local ki = ke(0, 0, 0)
                        local e4 = B and B.uis or game:GetService("UserInputService")
                        local kj = B and B.cam or workspace and workspace.CurrentCamera
                        if not e4 or not kj then
                            return
                        end
                        if e4:IsKeyDown(Enum.KeyCode.Space) then
                            ki = ki + ke(0, cV, 0)
                        end
                        if e4:IsKeyDown(Enum.KeyCode.LeftControl) then
                            ki = ki + ke(0, -cV, 0)
                        end
                        if e4:IsKeyDown(Enum.KeyCode.W) then
                            ki = ki + kj.CFrame.LookVector * cV
                        end
                        if e4:IsKeyDown(Enum.KeyCode.S) then
                            ki = ki + kj.CFrame.LookVector * -cV
                        end
                        if e4:IsKeyDown(Enum.KeyCode.D) then
                            ki = ki + kj.CFrame.RightVector * cV
                        end
                        if e4:IsKeyDown(Enum.KeyCode.A) then
                            ki = ki + kj.CFrame.RightVector * -cV
                        end
                        bd.Velocity = ki
                        pcall(
                            function()
                                aA:ChangeState(Enum.HumanoidStateType.Freefall)
                            end
                        )
                    end
                )
                if g and g["Debug"] then
                    print("[FlyHack] started")
                end
            end
            local function kk()
                if kd.connection then
                    pcall(
                        function()
                            if kd.connection.Connected then
                                kd.connection:Disconnect()
                            end
                        end
                    )
                    kd.connection = nil
                end
                local a3 = i and i.Character
                kg(a3, false)
                if a3 then
                    local bd = a3:FindFirstChild("HumanoidRootPart")
                    local aA = a3:FindFirstChildOfClass("Humanoid")
                    if bd then
                        bd.Velocity = ke(0, -2, 0)
                        local kl
                        kl =
                            (B and B.run and B.run.Stepped or game:GetService("RunService").Stepped):Connect(
                            function()
                                if not bd or not bd.Parent then
                                    if kl and kl.Connected then
                                        kl:Disconnect()
                                    end
                                    return
                                end
                                bd.Velocity = ke(0, bd.Velocity.Y, 0)
                                if kl and kl.Connected then
                                    kl:Disconnect()
                                end
                            end
                        )
                    end
                    if aA then
                        pcall(
                            function()
                                aA:ChangeState(Enum.HumanoidStateType.Landing)
                            end
                        )
                    end
                end
                if g and g["Debug"] then
                    print("[FlyHack] stopped")
                end
            end
            local function km()
                local a3 = i and i.Character
                kg(a3, false)
                if not a3 then
                    return
                end
                local bd = a3:FindFirstChild("HumanoidRootPart")
                local aA = a3:FindFirstChildOfClass("Humanoid")
                if bd then
                    pcall(
                        function()
                            bd.AssemblyLinearVelocity = ke(0, 0, 0)
                        end
                    )
                    pcall(
                        function()
                            bd.AssemblyAngularVelocity = ke(0, 0, 0)
                        end
                    )
                    bd.Velocity = ke(0, -2, 0)
                    local kl
                    kl =
                        (B and B.run and B.run.Stepped or game:GetService("RunService").Stepped):Connect(
                        function()
                            if not bd or not bd.Parent then
                                if kl and kl.Connected then
                                    kl:Disconnect()
                                end
                                return
                            end
                            local gV = bd.Velocity.Y
                            pcall(
                                function()
                                    bd.AssemblyLinearVelocity = ke(0, gV, 0)
                                end
                            )
                            bd.Velocity = ke(0, gV, 0)
                            if kl and kl.Connected then
                                kl:Disconnect()
                            end
                        end
                    )
                end
                if aA then
                    pcall(
                        function()
                            aA:ChangeState(Enum.HumanoidStateType.Landing)
                        end
                    )
                end
                if g and g["Debug"] then
                    print("[FlyHack] soft-stopped (keybind)")
                end
            end
            local kn =
                jQ:toggle(
                {name = "Flight", flag = "FlyHack_Toggle", default = false, callback = function(dy)
                        kd.enabled = dy
                        if dy then
                            kh()
                        else
                            kk()
                        end
                        if g and g["Debug"] then
                            print("[FlyHack] enabled:", dy)
                        end
                    end}
            )
            if g then
                g["FlyHack_Active"] = kd.active or false
            end
            local ko =
                kn:keybind(
                {name = "Flight", flag = "FlyHack_Keybind", default = "b", callback = function()
                        kd.active = not kd.active
                        if not kd.active then
                            km()
                        end
                        if g then
                            g["FlyHack_Active"] = kd.active
                        end
                        if a and a.update_dependencies then
                            a:update_dependencies()
                        end
                        if g and g["Debug"] then
                            print("[FlyHack] active:", kd.active)
                        end
                    end}
            )
            local kp = jQ:dependency_box()
            kp:setup_dependencies({{kn, true}})
            kp:textbox(
                {
                    name = "Spd",
                    flag = "FlyHack_Speed",
                    default = tostring(kd.options.Speed.Value or 1.5),
                    callback = function(cc)
                        local kq = tonumber(cc)
                        if kq then
                            kd.options.Speed.Value = kq
                        end
                    end
                }
            )
            local function kr(a3)
                if B and B.run then
                    B.run.Heartbeat:Wait()
                end
                kd.active = false
                if g then
                    g["FlyHack_Active"] = false
                end
                if a and a.update_dependencies then
                    a:update_dependencies()
                end
                kk()
                if kd.enabled then
                    kh()
                end
                local aA = a3 and a3:FindFirstChildOfClass("Humanoid")
                if aA then
                    if kd._died_conn then
                        pcall(
                            function()
                                kd._died_conn:Disconnect()
                            end
                        )
                    end
                    kd._died_conn =
                        aA.Died:Connect(
                        function()
                            if g and g["Debug"] then
                                print("[FlyHack] died -> reset active & stop")
                            end
                            kd.active = false
                            if g then
                                g["FlyHack_Active"] = false
                            end
                            if a and a.update_dependencies then
                                a:update_dependencies()
                            end
                            kk()
                        end
                    )
                end
            end
            if i then
                if i.Character then
                    kr(i.Character)
                end
                if kd._char_added then
                    pcall(
                        function()
                            kd._char_added:Disconnect()
                        end
                    )
                end
                kd._char_added =
                    i.CharacterAdded:Connect(
                    function(a3)
                        if g and g["Debug"] then
                            print("[FlyHack] CharacterAdded")
                        end
                        kr(a3)
                    end
                )
                if kd._char_removing then
                    pcall(
                        function()
                            kd._char_removing:Disconnect()
                        end
                    )
                end
                kd._char_removing =
                    i.CharacterRemoving:Connect(
                    function()
                        if g and g["Debug"] then
                            print("[FlyHack] CharacterRemoving")
                        end
                        kd.active = false
                        if g then
                            g["FlyHack_Active"] = false
                        end
                        if a and a.update_dependencies then
                            a:update_dependencies()
                        end
                        kk()
                    end
                )
            end
            do
                local ks = {
                    enabled = false,
                    distance = 100,
                    _conn = nil,
                    _char_added = nil,
                    _char_removing = nil,
                    _hbConn = nil
                }
                local function kt(bv)
                    local ku = bv.MaxForce
                    local v = bv.Velocity
                    local kv = math.abs(ku.X - 50000) < 1e-3 and math.abs(ku.Z - 50000) < 1e-3 and math.abs(ku.Y) < 1e-3
                    local kw = math.abs(v.Y) < 1e-3
                    return kv and kw
                end
                local function kx(js)
                    if not js then
                        return
                    end
                    local ky = js:FindFirstChild("HumanoidRootPart")
                    if not ky then
                        return
                    end
                    if ks._conn then
                        pcall(
                            function()
                                if ks._conn.Connected then
                                    ks._conn:Disconnect()
                                end
                            end
                        )
                    end
                    ks._conn =
                        ky.ChildAdded:Connect(
                        function(kz)
                            if not ks.enabled then
                                return
                            end
                            if not (kz and kz:IsA("BodyVelocity")) then
                                return
                            end
                            if not kt(kz) then
                                return
                            end
                            local kA = ky
                            local kB = kA.CFrame.LookVector
                            local kC = tonumber(ks.distance) or 100
                            pcall(
                                function()
                                    kz.Velocity = kB * kC
                                end
                            )
                        end
                    )
                end
                local function kD()
                    if ks._conn then
                        pcall(
                            function()
                                if ks._conn.Connected then
                                    ks._conn:Disconnect()
                                end
                            end
                        )
                        ks._conn = nil
                    end
                end
                if i then
                    if i.Character then
                        kx(i.Character)
                    end
                    if ks._char_added then
                        pcall(
                            function()
                                ks._char_added:Disconnect()
                            end
                        )
                    end
                    ks._char_added =
                        i.CharacterAdded:Connect(
                        function(ch)
                            kx(ch)
                        end
                    )
                    if ks._char_removing then
                        pcall(
                            function()
                                ks._char_removing:Disconnect()
                            end
                        )
                    end
                    ks._char_removing =
                        i.CharacterRemoving:Connect(
                        function()
                            kD()
                        end
                    )
                end
                local kE =
                    jQ:toggle(
                    {name = "SlideDist", flag = "SlideDist_Toggle", default = false, callback = function(state)
                            ks.enabled = state
                        end}
                )
                local bx = jQ:dependency_box()
                bx:setup_dependencies({{kE, true}})
                bx:slider(
                    {
                        name = "Dist",
                        flag = "SlideDist_Value",
                        min = 50,
                        max = 300,
                        default = ks.distance,
                        interval = 5,
                        callback = function(jx)
                            ks.distance = tonumber(jx) or ks.distance
                        end
                    }
                )
            end
            do
                local kF = B and B.workspace or workspace
                local kG = B and B.run or game:GetService("RunService")
                local kH = B and B.uis or game:GetService("UserInputService")
                local cn = B and (B.camera or B.cam) or kF and kF.CurrentCamera
                local kI =
                    B and B.RaycastParams and B.RaycastParams.new and B.RaycastParams.new() or RaycastParams.new()
                kI.RespectCanCollide = true
                local kJ = {
                    enabled = false,
                    connection = nil,
                    _ib = nil,
                    _ie = nil,
                    _died_conn = nil,
                    _char_added = nil,
                    _char_removing = nil,
                    shift_down = false,
                    active = false,
                    mode = "Velocity",
                    value = 20,
                    state_enabled = true,
                    truss = nil,
                    rp = kI
                }
                local function kK(kL)
                    if not kJ.truss then
                        local bP = Instance.new("TrussPart")
                        bP.Size = Vector3.new(2, 2, 2)
                        bP.Transparency = 1
                        bP.Anchored = true
                        kJ.truss = bP
                    end
                    kJ.truss.Parent = kJ.enabled and kL or nil
                end
                local function kM()
                    local bP = kJ.truss
                    if bP then
                        pcall(
                            function()
                                bP:Destroy()
                            end
                        )
                    end
                    kJ.truss = nil
                end
                local function kN()
                    if kJ.connection and kJ.connection.Connected then
                        return
                    end
                    local kO = kG and (kG.PreSimulation or kG.Stepped or kG.Heartbeat)
                    kJ.connection =
                        kO:Connect(
                        function(dW)
                            if not kJ.enabled then
                                return
                            end
                            local a3 = i and i.Character
                            local aA = a3 and a3:FindFirstChildOfClass("Humanoid")
                            local bw = a3 and a3:FindFirstChild("HumanoidRootPart")
                            if not (aA and bw) then
                                return
                            end
                            local kP = {cn, a3, kJ.truss}
                            if kJ.rp then
                                kJ.rp.FilterDescendantsInstances = kP
                                pcall(
                                    function()
                                        kJ.rp.CollisionGroup = bw.CollisionGroup
                                    end
                                )
                            end
                            local kQ =
                                kH and (kH:IsKeyDown(Enum.KeyCode.LeftShift) or kH:IsKeyDown(Enum.KeyCode.RightShift)) or
                                kJ.shift_down
                            if kQ then
                                kJ.active = false
                                return
                            end
                            if kJ.mode ~= "Climbing" then
                                local kR = aA.MoveDirection
                                if kR.Magnitude < 0.05 then
                                    kJ.active = false
                                    return
                                end
                                local co = bw.Position - Vector3.new(0, (aA.HipHeight or 2) - 0.5, 0)
                                local et = kR.Unit * 1
                                local jX = kF:Raycast(co, et, kJ.rp)
                                if kJ.active and not jX then
                                    pcall(
                                        function()
                                            local cc = bw.AssemblyLinearVelocity
                                            bw.AssemblyLinearVelocity = Vector3.new(cc.X, 0, cc.Z)
                                        end
                                    )
                                end
                                kJ.active = jX ~= nil
                                if kJ.active and jX.Normal.Y == 0 then
                                    if kJ.state_enabled then
                                        pcall(
                                            function()
                                                aA:ChangeState(Enum.HumanoidStateType.Climbing)
                                            end
                                        )
                                    end
                                    pcall(
                                        function()
                                            local ew = bw.AssemblyLinearVelocity
                                            bw.AssemblyLinearVelocity = Vector3.new(ew.X, 0, ew.Z)
                                        end
                                    )
                                    if kJ.mode == "CFrame" then
                                        bw.CFrame = bw.CFrame * CFrame.new(0, kJ.value * dW, 0)
                                    elseif kJ.mode == "Impulse" then
                                        bw:ApplyImpulse(Vector3.new(0, kJ.value, 0) * bw.AssemblyMass)
                                    else
                                        pcall(
                                            function()
                                                local ew = bw.AssemblyLinearVelocity
                                                bw.AssemblyLinearVelocity = ew + Vector3.new(0, kJ.value, 0)
                                            end
                                        )
                                    end
                                end
                            else
                                local co = bw.Position - Vector3.new(0, (aA.HipHeight or 2) - 0.5, 0)
                                local et = bw.CFrame.LookVector * 1
                                local jX = kF:Raycast(co, et, kJ.rp)
                                if jX and not kQ then
                                    kK(cn)
                                    local bh = jX.Position - jX.Normal * 0.9
                                    kJ.truss.Position = bh or Vector3.new(0, 0, 0)
                                else
                                    if kJ.truss then
                                        kJ.truss.Position = Vector3.new(0, 0, 0)
                                    end
                                end
                            end
                        end
                    )
                    if not (kJ._ib and kJ._ib.Connected) then
                        kJ._ib =
                            kH.InputBegan:Connect(
                            function(f0, kS)
                                if kS then
                                    return
                                end
                                if f0.KeyCode == Enum.KeyCode.LeftShift or f0.KeyCode == Enum.KeyCode.RightShift then
                                    kJ.shift_down = true
                                end
                            end
                        )
                    end
                    if not (kJ._ie and kJ._ie.Connected) then
                        kJ._ie =
                            kH.InputEnded:Connect(
                            function(f0)
                                if f0.KeyCode == Enum.KeyCode.LeftShift or f0.KeyCode == Enum.KeyCode.RightShift then
                                    kJ.shift_down = false
                                end
                            end
                        )
                    end
                    if kJ.mode == "Climbing" then
                        kK(cn)
                    else
                        kM()
                    end
                end
                local function kT()
                    if kJ.connection then
                        pcall(
                            function()
                                if kJ.connection.Connected then
                                    kJ.connection:Disconnect()
                                end
                            end
                        )
                        kJ.connection = nil
                    end
                    if kJ._ib then
                        pcall(
                            function()
                                kJ._ib:Disconnect()
                            end
                        )
                        kJ._ib = nil
                    end
                    if kJ._ie then
                        pcall(
                            function()
                                kJ._ie:Disconnect()
                            end
                        )
                        kJ._ie = nil
                    end
                    if kJ._died_conn then
                        pcall(
                            function()
                                kJ._died_conn:Disconnect()
                            end
                        )
                        kJ._died_conn = nil
                    end
                    kJ.shift_down = false
                    kJ.active = false
                    kM()
                end
                local kU =
                    jQ:toggle(
                    {name = "Spider", flag = "Spider_Toggle", default = false, callback = function(cc)
                            kJ.enabled = cc
                            if cc then
                                kN()
                            else
                                kT()
                            end
                            if a and a.update_dependencies then
                                a:update_dependencies()
                            end
                        end}
                )
                local kV = jQ:dependency_box()
                kV:setup_dependencies({{kU, true}})
                kV:dropdown(
                    {
                        name = "Mode",
                        flag = "Spider_Mode",
                        items = {"Velocity", "Impulse", "CFrame", "Climbing"},
                        default = kJ.mode,
                        callback = function(dy)
                            kJ.mode = dy
                            local kW = dy ~= "Climbing"
                            if g then
                                g["Spider_ShowControls"] = kW
                            end
                            if kJ.enabled then
                                if dy == "Climbing" then
                                    kK(cn)
                                else
                                    kM()
                                end
                            end
                            if a and a.update_dependencies then
                                a:update_dependencies()
                            end
                        end
                    }
                )
                if g and g["Spider_ShowControls"] == nil then
                    g["Spider_ShowControls"] = true
                end
                local kX = jQ:dependency_box()
                kX:setup_dependencies({{kU, true}, {"Spider_ShowControls", true}})
                kX:slider(
                    {
                        name = "Val",
                        flag = "Spider_Val",
                        min = 1,
                        max = 100,
                        default = kJ.value,
                        decimals = 0,
                        callback = function(dy)
                            kJ.value = dy
                        end
                    }
                )
                kX:toggle(
                    {name = "State", flag = "Spider_State", default = kJ.state_enabled, callback = function(cc)
                            kJ.state_enabled = cc
                        end}
                )
                local function kY(a3)
                    if kG and kG.Heartbeat then
                        kG.Heartbeat:Wait()
                    end
                    kT()
                    if kJ.enabled then
                        kN()
                    end
                    local aA = a3 and a3:FindFirstChildOfClass("Humanoid")
                    if aA then
                        if kJ._died_conn then
                            pcall(
                                function()
                                    kJ._died_conn:Disconnect()
                                end
                            )
                        end
                        kJ._died_conn =
                            aA.Died:Connect(
                            function()
                                kT()
                            end
                        )
                    end
                end
                if i then
                    if i.Character then
                        kY(i.Character)
                    end
                    if kJ._char_added then
                        pcall(
                            function()
                                kJ._char_added:Disconnect()
                            end
                        )
                    end
                    kJ._char_added =
                        i.CharacterAdded:Connect(
                        function(a3)
                            kY(a3)
                        end
                    )
                    if kJ._char_removing then
                        pcall(
                            function()
                                kJ._char_removing:Disconnect()
                            end
                        )
                    end
                    kJ._char_removing =
                        i.CharacterRemoving:Connect(
                        function()
                            kT()
                        end
                    )
                end
            end
            do
                local kF = B and B.workspace or workspace
                local kG = B and B.run or game:GetService("RunService")
                local function ke(a0, bN, bO)
                    local kf = B and B.Vector3 and B.Vector3.new or Vector3 and Vector3.new
                    return kf and kf(a0, bN, bO) or nil
                end
                local kZ = {
                    enabled = false,
                    mode = "Workspace",
                    value = 196.2,
                    connection = nil,
                    prop_conn = nil,
                    changed = false,
                    original = nil
                }
                local function k_(l0)
                    pcall(
                        function()
                            if l0 and l0.Connected then
                                l0:Disconnect()
                            end
                        end
                    )
                end
                local function l1(dy)
                    if not kF then
                        return
                    end
                    kZ.changed = true
                    kF.Gravity = dy
                    kZ.changed = false
                end
                local function l2()
                    if not (kG and kF) then
                        return
                    end
                    if kZ.original == nil then
                        kZ.original = kF.Gravity
                    end
                    k_(kZ.connection)
                    kZ.connection = nil
                    k_(kZ.prop_conn)
                    kZ.prop_conn = nil
                    if kZ.mode == "Workspace" then
                        l1(kZ.value)
                        kZ.prop_conn =
                            kF:GetPropertyChangedSignal("Gravity"):Connect(
                            function()
                                if kZ.changed then
                                    return
                                end
                                l1(kZ.value)
                            end
                        )
                    else
                        local kO = kG.PreSimulation or kG.Stepped
                        kZ.connection =
                            kO:Connect(
                            function(dW)
                                if not kZ.enabled then
                                    return
                                end
                                local a3 = i and i.Character
                                local aA = a3 and a3:FindFirstChildOfClass("Humanoid")
                                local bw = a3 and a3:FindFirstChild("HumanoidRootPart")
                                if not (aA and bw) then
                                    return
                                end
                                if aA.FloorMaterial == Enum.Material.Air then
                                    local gO = kF.Gravity - kZ.value
                                    if kZ.mode == "Impulse" then
                                        bw:ApplyImpulse(ke(0, dW * gO, 0) * bw.AssemblyMass)
                                    else
                                        local l3 = ke(0, dW * gO, 0)
                                        pcall(
                                            function()
                                                bw.AssemblyLinearVelocity = bw.AssemblyLinearVelocity + l3
                                            end
                                        )
                                    end
                                end
                            end
                        )
                    end
                end
                local function l4()
                    k_(kZ.connection)
                    kZ.connection = nil
                    k_(kZ.prop_conn)
                    kZ.prop_conn = nil
                    if kZ.original ~= nil and kF then
                        pcall(
                            function()
                                kF.Gravity = kZ.original
                            end
                        )
                    end
                end
                local l5 =
                    jQ:toggle(
                    {name = "Gravity", flag = "Gravity_Toggle", default = false, callback = function(dy)
                            kZ.enabled = dy
                            if dy then
                                l2()
                            else
                                l4()
                            end
                        end}
                )
                local l6 = jQ:dependency_box()
                l6:setup_dependencies({{l5, true}})
                l6:dropdown(
                    {
                        name = "Mode",
                        flag = "Gravity_Mode",
                        items = {"Workspace", "Impulse", "LinearVelocity"},
                        default = "Workspace",
                        callback = function(cc)
                            kZ.mode = cc
                            if kZ.enabled then
                                l4()
                                l2()
                            end
                        end
                    }
                )
                l6:slider(
                    {
                        name = "Grv",
                        flag = "Gravity_Value",
                        min = 0,
                        max = 400,
                        default = 196.2,
                        decimals = 1,
                        callback = function(dy)
                            kZ.value = dy
                            if kZ.enabled and kZ.mode == "Workspace" then
                                l1(kZ.value)
                            end
                        end
                    }
                )
            end
            do
                local l7 = {enabled = false, connection = nil, min = 16}
                local l8 =
                    jQ:toggle(
                    {
                        name = "NoSlow",
                        flag = "NoSlow_Toggle",
                        default = false,
                        callback = function(dy)
                            l7.enabled = dy
                            if dy then
                                local l9 = B and B.rs or game:GetService("RunService")
                                if not (l7.connection and l7.connection.Connected) then
                                    l7.connection =
                                        l9.Heartbeat:Connect(
                                        function()
                                            local a3 = i and i.Character
                                            if not a3 then
                                                return
                                            end
                                            local aA = a3:FindFirstChildOfClass("Humanoid")
                                            if not aA then
                                                return
                                            end
                                            local bw = aA.RootPart or a3:FindFirstChild("HumanoidRootPart")
                                            if not bw then
                                                return
                                            end
                                            local cp = aA.MoveDirection
                                            if cp.Magnitude > 0 then
                                                local ew = bw.AssemblyLinearVelocity
                                                local la = Vector3.new(ew.X, 0, ew.Z).Magnitude
                                                if la + 1e-3 < l7.min then
                                                    local lb = cp.Unit
                                                    bw.AssemblyLinearVelocity =
                                                        Vector3.new(lb.X * l7.min, ew.Y, lb.Z * l7.min)
                                                end
                                            end
                                        end
                                    )
                                end
                            else
                                if l7.connection then
                                    pcall(
                                        function()
                                            l7.connection:Disconnect()
                                        end
                                    )
                                    l7.connection = nil
                                end
                            end
                        end
                    }
                )
            end
            do
                local kH = B and B.uis or game:GetService("UserInputService")
                local kG = B and B.run or game:GetService("RunService")
                local kF = B and B.workspace or workspace
                local lc = {enabled = false, mode = "Velocity", power = 50, connection = nil}
                local function ld()
                    local a3 = i and i.Character
                    local aA = a3 and a3:FindFirstChildOfClass("Humanoid")
                    if not aA then
                        return
                    end
                    local state = aA:GetState()
                    if state ~= Enum.HumanoidStateType.Running and state ~= Enum.HumanoidStateType.Landed then
                        return
                    end
                    local le = tonumber(lc.power) or 50
                    pcall(
                        function()
                            if aA.UseJumpPower ~= false then
                                aA.JumpPower = le
                            else
                                aA.JumpHeight = math.max(1, le / 7)
                            end
                            aA:ChangeState(Enum.HumanoidStateType.Jumping)
                        end
                    )
                end
                local function lf()
                    if lc.connection and lc.connection.Connected then
                        return
                    end
                    lc.connection =
                        kG.RenderStepped:Connect(
                        function()
                            if not lc.enabled then
                                return
                            end
                            if kH:GetFocusedTextBox() then
                                return
                            end
                            if kH:IsKeyDown(Enum.KeyCode.Space) then
                                ld()
                            end
                        end
                    )
                end
                local function lg()
                    if lc.connection then
                        pcall(
                            function()
                                if lc.connection.Connected then
                                    lc.connection:Disconnect()
                                end
                            end
                        )
                        lc.connection = nil
                    end
                end
                local lh =
                    jQ:toggle(
                    {name = "HighJump", flag = "HighJump_Toggle", default = false, callback = function(cc)
                            lc.enabled = cc
                            if cc then
                                lf()
                            else
                                lg()
                            end
                            if a and a.update_dependencies then
                                a:update_dependencies()
                            end
                        end}
                )
                local li = jQ:dependency_box()
                li:setup_dependencies({{lh, true}})
                li:dropdown(
                    {
                        name = "Mode",
                        flag = "HighJump_Mode",
                        items = {"Impulse", "Velocity", "CFrame", "Instant"},
                        default = lc.mode,
                        callback = function(dy)
                            lc.mode = dy
                        end
                    }
                )
                li:textbox(
                    {name = "Pwr", flag = "HighJump_Power", default = tostring(lc.power), callback = function(fO)
                            local kq = tonumber(fO)
                            if not kq then
                                return
                            end
                            if kq < 1 then
                                kq = 1
                            end
                            if kq > 300 then
                                kq = 300
                            end
                            lc.power = kq
                        end}
                )
            end
            do
                local lj = {enabled = false, hooked = false, old = nil, conn = nil, baselineJP = nil, baselineJH = nil}
                local function lk()
                    local dG, ll =
                        pcall(
                        function()
                            return game and game.IsLoaded and (game.IsLoaded(game) or game:IsLoaded())
                        end
                    )
                    if not dG or not ll then
                        pcall(
                            function()
                                if game and game.Loaded then
                                    if game.Loaded.Wait then
                                        game.Loaded.Wait(game.Loaded)
                                    else
                                        game.Loaded:Wait()
                                    end
                                end
                            end
                        )
                    end
                end
                local function lm()
                    if lj.hooked then
                        return
                    end
                    if type(hookmetamethod) ~= "function" then
                        return
                    end
                    local ln =
                        game and game.IsA or
                        function(ci, lo)
                            local dG, lp =
                                pcall(
                                function()
                                    return ci and ci.IsA and ci:IsA(lo)
                                end
                            )
                            return dG and lp or false
                        end
                    local lq
                    local function lr(self, ls, lt)
                        local lu = false
                        if type(checkcaller) == "function" then
                            lu = not checkcaller()
                        end
                        if lj.enabled and lu and ls == "JumpPower" and ln(self, "Humanoid") then
                            return
                        end
                        if not lq then
                            return
                        end
                        return lq(self, ls, lt)
                    end
                    local lv = type(newcclosure) == "function" and newcclosure(lr) or lr
                    local dG, lw =
                        pcall(
                        function()
                            return hookmetamethod(game, "__newindex", lv)
                        end
                    )
                    if dG and lw then
                        lq = lw
                        lj.old = lw
                        lj.hooked = true
                    end
                end
                local function lx()
                    local l9 = B and B.rs or game:GetService("RunService")
                    if lj.conn and lj.conn.Connected then
                        return
                    end
                    lj.conn =
                        l9.Heartbeat:Connect(
                        function()
                            local a3 = i and i.Character
                            if not a3 then
                                return
                            end
                            local aA = a3:FindFirstChildOfClass("Humanoid")
                            if not aA then
                                return
                            end
                            if not lj.baselineJP then
                                lj.baselineJP = tonumber(aA.JumpPower) or 50
                            end
                            if not lj.baselineJH then
                                lj.baselineJH = tonumber(aA.JumpHeight) or 7.2
                            end
                            local ly =
                                pcall(
                                function()
                                    if aA.UseJumpPower ~= false then
                                        if aA.JumpPower < lj.baselineJP then
                                            aA.JumpPower = lj.baselineJP
                                        end
                                    else
                                        if aA.JumpHeight < lj.baselineJH then
                                            aA.JumpHeight = lj.baselineJH
                                        end
                                    end
                                end
                            )
                            if not ly then
                                return
                            end
                        end
                    )
                end
                local function lz()
                    if lj.conn then
                        pcall(
                            function()
                                lj.conn:Disconnect()
                            end
                        )
                        lj.conn = nil
                    end
                end
                local lA =
                    jQ:toggle(
                    {name = "NoJumpCooldown", flag = "NoJumpCooldown_Toggle", default = false, callback = function(dy)
                            lj.enabled = dy
                            if dy then
                                lk()
                                lm()
                                if not lj.hooked then
                                    lx()
                                else
                                    lz()
                                end
                            else
                                lz()
                            end
                        end}
                )
            end
            do
                local kG = B and B.run or game:GetService("RunService")
                local lB = {enabled = false, connection = nil, mode = "Velocity", value = 10}
                if lB.mode ~= "CFrame" and lB.mode ~= "Velocity" then
                    lB.mode = "Velocity"
                end
                local function lC()
                    if lB.connection and lB.connection.Connected then
                        return
                    end
                    local kO = kG and (kG.PreSimulation or kG.Stepped or kG.Heartbeat)
                    lB.connection =
                        kO:Connect(
                        function(dW)
                            if not lB.enabled then
                                return
                            end
                            local a3 = i and i.Character
                            local aA = a3 and a3:FindFirstChildOfClass("Humanoid")
                            local bw = a3 and a3:FindFirstChild("HumanoidRootPart")
                            if not (aA and bw) then
                                return
                            end
                            if aA.FloorMaterial ~= Enum.Material.Air then
                                return
                            end
                            local kR = aA.MoveDirection
                            if kR.Magnitude < 0.05 then
                                return
                            end
                            local cp = Vector3.new(kR.X, 0, kR.Z)
                            if cp.Magnitude <= 0 then
                                return
                            end
                            cp = cp.Unit
                            if lB.mode == "CFrame" then
                                bw.CFrame = bw.CFrame + cp * lB.value * (dW or 0) * 10
                            else
                                pcall(
                                    function()
                                        local cc = bw.AssemblyLinearVelocity
                                        local lD = Vector3.new(cc.X, 0, cc.Z)
                                        local ap = math.max(lD.Magnitude, (aA and aA.WalkSpeed or 16) + lB.value * 3)
                                        local lE = cp * ap
                                        bw.AssemblyLinearVelocity = Vector3.new(lE.X, cc.Y, lE.Z)
                                    end
                                )
                            end
                        end
                    )
                end
                local function lF()
                    if lB.connection then
                        pcall(
                            function()
                                if lB.connection.Connected then
                                    lB.connection:Disconnect()
                                end
                            end
                        )
                        lB.connection = nil
                    end
                end
                local lG =
                    jQ:toggle(
                    {name = "Strafe", flag = "Strafe_Toggle", default = false, callback = function(cc)
                            lB.enabled = cc
                            if cc then
                                lC()
                            else
                                lF()
                            end
                            if a and a.update_dependencies then
                                a:update_dependencies()
                            end
                        end}
                )
                local lH = jQ:dependency_box()
                lH:setup_dependencies({{lG, true}})
                lH:dropdown(
                    {
                        name = "Mode",
                        flag = "Strafe_Mode",
                        items = {"CFrame", "Velocity"},
                        default = lB.mode,
                        callback = function(dy)
                            lB.mode = dy
                        end
                    }
                )
                lH:slider(
                    {
                        name = "Str",
                        flag = "Strafe_Strength",
                        min = 1,
                        max = 20,
                        default = 10,
                        decimals = 0,
                        callback = function(dy)
                            lB.value = dy
                        end
                    }
                )
            end
        end
        do
            local lI = u:column()
            local lJ = lI:section({name = "Stuff"})
            local lK = {
                enabled = false,
                delay = 4,
                type = "Toxic",
                loop = nil,
                filter_installed = false,
                prev_filter = nil,
                _msgset = nil
            }
            local lL = {
                Toxic = {
                    "you're trash, a newbie could do better",
                    "imagine dying",
                    "oops i forgot you were there, oh wait you don't even exist",
                    "ez ez you got clapped by a low level",
                    "why are you dying to me bro fr fr",
                    "clapped by Rebuild user",
                    "bro got clapped lol",
                    "imagine being fatherless, go check where yours are",
                    "sorry did my target aim hit you? if so you're trash",
                    "bro got skill issues",
                    "bozo can't even beat me",
                    "are you serious rn",
                    "ez bozo",
                    "your dad never came back from the milk store for a reason",
                    "did your mother drop you when you were born",
                    "you really need a therapist",
                    "you should go back to kindergarten bro",
                    "i'm just better than you"
                },
                Ad = {
                    "Rebuild > u",
                    "Rebuild owns you",
                    "get good get Rebuild",
                    "stop crying and get Rebuild",
                    "get Rebuild right now bro",
                    "get your aim up and get Rebuild",
                    "stop complaining and get Rebuild",
                    "Rebuild > your career",
                    "yes i know Rebuild is the best",
                    "Rebuild has more features than your grandmother",
                    "get better dude",
                    "bro just get Rebuild lol",
                    "yo 12 year old get Rebuild",
                    "Rebuild on top fr fr",
                    "Rebuild better than you smh smh smh"
                },
                Freak = {
                    "wenomechainsama tumajarbisaun",
                    "roll the ops on me then",
                    "wdym touch grass i have one of those on my feet",
                    "fortnite $19 gift card who wants it",
                    "who are you talking to? a kill say bot?",
                    "cheap microwave",
                    "i like bricks",
                    "what's up 'hackle cheatle' here guys, i've been arrested for multiple crimes including cheating",
                    "🤓: stop hacking! it's against the rules!",
                    "🤓: you can't just exploit here, it's illegal"
                }
            }
            local function lM()
                local lN = {}
                local lO = lL[lK.type] or {}
                for bc, c3 in ipairs(lO) do
                    lN[string.lower(c3)] = true
                end
                lK._msgset = lN
            end
            local function lP()
                local dG, lQ =
                    pcall(
                    function()
                        return game:GetService("TextChatService")
                    end
                )
                if not dG or not lQ then
                    return nil, nil
                end
                local lR = lQ:FindFirstChild("TextChannels")
                local lS = lR and lR:FindFirstChild("RBXGeneral")
                if not lS then
                    pcall(
                        function()
                            lR = lQ:WaitForChild("TextChannels", 2)
                            lS = lR and lR:WaitForChild("RBXGeneral", 2)
                        end
                    )
                end
                return lQ, lS
            end
            local function lT()
                if lK.filter_installed then
                    return
                end
                local lQ = select(1, lP())
                if not lQ then
                    return
                end
                lK.prev_filter = lQ.OnIncomingMessage
                lQ.OnIncomingMessage = function(bu)
                    local i = game:GetService("Players").LocalPlayer
                    local lU = false
                    if lK.hide_local and bu and bu.TextSource and i and bu.TextSource.UserId == i.UserId then
                        local lV = string.lower(tostring(bu.Text or ""))
                        if lK._msgset and lK._msgset[lV] then
                            lU = true
                        end
                    end
                    if lU then
                        return Enum.TextChatMessageStatus.Hidden
                    end
                    if lK.prev_filter then
                        local dG, lp = pcall(lK.prev_filter, bu)
                        if dG and lp ~= nil then
                            return lp
                        end
                    end
                    return Enum.TextChatMessageStatus.Displayed
                end
                lK.filter_installed = true
            end
            local function lW()
                local lQ = select(1, lP())
                if not lQ then
                    return
                end
                if lK.filter_installed then
                    lQ.OnIncomingMessage = lK.prev_filter
                    lK.prev_filter = nil
                    lK.filter_installed = false
                end
            end
            local function lX(fO)
                local lQ, lY = lP()
                if lY and lY.SendAsync then
                    pcall(
                        function()
                            lY:SendAsync(fO)
                        end
                    )
                    return
                end
                local l9 = game:GetService("ReplicatedStorage")
                local lZ = l9:FindFirstChild("DefaultChatSystemChatEvents")
                local l_ = lZ and lZ:FindFirstChild("SayMessageRequest")
                if l_ then
                    pcall(
                        function()
                            l_:FireServer(fO, "All")
                        end
                    )
                end
            end
            local function m0()
                if lK.loop then
                    return
                end
                lM()
                if lK.hide_local then
                    lT()
                end
                local m1 = B and B.task or task
                local m2 = B and B.math or math
                lK.loop =
                    m1.spawn(
                    function()
                        while lK.enabled do
                            local lO = lL[lK.type] or {}
                            if #lO > 0 then
                                local m3 = m2.random(1, #lO)
                                local bu = lO[m3]
                                if lK.hide_local and lK._msgset then
                                    lK._msgset[string.lower(bu)] = true
                                end
                                lX(bu)
                            end
                            local br = tonumber(lK.delay) or 4
                            m1.wait(m2.max(2, m2.min(br, 10)))
                        end
                    end
                )
            end
            local function m4()
                if lK.loop then
                    pcall(
                        function()
                            (B and B.task or task).cancel(lK.loop)
                        end
                    )
                    lK.loop = nil
                end
                lW()
            end
            local m5 =
                lJ:toggle(
                {name = "Enabled", flag = "ChatSpammer_Toggle", default = false, callback = function(cc)
                        lK.enabled = cc
                        if cc then
                            m0()
                        else
                            m4()
                        end
                        if a and a.update_dependencies then
                            a:update_dependencies()
                        end
                    end}
            )
            local m6 = lJ:dependency_box()
            m6:setup_dependencies({{m5, true}})
            m6:dropdown(
                {
                    name = "Type",
                    flag = "ChatSpammer_Type",
                    items = {"Toxic", "Ad", "Freak"},
                    default = lK.type,
                    callback = function(dy)
                        lK.type = dy
                        lM()
                    end
                }
            )
            m6:slider(
                {
                    name = "Dly",
                    flag = "ChatSpammer_Delay",
                    min = 2,
                    max = 10,
                    default = 4,
                    decimals = 0,
                    callback = function(dy)
                        lK.delay = dy
                    end
                }
            )
            local m7 = {enabled = false, saved_height = nil}
            do
                local dG, kF =
                    pcall(
                    function()
                        return game:GetService("Workspace")
                    end
                )
                if dG and kF then
                    m7.saved_height = kF.FallenPartsDestroyHeight
                end
            end
            local function m8(bj)
                local dG, kF =
                    pcall(
                    function()
                        return game:GetService("Workspace")
                    end
                )
                if not (dG and kF) then
                    return
                end
                if bj then
                    if m7.saved_height == nil then
                        m7.saved_height = kF.FallenPartsDestroyHeight
                    end
                    kF.FallenPartsDestroyHeight = -math.huge
                else
                    if m7.saved_height ~= nil then
                        kF.FallenPartsDestroyHeight = m7.saved_height
                    end
                end
            end
            do
                local function m9()
                    local dG, kF =
                        pcall(
                        function()
                            return game:GetService("Workspace")
                        end
                    )
                    if dG and kF and m7 and m7.enabled then
                        pcall(
                            function()
                                if m7.saved_height ~= nil then
                                    kF.FallenPartsDestroyHeight = m7.saved_height
                                end
                            end
                        )
                    end
                end
                if a and a.connections and type(a.connections) == "table" then
                    table.insert(a.connections, {Disconnect = m9})
                end
            end
            lJ:toggle(
                {name = "AntiVoid", flag = "AntiVoid_Toggle", default = false, callback = function(cc)
                        m7.enabled = cc
                        m8(cc)
                        if a and a.update_dependencies then
                            a:update_dependencies()
                        end
                    end}
            )
            local ma = {enabled = false, method = "CframeFling", health = 20, conn = nil}
            do
                if ma.method ~= "CframeFling" and ma.method ~= "VelocityFling" then
                    ma.method = "CframeFling"
                end
            end
            local function mb()
                if ma.conn then
                    pcall(
                        function()
                            ma.conn:Disconnect()
                        end
                    )
                    ma.conn = nil
                end
            end
            do
                if a and a.connections and type(a.connections) == "table" then
                    table.insert(a.connections, {Disconnect = mb})
                end
            end
            local function mc()
                mb()
                local md, l9 =
                    pcall(
                    function()
                        return game:GetService("RunService")
                    end
                )
                if not md or not l9 then
                    return
                end
                ma.conn =
                    l9.Stepped:Connect(
                    function()
                        local me, mf =
                            pcall(
                            function()
                                return game:GetService("Players")
                            end
                        )
                        if not me or not mf then
                            return
                        end
                        local i = mf.LocalPlayer
                        local a3 = i and i.Character
                        local aA = a3 and a3:FindFirstChildOfClass("Humanoid")
                        if not aA then
                            return
                        end
                        if aA.Health <= ma.health then
                            local k4 = ma.method
                            if k4 ~= "CframeFling" and k4 ~= "VelocityFling" then
                                k4 = "CframeFling"
                                ma.method = k4
                            end
                            if k4 == "CframeFling" then
                                for bc, cc in ipairs(a3:GetChildren()) do
                                    if cc:IsA("MeshPart") or cc:IsA("Part") then
                                        pcall(
                                            function()
                                                cc.CFrame =
                                                    cc.CFrame *
                                                    CFrame.fromEulerAnglesXYZ(math.rad(35), math.rad(35), math.rad(35)) *
                                                    CFrame.new(0, 50, 0)
                                                cc.CFrame =
                                                    cc.CFrame *
                                                    CFrame.fromEulerAnglesXYZ(
                                                        math.rad(-35),
                                                        math.rad(20),
                                                        math.rad(-15)
                                                    ) *
                                                    CFrame.new(0, 50, 0)
                                            end
                                        )
                                    end
                                end
                            elseif k4 == "VelocityFling" then
                                local bd = a3:FindFirstChild("HumanoidRootPart")
                                if bd then
                                    local mg = Vector3.new(1e5, 1e5, 1e5)
                                    pcall(
                                        function()
                                            bd.Velocity, bd.AssemblyLinearVelocity = mg, mg
                                            bd.RotVelocity = Vector3.new(0, 1e4, 0)
                                            bd.AssemblyAngularVelocity = Vector3.new(0, 1e4, 0)
                                        end
                                    )
                                end
                            end
                        end
                    end
                )
            end
            local function mh(cc)
                ma.enabled = cc
                if cc then
                    mc()
                else
                    mb()
                end
            end
            local mi =
                lJ:toggle(
                {name = "AntiStomp", flag = "AntiStomp_Toggle", default = false, callback = function(cc)
                        mh(cc)
                        if a and a.update_dependencies then
                            a:update_dependencies()
                        end
                    end}
            )
            local mj = lJ:dependency_box()
            mj:setup_dependencies({{mi, true}})
            mj:dropdown(
                {
                    name = "Mode",
                    flag = "AntiStomp_Mode",
                    items = {"CframeFling", "VelocityFling"},
                    default = ma.method,
                    callback = function(dy)
                        ma.method = dy
                    end
                }
            )
            mj:slider(
                {
                    name = "HP",
                    flag = "AntiStomp_HP",
                    min = 1,
                    max = 100,
                    default = ma.health,
                    decimals = 0,
                    callback = function(dy)
                        ma.health = dy
                    end
                }
            )
            local mk = {enabled = false, conn = nil, bin = {}}
            local function ml()
                if mk.conn then
                    pcall(
                        function()
                            mk.conn:Disconnect()
                        end
                    )
                    mk.conn = nil
                end
            end
            local function mm(state)
                local mn, mo =
                    pcall(
                    function()
                        return game
                    end
                )
                if not mn or not mo then
                    return
                end
                if state then
                    local mp = mo:GetDescendants()
                    for cY = 1, #mp do
                        local ci = mp[cY]
                        if ci and (ci.ClassName == "Seat" or ci.ClassName == "VehicleSeat") then
                            if ci.Parent ~= nil and mk.bin[ci] == nil then
                                local mq, mr =
                                    pcall(
                                    function()
                                        return ci.Parent
                                    end
                                )
                                if mq and mr then
                                    mk.bin[ci] = mr
                                    pcall(
                                        function()
                                            ci.Parent = nil
                                        end
                                    )
                                end
                            end
                        end
                    end
                else
                    for fk, mr in pairs(mk.bin) do
                        if fk then
                            pcall(
                                function()
                                    fk.Parent = mr
                                end
                            )
                        end
                    end
                    mk.bin = {}
                end
            end
            local function ms(bj)
                mk.enabled = bj
                if bj then
                    mm(true)
                    local mn, mo =
                        pcall(
                        function()
                            return game
                        end
                    )
                    if mn and mo then
                        ml()
                        mk.conn =
                            mo.DescendantAdded:Connect(
                            function(ci)
                                if not mk.enabled then
                                    return
                                end
                                if ci and (ci.ClassName == "Seat" or ci.ClassName == "VehicleSeat") then
                                    if ci.Parent ~= nil and mk.bin[ci] == nil then
                                        local mq, mr =
                                            pcall(
                                            function()
                                                return ci.Parent
                                            end
                                        )
                                        if mq and mr then
                                            mk.bin[ci] = mr
                                            pcall(
                                                function()
                                                    ci.Parent = nil
                                                end
                                            )
                                        end
                                    end
                                end
                            end
                        )
                    end
                else
                    ml()
                    mm(false)
                end
            end
            do
                if a and a.connections and type(a.connections) == "table" then
                    table.insert(
                        a.connections,
                        {Disconnect = function()
                                ml()
                                if mk and mk.enabled then
                                    mm(false)
                                end
                            end}
                    )
                end
            end
            local mt =
                lJ:toggle(
                {name = "AntiSeats", flag = "AntiSeats_Toggle", default = false, callback = function(cc)
                        ms(cc)
                        if a and a.update_dependencies then
                            a:update_dependencies()
                        end
                    end}
            )
            local mu = {enabled = false, bin = {}}
            local function mv(state)
                local mw, kF =
                    pcall(
                    function()
                        return game:GetService("Workspace")
                    end
                )
                if not mw or not kF then
                    return
                end
                local mx, my = {}, {}
                local function l3(fk)
                    if fk and typeof(fk) == "Instance" and not my[fk] then
                        my[fk] = true
                        mx[#mx + 1] = fk
                    end
                end
                local mz = {
                    "Donation Board by @DaaalzYT",
                    " [Spit] - R$150 (READ DESC)",
                    "[Spawn With AimViewer] - R$60",
                    "[Char Command] - R$50 READ DESCRIPTION",
                    "[Emoji \226\152\128 - R$59",
                    "[Emoji \240\159\143\150 - R$59",
                    "[Emoji \240\159\170\129 - R$75",
                    "[Emoji \240\159\165\165 - R$85",
                    "[Emoji \240\159\144\172] - R$35",
                    "[Emoji \240\159\165\189] - R$35",
                    "[Emoji \240\159\141\168 - R$60",
                    "[Emoji \240\159\146\142] - R$100",
                    "[Emoji \240\159\142\175] - R$60",
                    "[10 streaks tags] - R$275",
                    "[streak tag] - R$40",
                    "[10 stomp effects] - R$325",
                    "[stomp effect] - R$45",
                    "[Emoji \240\159\146\184] - R$100",
                    "[Emoji \240\159\141\128] - R$60",
                    "[Emoji - [\240\159\140\184] - R75]",
                    "[Emoji \240\159\146\165] - R$20",
                    "[Emoji \240\159\145\145] - R$400",
                    "[Emoji \226\155\177] - R$55 ",
                    "[Spawn With Mask] - R$70",
                    "[Spawn With Shotgun] - R$85",
                    "[Spawn With TacticalSG] - R$115",
                    "[Spawn With Armor] - R$100",
                    "StandForLimitedKnives",
                    "StandForLimitedFood",
                    "Gun Stand",
                    "Osiris Scythe -- 299R$ (Limited Stock)",
                    "UmbrellaColor2",
                    "UmbrellaColor1",
                    "UmbrellaStick",
                    "Mesh_0",
                    "WashingMachineFUNC",
                    "bush"
                }
                for cY = 1, #mz do
                    local ci = kF:FindFirstChild(mz[cY])
                    if ci then
                        l3(ci)
                    end
                end
                local bB = kF:GetChildren()
                local m3 = {159, 140, 628, 164, 575, 1462, 576, 569, 1612}
                for cY = 1, #m3 do
                    local cW = m3[cY]
                    if bB[cW] then
                        l3(bB[cW])
                    end
                end
                local mA = kF:FindFirstChild("Gun Stand")
                if mA then
                    local mB = mA:FindFirstChild("Model")
                    if mB then
                        local mC = mB:GetChildren()
                        local mD = {6, 10}
                        for cY = 1, #mD do
                            local cW = mD[cY]
                            if mC[cW] then
                                l3(mC[cW])
                            end
                        end
                    end
                end
                local mE = kF:FindFirstChild("MAP")
                if mE then
                    local dF = mE:FindFirstChild("Map")
                    if dF then
                        local mC = dF:GetChildren()
                        local mF = mC[603]
                        if mF then
                            local mG = mF:GetChildren()
                            local mH = {311, 89, 205}
                            for cY = 1, #mH do
                                local cW = mH[cY]
                                if mG[cW] then
                                    l3(mG[cW])
                                end
                            end
                        end
                        local mI = {"Meshes/mountain", "Lights", "trash", "Gate", "Car2"}
                        for cY = 1, #mI do
                            local ci = dF:FindFirstChild(mI[cY])
                            if ci then
                                l3(ci)
                            end
                        end
                    end
                end
                local mJ = kF:FindFirstChild("Summer Location")
                if mJ then
                    local ku = mJ:FindFirstChild("Model")
                    if ku then
                        local mK = ku:GetChildren()
                        local mL = {
                            5,
                            49,
                            58,
                            60,
                            61,
                            59,
                            44,
                            22,
                            19,
                            20,
                            46,
                            48,
                            29,
                            30,
                            10,
                            14,
                            16,
                            106,
                            40,
                            189,
                            47,
                            63,
                            8,
                            68,
                            38,
                            34
                        }
                        for cY = 1, #mL do
                            local cW = mL[cY]
                            if mK[cW] then
                                l3(mK[cW])
                            end
                        end
                        for bc, mM in ipairs({"Sand castle", "Meshes/mountain"}) do
                            local ci = ku:FindFirstChild(mM)
                            if ci then
                                l3(ci)
                            end
                        end
                    end
                    local mN = mJ:FindFirstChild("Pool House")
                    if mN then
                        local mO = mN:GetChildren()
                        if mO[3] then
                            l3(mO[3])
                        end
                        local mP = mN:FindFirstChild("Light")
                        if mP then
                            l3(mP)
                        end
                    end
                    local mQ = mJ:GetChildren()
                    if mQ[4] then
                        l3(mQ[4])
                    end
                    local mR = mJ:FindFirstChild("[Fish]")
                    if mR then
                        l3(mR)
                    end
                end
                local function mS(mr, m3)
                    local dG, mT =
                        pcall(
                        function()
                            return mr:GetChildren()
                        end
                    )
                    if dG and mT and type(m3) == "number" and m3 >= 1 and m3 <= #mT then
                        return mT[m3]
                    end
                end
                local mU = {function()
                        local mJ = kF:FindFirstChild("Summer Location")
                        if not mJ then
                            return
                        end
                        local mB = mJ:FindFirstChild("Model")
                        if not mB then
                            return
                        end
                        return mS(mB, 4)
                    end, function()
                        local mE = kF:FindFirstChild("MAP")
                        if not mE then
                            return
                        end
                        local dF = mE:FindFirstChild("Map")
                        if not dF then
                            return
                        end
                        return mS(dF, 800)
                    end, function()
                        local mJ = kF:FindFirstChild("Summer Location")
                        if not mJ then
                            return
                        end
                        local mB = mJ:FindFirstChild("Model")
                        if not mB then
                            return
                        end
                        return mS(mB, 52)
                    end, function()
                        local mE = kF:FindFirstChild("MAP")
                        if not mE then
                            return
                        end
                        local dF = mE:FindFirstChild("Map")
                        if not dF then
                            return
                        end
                        local mV = dF:FindFirstChild("Summer Location")
                        if not mV then
                            return
                        end
                        return mV:FindFirstChild("Beach Bar")
                    end, function()
                        local mE = kF:FindFirstChild("MAP")
                        if not mE then
                            return
                        end
                        local dF = mE:FindFirstChild("Map")
                        if not dF then
                            return
                        end
                        local mV = dF:FindFirstChild("Summer Location")
                        if not mV then
                            return
                        end
                        return mV:FindFirstChild("Fishing Ship")
                    end, function()
                        local mE = kF:FindFirstChild("MAP")
                        if not mE then
                            return
                        end
                        local dF = mE:FindFirstChild("Map")
                        if not dF then
                            return
                        end
                        return dF:FindFirstChild("BillboardSign")
                    end, function()
                        local mE = kF:FindFirstChild("MAP")
                        if not mE then
                            return
                        end
                        local dF = mE:FindFirstChild("Map")
                        if not dF then
                            return
                        end
                        return mS(dF, 265)
                    end, function()
                        local mE = kF:FindFirstChild("MAP")
                        if not mE then
                            return
                        end
                        local dF = mE:FindFirstChild("Map")
                        if not dF then
                            return
                        end
                        local mW = mS(dF, 655)
                        if not mW then
                            return
                        end
                        return mS(mW, 13)
                    end, function()
                        local mE = kF:FindFirstChild("MAP")
                        if not mE then
                            return
                        end
                        local dF = mE:FindFirstChild("Map")
                        if not dF then
                            return
                        end
                        local mW = mS(dF, 655)
                        if not mW then
                            return
                        end
                        return mS(mW, 11)
                    end, function()
                        local mE = kF:FindFirstChild("MAP")
                        if not mE then
                            return
                        end
                        local dF = mE:FindFirstChild("Map")
                        if not dF then
                            return
                        end
                        return mS(dF, 713)
                    end, function()
                        local hF = kF:FindFirstChild("Boom Taco's")
                        if not hF then
                            return
                        end
                        local mB = hF:FindFirstChild("Model")
                        if not mB then
                            return
                        end
                        return mB:FindFirstChild("amthere8_ballzs")
                    end, function()
                        local mE = kF:FindFirstChild("MAP")
                        if not mE then
                            return
                        end
                        return mE:FindFirstChild("Lights")
                    end, function()
                        local mE = kF:FindFirstChild("MAP")
                        if not mE then
                            return
                        end
                        local dF = mE:FindFirstChild("Map")
                        if not dF then
                            return
                        end
                        local mV = dF:FindFirstChild("Summer Location")
                        if not mV then
                            return
                        end
                        return mV:FindFirstChild("mod")
                    end, function()
                        local mX = mS(kF, 10)
                        if not mX then
                            return
                        end
                        local mB = mX:FindFirstChild("Model")
                        if not mB then
                            return
                        end
                        local mY = mB:FindFirstChild("Streak leaderboard")
                        if not mY then
                            return
                        end
                        return mY:FindFirstChild("Meshes/rounded_sides_Plane.003")
                    end, function()
                        local mX = mS(kF, 10)
                        if not mX then
                            return
                        end
                        local mB = mX:FindFirstChild("Model")
                        if not mB then
                            return
                        end
                        local mY = mB:FindFirstChild("Streak leaderboard")
                        if not mY then
                            return
                        end
                        return mY:FindFirstChild("Meshes/rounded_sides_Plane.002")
                    end, function()
                        local mX = mS(kF, 10)
                        if not mX then
                            return
                        end
                        local mB = mX:FindFirstChild("Model")
                        if not mB then
                            return
                        end
                        local mY = mB:FindFirstChild("Streak leaderboard")
                        if not mY then
                            return
                        end
                        return mY:FindFirstChild("Meshes/rounded_sides_Plane.001")
                    end, function()
                        local mX = mS(kF, 10)
                        if not mX then
                            return
                        end
                        local mB = mX:FindFirstChild("Model")
                        if not mB then
                            return
                        end
                        local mY = mB:FindFirstChild("Streak leaderboard")
                        if not mY then
                            return
                        end
                        return mY:FindFirstChild("Model")
                    end, function()
                        local mX = mS(kF, 10)
                        if not mX then
                            return
                        end
                        local mB = mX:FindFirstChild("Model")
                        if not mB then
                            return
                        end
                        return mB:FindFirstChild("Streak leaderboard")
                    end, function()
                        local mX = mS(kF, 10)
                        if not mX then
                            return
                        end
                        local mB = mX:FindFirstChild("Model")
                        if not mB then
                            return
                        end
                        return mB:FindFirstChild("Model")
                    end, function()
                        local mX = mS(kF, 10)
                        if not mX then
                            return
                        end
                        return mX:FindFirstChild("Model")
                    end, function()
                        return mS(kF, 136)
                    end, function()
                        return kF:FindFirstChild("GameBillboards")
                    end, function()
                        local mX = mS(kF, 10)
                        if not mX then
                            return
                        end
                        return mX:FindFirstChild("Top Time Played Leaderboard")
                    end, function()
                        local mZ = mS(kF, 116)
                        if not mZ then
                            return
                        end
                        local m_ = mZ:FindFirstChild("Model")
                        if not m_ then
                            return
                        end
                        local n0 = m_:FindFirstChild("Model")
                        if not n0 then
                            return
                        end
                        local n1 = n0:FindFirstChild("Model")
                        if not n1 then
                            return
                        end
                        return mS(n1, 8)
                    end, function()
                        local n2 = kF:FindFirstChild("PVP ARENA")
                        if not n2 then
                            return
                        end
                        local m_ = n2:FindFirstChild("Model")
                        if not m_ then
                            return
                        end
                        return m_:FindFirstChild("Model")
                    end, function()
                        local n2 = kF:FindFirstChild("PVP ARENA")
                        if not n2 then
                            return
                        end
                        local m_ = n2:FindFirstChild("Model")
                        if not m_ then
                            return
                        end
                        return m_:FindFirstChild("Sand castle")
                    end, function()
                        local mE = kF:FindFirstChild("MAP")
                        if not mE then
                            return
                        end
                        local dF = mE:FindFirstChild("Map")
                        if not dF then
                            return
                        end
                        return mS(dF, 742)
                    end, function()
                        local mE = kF:FindFirstChild("MAP")
                        if not mE then
                            return
                        end
                        local dF = mE:FindFirstChild("Map")
                        if not dF then
                            return
                        end
                        return dF:FindFirstChild("Car2")
                    end, function()
                        return kF:FindFirstChild("Construction Site")
                    end, function()
                        return mS(kF, 200)
                    end, function()
                        return mS(kF, 121)
                    end, function()
                        return mS(kF, 198)
                    end, function()
                        local mE = kF:FindFirstChild("MAP")
                        if not mE then
                            return
                        end
                        local dF = mE:FindFirstChild("Map")
                        if not dF then
                            return
                        end
                        local mF = mS(dF, 603)
                        if not mF then
                            return
                        end
                        local n3 = mS(mF, 265)
                        if not n3 then
                            return
                        end
                        return n3:FindFirstChild("Palm Tree")
                    end, function()
                        local mE = kF:FindFirstChild("MAP")
                        if not mE then
                            return
                        end
                        local dF = mE:FindFirstChild("Map")
                        if not dF then
                            return
                        end
                        local mF = mS(dF, 603)
                        if not mF then
                            return
                        end
                        local n3 = mS(mF, 265)
                        if not n3 then
                            return
                        end
                        return mS(n3, 2)
                    end, function()
                        local mE = kF:FindFirstChild("MAP")
                        if not mE then
                            return
                        end
                        local dF = mE:FindFirstChild("Map")
                        if not dF then
                            return
                        end
                        local mF = mS(dF, 603)
                        if not mF then
                            return
                        end
                        local n4 = mS(mF, 207)
                        if not n4 then
                            return
                        end
                        local mB = n4:FindFirstChild("Model")
                        if not mB then
                            return
                        end
                        return mS(mB, 2)
                    end, function()
                        local mE = kF:FindFirstChild("MAP")
                        if not mE then
                            return
                        end
                        local dF = mE:FindFirstChild("Map")
                        if not dF then
                            return
                        end
                        local mF = mS(dF, 603)
                        if not mF then
                            return
                        end
                        local n4 = mS(mF, 207)
                        if not n4 then
                            return
                        end
                        local mB = n4:FindFirstChild("Model")
                        if not mB then
                            return
                        end
                        return mB:FindFirstChild("Palm Tree")
                    end, function()
                        return mS(kF, 270)
                    end, function()
                        return mS(kF, 267)
                    end, function()
                        return kF:FindFirstChild("Palm Tree")
                    end, function()
                        local n5 = mS(kF, 125)
                        if not n5 then
                            return
                        end
                        return n5:FindFirstChild("Palm Tree")
                    end, function()
                        local cZ = kF:FindFirstChild("Folder")
                        if not cZ then
                            return
                        end
                        local n6 = mS(cZ, 66)
                        if not n6 then
                            return
                        end
                        local mB = n6:FindFirstChild("Model")
                        if not mB then
                            return
                        end
                        return mB:FindFirstChild("Palm Tree")
                    end, function()
                        local cZ = kF:FindFirstChild("Folder")
                        if not cZ then
                            return
                        end
                        local n6 = mS(cZ, 66)
                        if not n6 then
                            return
                        end
                        local n7 = mS(n6, 4)
                        if not n7 then
                            return
                        end
                        return n7:FindFirstChild("Palm Tree")
                    end, function()
                        local cZ = kF:FindFirstChild("Folder")
                        if not cZ then
                            return
                        end
                        local n6 = mS(cZ, 66)
                        if not n6 then
                            return
                        end
                        return n6:FindFirstChild("Palm Tree")
                    end, function()
                        local cZ = kF:FindFirstChild("Folder")
                        if not cZ then
                            return
                        end
                        local n6 = mS(cZ, 66)
                        if not n6 then
                            return
                        end
                        local bg = n6:FindFirstChild("Part")
                        if not bg then
                            return
                        end
                        return mS(bg, 2)
                    end, function()
                        local cZ = kF:FindFirstChild("Folder")
                        if not cZ then
                            return
                        end
                        local n6 = mS(cZ, 66)
                        if not n6 then
                            return
                        end
                        local bg = n6:FindFirstChild("Part")
                        if not bg then
                            return
                        end
                        return bg:FindFirstChild("Palm Tree")
                    end, function()
                        local cZ = kF:FindFirstChild("Folder")
                        if not cZ then
                            return
                        end
                        local n6 = mS(cZ, 66)
                        if not n6 then
                            return
                        end
                        return n6:FindFirstChild("Part")
                    end, function()
                        local n8 = mS(kF, 460)
                        if not n8 then
                            return
                        end
                        return mS(n8, 2)
                    end, function()
                        local n8 = mS(kF, 460)
                        if not n8 then
                            return
                        end
                        local m_ = n8:FindFirstChild("Model")
                        if not m_ then
                            return
                        end
                        return m_:FindFirstChild("Model")
                    end, function()
                        return mS(kF, 224)
                    end, function()
                        local n9 = mS(kF, 126)
                        if not n9 then
                            return
                        end
                        return mS(n9, 3)
                    end, function()
                        local mJ = kF:FindFirstChild("Summer Location")
                        if not mJ then
                            return
                        end
                        return mJ:FindFirstChild("mod")
                    end, function()
                        local mJ = kF:FindFirstChild("Summer Location")
                        if not mJ then
                            return
                        end
                        return mS(mJ, 14)
                    end, function()
                        local mJ = kF:FindFirstChild("Summer Location")
                        if not mJ then
                            return
                        end
                        return mS(mJ, 16)
                    end, function()
                        local mJ = kF:FindFirstChild("Summer Location")
                        if not mJ then
                            return
                        end
                        return mS(mJ, 18)
                    end, function()
                        local mJ = kF:FindFirstChild("Summer Location")
                        if not mJ then
                            return
                        end
                        return mS(mJ, 19)
                    end, function()
                        local mJ = kF:FindFirstChild("Summer Location")
                        if not mJ then
                            return
                        end
                        return mS(mJ, 21)
                    end, function()
                        local mJ = kF:FindFirstChild("Summer Location")
                        if not mJ then
                            return
                        end
                        return mJ:FindFirstChild("Hammock")
                    end, function()
                        local mJ = kF:FindFirstChild("Summer Location")
                        if not mJ then
                            return
                        end
                        return mS(mJ, 20)
                    end, function()
                        local mJ = kF:FindFirstChild("Summer Location")
                        if not mJ then
                            return
                        end
                        return mS(mJ, 13)
                    end, function()
                        local mJ = kF:FindFirstChild("Summer Location")
                        if not mJ then
                            return
                        end
                        local mB = mJ:FindFirstChild("Model")
                        if not mB then
                            return
                        end
                        return mB:FindFirstChild("Meshes/mountain")
                    end, function()
                        local mJ = kF:FindFirstChild("Summer Location")
                        if not mJ then
                            return
                        end
                        return mS(mJ, 15)
                    end, function()
                        local mJ = kF:FindFirstChild("Summer Location")
                        if not mJ then
                            return
                        end
                        return mJ:FindFirstChild("Palm Tree")
                    end}
                for cY = 1, #mU do
                    local dG, fk = pcall(mU[cY])
                    if dG and typeof(fk) == "Instance" then
                        l3(fk)
                    end
                end
                local na = kF:FindFirstChild("Players")
                if na then
                    local nb, mf =
                        pcall(
                        function()
                            return game:GetService("Players")
                        end
                    )
                    if nb and mf then
                        local nc = na:GetChildren()
                        for cY = 1, #nc do
                            local c3 = nc[cY]
                            local nd = typeof(c3) == "Instance" and c3:IsA("Model")
                            if nd then
                                local ne = c3:FindFirstChildOfClass("Humanoid") ~= nil
                                local nf = mf:FindFirstChild(c3.Name) ~= nil
                                if ne and not nf then
                                    l3(c3)
                                end
                            end
                        end
                    end
                end
                if state then
                    for cY = 1, #mx do
                        local fk = mx[cY]
                        if fk.Parent ~= nil and mu.bin[fk] == nil then
                            local mq, mr =
                                pcall(
                                function()
                                    return fk.Parent
                                end
                            )
                            if mq and mr then
                                mu.bin[fk] = mr
                                pcall(
                                    function()
                                        fk.Parent = nil
                                    end
                                )
                            end
                        end
                    end
                else
                    for fk, mr in pairs(mu.bin) do
                        pcall(
                            function()
                                fk.Parent = mr
                            end
                        )
                    end
                    mu.bin = {}
                end
            end
            local function ng(nh)
                if nh then
                    pcall(
                        function()
                            nh:Destroy()
                        end
                    )
                end
            end
            local function ni(kz)
                local nj = 0
                for _, nk in next, kz:GetDescendants() do
                    if nk:IsA("Decal") then
                        nj = nj + 1
                        if nj > 1 then
                            break
                        end
                    end
                end
                return nj == 1
            end
            local function nl(kz, nm)
                local nn, no =
                    pcall(
                    function()
                        return game:GetService("Workspace")
                    end
                )
                if not nn then
                    return false
                end
                local p = kz and kz.Parent
                nm = tostring(nm)
                while p and p ~= no do
                    if string.lower(tostring(p.Name)) == nm then
                        return true
                    end
                    p = p.Parent
                end
                return false
            end
            local function np()
                local nq, no =
                    pcall(
                    function()
                        return game:GetService("Workspace")
                    end
                )
                if not nq or not no then
                    return
                end
                local nr = no:FindFirstChild("Players")
                if nr then
                    for _, kz in next, nr:GetDescendants() do
                        if kz:IsA("Script") then
                            local ns = kz:FindFirstChildWhichIsA("LocalScript", true)
                            if ns then
                                ng(kz)
                            end
                        end
                    end
                end
                do
                    local nt = no:FindFirstChild("MAP")
                    nt = nt and nt:FindFirstChild("Map") or nil
                    if nt then
                        ng(nt:FindFirstChild("Meshes/mountain"))
                    end
                end
                do
                    local nu = no:FindFirstChild("PVP ARENA")
                    local nv = nu and nu:FindFirstChild("Model") or nil
                    if nv then
                        ng(nv:FindFirstChild("tree") or nv:FindFirstChild("Tree"))
                    end
                end
                for _, d in next, no:GetDescendants() do
                    if d and d.Name == "Palm Tree" then
                        ng(d)
                    end
                end
                for _, d in next, no:GetDescendants() do
                    if d and string.lower(tostring(d.Name)) == "trash" then
                        ng(d)
                    end
                end
                for _, d in next, no:GetDescendants() do
                    if d and d:IsA("BasePart") and d.Name == "Part" then
                        if not nl(d, "parts") and ni(d) then
                            ng(d)
                        end
                    end
                end
            end
            local function nw()
                mu.conns = mu.conns or {}
                local nq, no =
                    pcall(
                    function()
                        return game:GetService("Workspace")
                    end
                )
                if not nq or not no then
                    return
                end
                local nx =
                    no.DescendantAdded:Connect(
                    function(kz)
                        if not mu.enabled or not kz then
                            return
                        end
                        if string.lower(tostring(kz.Name)) == "trash" then
                            ng(kz)
                            return
                        end
                        if kz.Name == "Palm Tree" then
                            ng(kz)
                            return
                        end
                        if kz:IsA("BasePart") and kz.Name == "Part" then
                            if not nl(kz, "parts") and ni(kz) then
                                ng(kz)
                                return
                            end
                        end
                        if kz:IsA("Decal") then
                            local p = kz.Parent
                            while p and p ~= no do
                                if p:IsA("BasePart") then
                                    if string.lower(tostring(p.Name)) == "trash" then
                                        ng(p)
                                        break
                                    end
                                    if p.Name == "Part" then
                                        if not nl(p, "parts") and ni(p) then
                                            ng(p)
                                            break
                                        end
                                    end
                                end
                                p = p.Parent
                            end
                        end
                    end
                )
                table.insert(mu.conns, nx)
                local nr = no:FindFirstChild("Players")
                if nr then
                    local ny =
                        nr.DescendantAdded:Connect(
                        function(kz)
                            if not mu.enabled or not kz then
                                return
                            end
                            if kz:IsA("LocalScript") then
                                local p = kz.Parent
                                while p and p ~= nr do
                                    if p:IsA("Script") then
                                        ng(p)
                                        break
                                    end
                                    p = p.Parent
                                end
                            end
                        end
                    )
                    table.insert(mu.conns, ny)
                end
            end
            local function nz()
                if mu.conns then
                    for i = 1, #mu.conns do
                        local c = mu.conns[i]
                        if c and c.Connected then
                            pcall(
                                function()
                                    c:Disconnect()
                                end
                            )
                        end
                    end
                end
                mu.conns = {}
            end
            local function nA(bj)
                mu.enabled = bj
                mv(bj)
                if bj then
                    if not mu.cleaning then
                        mu.cleaning = true
                        np()
                        nw()
                        local nB = B and B.task or task
                        nB.spawn(
                            function()
                                local nC = B and B.task and B.task.wait or task.wait
                                local t = 0
                                while mu.enabled do
                                    nC(2)
                                    t = t + 2
                                    if t >= 20 then
                                        np()
                                        t = 0
                                    end
                                end
                                mu.cleaning = false
                            end
                        )
                    end
                else
                    nz()
                end
            end
            do
                if a and a.connections and type(a.connections) == "table" then
                    table.insert(
                        a.connections,
                        {Disconnect = function()
                                if mu and mu.enabled then
                                    nA(false)
                                end
                            end}
                    )
                end
            end
            local nD = {conn = nil, prev = nil}
            local function nE()
                if getgenv and getgenv().OPTIMIZED_GRAPHICS then
                    return
                end
                local kF = game:GetService("Workspace")
                local nF = game:GetService("Lighting")
                local kG = B and B.run or game:GetService("RunService")
                local nB = B and B.task or task
                nD.prev = {
                    GlobalShadows = nF.GlobalShadows,
                    FogEnd = nF.FogEnd,
                    QualityLevel = (function()
                        local dG, nG =
                            pcall(
                            function()
                                return settings().Rendering.QualityLevel
                            end
                        )
                        return dG and nG or nil
                    end)()
                }
                local nH = {
                    kF:FindFirstChild("Lights"),
                    kF:FindFirstChild("MAP") and kF.MAP:FindFirstChild("Graffiti") or nil,
                    kF:FindFirstChild("MAP") and kF.MAP:FindFirstChild("Map") and
                        kF.MAP.Map:FindFirstChild("Game-Houses") or
                        nil
                }
                for bc, fC in next, nH do
                    if fC then
                        pcall(
                            function()
                                fC:Destroy()
                            end
                        )
                    end
                end
                for bc, a0 in next, game:GetDescendants() do
                    local cW = a0.Name
                    if cW == "Meshes/mountain" or cW == "print" or cW == "Image Ad Unit 2" then
                        pcall(
                            function()
                                a0:Destroy()
                            end
                        )
                    end
                end
                local nI = kF:FindFirstChild("Ignored")
                if nI then
                    for bc, nJ in next, nI:GetChildren() do
                        local cW = nJ.Name
                        if cW == "HouseOwn" or cW == "Folder" or cW == "HouseItemSale" or cW == "ItemsDrop" then
                            pcall(
                                function()
                                    nJ:Destroy()
                                end
                            )
                        end
                    end
                end
                local mE = kF:FindFirstChild("MAP")
                if mE then
                    local dF = mE:FindFirstChild("Map")
                    if dF then
                        for bc, nK in next, dF:GetChildren() do
                            if nK:IsA("Model") then
                                pcall(
                                    function()
                                        nK:Destroy()
                                    end
                                )
                            end
                        end
                    end
                    local nL = mE:FindFirstChild("Indestructible")
                    if nL then
                        for bc, nK in next, nL:GetChildren() do
                            if nK:IsA("Model") then
                                pcall(
                                    function()
                                        nK:Destroy()
                                    end
                                )
                            end
                        end
                    end
                end
                local nM = {
                    "Accessory",
                    "Decal",
                    "ShirtGraphic",
                    "Shirt",
                    "Pants",
                    "Seat",
                    "VehicleSeat",
                    "SpecialMesh"
                }
                for bc, a0 in next, kF:GetDescendants() do
                    for bc, nN in next, nM do
                        if a0:IsA(nN) then
                            pcall(
                                function()
                                    a0:Destroy()
                                end
                            )
                        end
                    end
                end
                local nO = kF:FindFirstChildOfClass("Terrain")
                if nO then
                    nO.WaterWaveSize = 0
                    nO.WaterWaveSpeed = 0
                    nO.WaterReflectance = 0
                    nO.WaterTransparency = 0
                end
                nF.GlobalShadows = false
                nF.FogEnd = 9e9
                pcall(
                    function()
                        settings().Rendering.QualityLevel = 1
                    end
                )
                for bc, cc in next, game:GetDescendants() do
                    if
                        cc:IsA("Part") or cc:IsA("UnionOperation") or cc:IsA("MeshPart") or cc:IsA("CornerWedgePart") or
                            cc:IsA("WedgePart") or
                            cc:IsA("TrussPart")
                     then
                        cc.Material = Enum.Material.Plastic
                        cc.Reflectance = 0
                    elseif cc:IsA("Decal") then
                        cc.Transparency = 1
                    elseif cc:IsA("ParticleEmitter") or cc:IsA("Trail") then
                        cc.Lifetime = NumberRange.new(0)
                    end
                end
                for bc, gm in next, nF:GetDescendants() do
                    if
                        gm:IsA("BlurEffect") or gm:IsA("SunRaysEffect") or gm:IsA("ColorCorrectionEffect") or
                            gm:IsA("BloomEffect") or
                            gm:IsA("DepthOfFieldEffect")
                     then
                        gm.Enabled = false
                    end
                end
                nD.conn =
                    kF.DescendantAdded:Connect(
                    function(c4)
                        nB.spawn(
                            function()
                                if c4:IsA("ForceField") or c4:IsA("Sparkles") or c4:IsA("Smoke") or c4:IsA("Fire") then
                                    local nP = kG and kG.Heartbeat or game:GetService("RunService").Heartbeat
                                    nP:Wait()
                                    pcall(
                                        function()
                                            c4:Destroy()
                                        end
                                    )
                                end
                            end
                        )
                    end
                )
                if getgenv then
                    getgenv().OPTIMIZED_GRAPHICS = true
                end
            end
            local function nQ()
                if nD.conn and nD.conn.Connected then
                    pcall(
                        function()
                            nD.conn:Disconnect()
                        end
                    )
                end
                nD.conn = nil
                local nF = game:GetService("Lighting")
                local gZ = nD.prev
                if gZ then
                    pcall(
                        function()
                            nF.GlobalShadows = gZ.GlobalShadows
                            nF.FogEnd = gZ.FogEnd
                            if gZ.QualityLevel ~= nil then
                                settings().Rendering.QualityLevel = gZ.QualityLevel
                            end
                        end
                    )
                end
                if getgenv then
                    getgenv().OPTIMIZED_GRAPHICS = nil
                end
            end
            local a6 =
                lJ:toggle(
                {name = "ClearTrash", flag = "ClearTrash_Toggle", default = false, callback = function(cc)
                        nA(cc)
                        if a and a.update_dependencies then
                            a:update_dependencies()
                        end
                    end}
            )
            local nR =
                lJ:toggle(
                {name = "PotatoMode", flag = "PotatoMode_Toggle", default = false, callback = function(cc)
                        if cc then
                            nE()
                        else
                            nQ()
                        end
                        if a and a.update_dependencies then
                            a:update_dependencies()
                        end
                    end}
            )
            table.insert(
                a.connections,
                {Disconnect = function()
                        if getgenv and getgenv().OPTIMIZED_GRAPHICS then
                            nQ()
                        end
                    end}
            )
        end
    end
end
do
    local nS =
        loadstring(game:HttpGet("https://raw.githubusercontent.com/AreWeDeadas/Rebuild.gg/refs/heads/main/zzzz"))()
    nS.init()
    local nT = v:section({name = "esp"})
    local nU =
        nT:toggle(
        {name = "BoxEsp", state = false, callback = function(state)
                if _G.ESP_Config and _G.ESP_Config.Box then
                    _G.ESP_Config.Box.Enable = state
                end
            end}
    )
    do
        _G.ESP_Config = _G.ESP_Config or {}
        _G.ESP_Config.Box = _G.ESP_Config.Box or {}
        local nV = _G.ESP_Config.Box
        nV.Color = nV.Color or c("#ffffff")
    end
    nU:colorpicker(
        {
            name = "Color",
            flag = "esp_box_color",
            default = _G.ESP_Config and _G.ESP_Config.Box and _G.ESP_Config.Box.Color or c("#ffffff"),
            callback = function(nW)
                if _G.ESP_Config and _G.ESP_Config.Box then
                    _G.ESP_Config.Box.Color = nW
                end
            end
        }
    )
    local nX = nT:dependency_box()
    nX:setup_dependencies({{nU, true}})
    local nY =
        nX:toggle(
        {name = "Filled", flag = "esp_box_filled", default = false, callback = function(state)
                if _G.ESP_Config and _G.ESP_Config.Box and _G.ESP_Config.Box.Filled then
                    _G.ESP_Config.Box.Filled.Enable = state
                end
            end}
    )
    local nZ = nX:dependency_box()
    nZ:setup_dependencies({{nY, true}})
    local n_ =
        nZ:toggle(
        {name = "Gradient", flag = "esp_box_gradient", default = false, callback = function(state)
                if
                    _G.ESP_Config and _G.ESP_Config.Box and _G.ESP_Config.Box.Filled and
                        _G.ESP_Config.Box.Filled.Gradient
                 then
                    _G.ESP_Config.Box.Filled.Gradient.Enable = state
                end
            end}
    )
    n_:colorpicker(
        {
            name = "Start",
            flag = "esp_box_grad_start",
            default = c("#ffffff"),
            callback = function(nW)
                if
                    _G.ESP_Config and _G.ESP_Config.Box and _G.ESP_Config.Box.Filled and
                        _G.ESP_Config.Box.Filled.Gradient and
                        _G.ESP_Config.Box.Filled.Gradient.Color
                 then
                    _G.ESP_Config.Box.Filled.Gradient.Color.Start = nW
                end
            end
        }
    ):colorpicker(
        {
            name = "End",
            flag = "esp_box_grad_end",
            default = c("#0000ff"),
            callback = function(nW)
                if
                    _G.ESP_Config and _G.ESP_Config.Box and _G.ESP_Config.Box.Filled and
                        _G.ESP_Config.Box.Filled.Gradient and
                        _G.ESP_Config.Box.Filled.Gradient.Color
                 then
                    _G.ESP_Config.Box.Filled.Gradient.Color.End = nW
                end
            end
        }
    )
    nZ:slider(
        {
            name = "Trs",
            flag = "esp_box_fill_trs",
            min = 0,
            max = 1,
            default = 0.9,
            interval = 0.01,
            callback = function(o0)
                if _G.ESP_Config and _G.ESP_Config.Box and _G.ESP_Config.Box.Filled then
                    _G.ESP_Config.Box.Filled.Transparency = o0
                end
            end
        }
    )
    local o1 = nZ:dependency_box()
    o1:setup_dependencies({{n_, true}})
    o1:toggle(
        {
            name = "Rotating",
            flag = "esp_box_grad_rot",
            default = false,
            callback = function(state)
                if
                    _G.ESP_Config and _G.ESP_Config.Box and _G.ESP_Config.Box.Filled and
                        _G.ESP_Config.Box.Filled.Gradient and
                        _G.ESP_Config.Box.Filled.Gradient.Rotating
                 then
                    _G.ESP_Config.Box.Filled.Gradient.Rotating.Enable = state
                end
            end
        }
    )
    local o2 =
        nT:toggle(
        {name = "TextName", state = false, callback = function(state)
                if _G.ESP_Config and _G.ESP_Config.Text and _G.ESP_Config.Text.Name then
                    _G.ESP_Config.Text.Name.Enable = state
                end
            end}
    )
    o2:colorpicker(
        {name = "Color", flag = "esp_txtname_color", default = c("#ffffff"), callback = function(nW)
                if _G.ESP_Config and _G.ESP_Config.Text and _G.ESP_Config.Text.Name then
                    _G.ESP_Config.Text.Name.Color = nW
                end
            end}
    )
    o2:colorpicker(
        {name = "Stroke", flag = "esp_txtname_stroke", default = c("#000000"), callback = function(nW)
                if _G.ESP_Config and _G.ESP_Config.Text and _G.ESP_Config.Text.Name then
                    _G.ESP_Config.Text.Name.StrokeColor = nW
                end
            end}
    )
    do
        _G.ESP_Config = _G.ESP_Config or {}
        local T = _G.ESP_Config
        T.Text = T.Text or {}
        T.Text.Name = T.Text.Name or {}
        local N = T.Text.Name
        N.Color = N.Color or c("#ffffff")
        N.StrokeColor = N.StrokeColor or c("#000000")
        if N.StrokeTransparency == nil then
            N.StrokeTransparency = 0.0
        end
        N.Font = N.Font or "ProggyClean"
        N.Size = N.Size or 13
        N.Side = N.Side or "Top"
        N.ShowNameMethod = N.ShowNameMethod or {Enable = false, Mode = "Display"}
        if N.ShowNameMethod.Enable == nil then
            N.ShowNameMethod.Enable = false
        end
        N.ShowNameMethod.Mode = N.ShowNameMethod.Mode or "Display"
    end
    local o3 = nT:dependency_box()
    o3:setup_dependencies({{o2, true}})
    local o4 =
        o3:toggle(
        {name = "OriginalNameMod", state = false, callback = function(state)
                _G.ESP_Config = _G.ESP_Config or {}
                _G.ESP_Config.Text = _G.ESP_Config.Text or {}
                _G.ESP_Config.Text.Name = _G.ESP_Config.Text.Name or {}
                _G.ESP_Config.Text.Name.ShowNameMethod = _G.ESP_Config.Text.Name.ShowNameMethod or {Mode = "Display"}
                _G.ESP_Config.Text.Name.ShowNameMethod.Enable = state
                if UpdateAllShowNameMethod then
                    UpdateAllShowNameMethod()
                end
            end}
    )
    local o5 = nT:dependency_box()
    o5:setup_dependencies({{o4, true}})
    o5:dropdown(
        {
            name = "Type",
            flag = "esp_txtname_showname_mode",
            items = {"Display", "Original", "None"},
            default = "Display",
            callback = function(o6)
                if _G.ESP_Config and _G.ESP_Config.Text and _G.ESP_Config.Text.Name then
                    _G.ESP_Config.Text.Name.ShowNameMethod = _G.ESP_Config.Text.Name.ShowNameMethod or {}
                    _G.ESP_Config.Text.Name.ShowNameMethod.Mode = o6
                    if UpdateAllShowNameMethod then
                        UpdateAllShowNameMethod()
                    end
                end
            end
        }
    )
    do
        local o7 = S and S.PS or game:GetService("Players")
        local o8 = S and S.RS or game:GetService("RunService")
        local o9 = rawget(_G, "LP") and _G.LP or LP or o7.LocalPlayer
        local function oa()
            local ob = (((_G.ESP_Config or {}).Text or {}).Name or {}).ShowNameMethod
            if not ob then
                return {Enable = false, Mode = "Display"}
            end
            return ob
        end
        local function oc(od)
            if not od then
                return
            end
            if od == o9 then
                return
            end
            local oe = od.Character
            if not oe then
                return
            end
            local of = oe:FindFirstChildOfClass("Humanoid")
            if not of then
                return
            end
            local ob = oa()
            if not ob.Enable then
                return
            end
            local og = tostring(ob.Mode or "Display")
            if og == "None" or og == "none" or og == "NONE" then
                of.DisplayDistanceType = Enum.HumanoidDisplayDistanceType.None
                return
            end
            of.DisplayDistanceType = Enum.HumanoidDisplayDistanceType.Viewer
            of.NameOcclusion = Enum.NameOcclusion.NoOcclusion
            if og == "Display" or og == "display" or og == "DISPLAY" then
                of.DisplayName = od.DisplayName ~= "" and od.DisplayName or od.Name
            else
                of.DisplayName = od.Name
            end
        end
        local function oh()
            local ob = oa()
            if not ob.Enable then
                return
            end
            for _, p in ipairs(o7:GetPlayers()) do
                oc(p)
            end
        end
        UpdateAllShowNameMethod = oh
        if not _G.__ShowNameMethod_Bound then
            o7.PlayerAdded:Connect(
                function(p)
                    p.CharacterAdded:Connect(
                        function()
                            oc(p)
                        end
                    )
                end
            )
            for _, p in ipairs(o7:GetPlayers()) do
                if p.Character then
                    oc(p)
                end
                p.CharacterAdded:Connect(
                    function()
                        oc(p)
                    end
                )
            end
            o8.Heartbeat:Connect(oh)
            _G.__ShowNameMethod_Bound = true
        end
    end
    local oi = nT:dependency_box()
    oi:setup_dependencies({{o2, true}})
    oi:dropdown(
        {
            name = "Font",
            flag = "esp_txtname_font",
            items = {
                "ProggyClean",
                "ProggyTiny",
                "Minecraftia",
                "SmallestPixel7",
                "Verdana",
                "VerdanaBold",
                "Tahoma",
                "TahomaBold",
                "CSGO",
                "WindowsXPTahoma",
                "Stratum2",
                "Visitor"
            },
            default = "ProggyClean",
            callback = function(o6)
                if _G.ESP_Config and _G.ESP_Config.Text and _G.ESP_Config.Text.Name then
                    _G.ESP_Config.Text.Name.Font = o6
                end
            end
        }
    )
    oi:slider(
        {
            name = "Size",
            flag = "esp_txtname_size",
            min = 8,
            max = 32,
            default = 13,
            interval = 1,
            callback = function(o6)
                if _G.ESP_Config and _G.ESP_Config.Text and _G.ESP_Config.Text.Name then
                    _G.ESP_Config.Text.Name.Size = o6
                end
            end
        }
    )
    oi:dropdown(
        {name = "Side", flag = "esp_txtname_side", items = {"Top", "Bot"}, default = "Top", callback = function(o6)
                if _G.ESP_Config and _G.ESP_Config.Text and _G.ESP_Config.Text.Name then
                    _G.ESP_Config.Text.Name.Side = o6
                end
            end}
    )
    oi:slider(
        {
            name = "StrokeTr",
            flag = "esp_txtname_stroke_tr",
            min = 0,
            max = 1,
            default = 0.0,
            interval = 0.05,
            callback = function(o6)
                if _G.ESP_Config and _G.ESP_Config.Text and _G.ESP_Config.Text.Name then
                    _G.ESP_Config.Text.Name.StrokeTransparency = o6
                end
            end
        }
    )
    local oj =
        nT:toggle(
        {name = "HealthBar", state = false, callback = function(state)
                _G.ESP_Config = _G.ESP_Config or {}
                _G.ESP_Config.Bars = _G.ESP_Config.Bars or {}
                _G.ESP_Config.Bars.Health = _G.ESP_Config.Bars.Health or {}
                _G.ESP_Config.Bars.Health.Enable = state
                _G.ESP_Config.Bars.Health.Lerp = true
            end}
    )
    do
        _G.ESP_Config = _G.ESP_Config or {}
        local C = _G.ESP_Config
        C.Bars = C.Bars or {}
        C.Bars.Health = C.Bars.Health or {}
        local H = C.Bars.Health
        H.Color1 = H.Color1 or c("#00ff00")
        H.Color2 = H.Color2 or c("#00ff00")
        H.Color3 = H.Color3 or c("#00ff00")
        H.Width = H.Width or 3
        H.Pad = 0
        H.Offset = H.Offset or 4
        H.Side = H.Side or "Right"
        H.Lerp = true
    end
    oj:colorpicker(
        {
            name = "Clr1",
            flag = "esp_hb_c1",
            default = _G.ESP_Config and _G.ESP_Config.Bars and _G.ESP_Config.Bars.Health and
                _G.ESP_Config.Bars.Health.Color1 or
                c("#00ff00"),
            callback = function(nW)
                if _G.ESP_Config and _G.ESP_Config.Bars and _G.ESP_Config.Bars.Health then
                    _G.ESP_Config.Bars.Health.Color1 = nW
                end
            end
        }
    )
    oj:colorpicker(
        {
            name = "Clr2",
            flag = "esp_hb_c2",
            default = _G.ESP_Config and _G.ESP_Config.Bars and _G.ESP_Config.Bars.Health and
                _G.ESP_Config.Bars.Health.Color2 or
                c("#00ff00"),
            callback = function(nW)
                if _G.ESP_Config and _G.ESP_Config.Bars and _G.ESP_Config.Bars.Health then
                    _G.ESP_Config.Bars.Health.Color2 = nW
                end
            end
        }
    )
    local ok = nT:dependency_box()
    ok:setup_dependencies({{oj, true}})
    ok:slider(
        {name = "Width", flag = "esp_hb_width", min = 1, max = 12, default = 3, interval = 1, callback = function(o6)
                if _G.ESP_Config and _G.ESP_Config.Bars and _G.ESP_Config.Bars.Health then
                    _G.ESP_Config.Bars.Health.Width = o6
                end
            end}
    )
    ok:slider(
        {name = "Offset", flag = "esp_hb_offset", min = 0, max = 16, default = 4, interval = 1, callback = function(o6)
                if _G.ESP_Config and _G.ESP_Config.Bars and _G.ESP_Config.Bars.Health then
                    _G.ESP_Config.Bars.Health.Offset = o6
                end
            end}
    )
    ok:dropdown(
        {
            name = "Side",
            flag = "esp_hb_side",
            items = {"Bot", "Top", "Right", "Left"},
            default = "Right",
            callback = function(o6)
                if _G.ESP_Config and _G.ESP_Config.Bars and _G.ESP_Config.Bars.Health then
                    _G.ESP_Config.Bars.Health.Side = o6
                end
            end
        }
    )
    local ol =
        nT:toggle(
        {name = "ArmorBar", state = false, callback = function(state)
                if _G.ESP_Config and _G.ESP_Config.Bars and _G.ESP_Config.Bars.Armor then
                    _G.ESP_Config.Bars.Armor.Enable = state
                end
            end}
    )
    do
        _G.ESP_Config = _G.ESP_Config or {}
        _G.ESP_Config.Bars = _G.ESP_Config.Bars or {}
        _G.ESP_Config.Bars.Armor = _G.ESP_Config.Bars.Armor or {}
        local om = _G.ESP_Config.Bars.Armor
        om.Color1 = om.Color1 or c("#00ff00")
        om.Color2 = om.Color2 or c("#00ff00")
        om.Width = om.Width == nil and 3 or om.Width
        om.Offset = om.Offset == nil and 4 or om.Offset
        om.Side = om.Side or "Right"
        om.Lerp = true
        om.Pad = 0
    end
    ol:colorpicker(
        {
            name = "Clr1",
            flag = "esp_ab_c1",
            default = _G.ESP_Config and _G.ESP_Config.Bars and _G.ESP_Config.Bars.Armor and
                _G.ESP_Config.Bars.Armor.Color1 or
                c("#00ff00"),
            callback = function(nW)
                if _G.ESP_Config and _G.ESP_Config.Bars and _G.ESP_Config.Bars.Armor then
                    _G.ESP_Config.Bars.Armor.Color1 = nW
                end
            end
        }
    )
    ol:colorpicker(
        {
            name = "Clr2",
            flag = "esp_ab_c2",
            default = _G.ESP_Config and _G.ESP_Config.Bars and _G.ESP_Config.Bars.Armor and
                _G.ESP_Config.Bars.Armor.Color2 or
                c("#00ff00"),
            callback = function(nW)
                if _G.ESP_Config and _G.ESP_Config.Bars and _G.ESP_Config.Bars.Armor then
                    _G.ESP_Config.Bars.Armor.Color2 = nW
                end
            end
        }
    )
    local on = nT:dependency_box()
    on:setup_dependencies({{ol, true}})
    on:slider(
        {name = "Width", flag = "esp_ab_width", min = 1, max = 12, default = 3, interval = 1, callback = function(o6)
                if _G.ESP_Config and _G.ESP_Config.Bars and _G.ESP_Config.Bars.Armor then
                    _G.ESP_Config.Bars.Armor.Width = o6
                end
            end}
    )
    on:slider(
        {name = "Offset", flag = "esp_ab_offset", min = 0, max = 16, default = 4, interval = 1, callback = function(o6)
                if _G.ESP_Config and _G.ESP_Config.Bars and _G.ESP_Config.Bars.Armor then
                    _G.ESP_Config.Bars.Armor.Offset = o6
                end
            end}
    )
    on:dropdown(
        {
            name = "Side",
            flag = "esp_ab_side",
            items = {"Bot", "Top", "Right", "Left"},
            default = "Right",
            callback = function(o6)
                if _G.ESP_Config and _G.ESP_Config.Bars and _G.ESP_Config.Bars.Armor then
                    _G.ESP_Config.Bars.Armor.Side = o6
                end
            end
        }
    )
    local oo =
        nT:toggle(
        {name = "TextStuds", state = false, callback = function(state)
                if _G.ESP_Config and _G.ESP_Config.Text and _G.ESP_Config.Text.Studs then
                    _G.ESP_Config.Text.Studs.Enable = state
                end
            end}
    )
    oo:colorpicker(
        {
            name = "Color",
            flag = "esp_txtstuds_color",
            default = _G.ESP_Config and _G.ESP_Config.Text and _G.ESP_Config.Text.Studs and
                _G.ESP_Config.Text.Studs.Color or
                c("#ffffff"),
            callback = function(nW)
                if _G.ESP_Config and _G.ESP_Config.Text and _G.ESP_Config.Text.Studs then
                    _G.ESP_Config.Text.Studs.Color = nW
                end
            end
        }
    )
    oo:colorpicker(
        {
            name = "Stroke",
            flag = "esp_txtstuds_stroke",
            default = _G.ESP_Config and _G.ESP_Config.Text and _G.ESP_Config.Text.Studs and
                _G.ESP_Config.Text.Studs.StrokeColor or
                c("#000000"),
            callback = function(nW)
                if _G.ESP_Config and _G.ESP_Config.Text and _G.ESP_Config.Text.Studs then
                    _G.ESP_Config.Text.Studs.StrokeColor = nW
                end
            end
        }
    )
    do
        _G.ESP_Config = _G.ESP_Config or {}
        _G.ESP_Config.Text = _G.ESP_Config.Text or {}
        _G.ESP_Config.Text.Studs = _G.ESP_Config.Text.Studs or {}
        local op = _G.ESP_Config.Text.Studs
        op.Font = op.Font or "ProggyClean"
        op.Size = op.Size or 13
        op.Side = op.Side or "Top"
        op.StrokeTransparency = op.StrokeTransparency == nil and 0.0 or op.StrokeTransparency
        op.Color = op.Color or c("#ffffff")
        op.StrokeColor = op.StrokeColor or c("#000000")
    end
    local oq = nT:dependency_box()
    oq:setup_dependencies({{oo, true}})
    oq:dropdown(
        {
            name = "Font",
            flag = "esp_txtstuds_font",
            items = {
                "ProggyClean",
                "ProggyTiny",
                "Minecraftia",
                "SmallestPixel7",
                "Verdana",
                "VerdanaBold",
                "Tahoma",
                "TahomaBold",
                "CSGO",
                "WindowsXPTahoma",
                "Stratum2",
                "Visitor"
            },
            default = "ProggyClean",
            callback = function(o6)
                if _G.ESP_Config and _G.ESP_Config.Text and _G.ESP_Config.Text.Studs then
                    _G.ESP_Config.Text.Studs.Font = o6
                end
            end
        }
    )
    oq:slider(
        {
            name = "Size",
            flag = "esp_txtstuds_size",
            min = 8,
            max = 32,
            default = 13,
            interval = 1,
            callback = function(o6)
                if _G.ESP_Config and _G.ESP_Config.Text and _G.ESP_Config.Text.Studs then
                    _G.ESP_Config.Text.Studs.Size = o6
                end
            end
        }
    )
    oq:dropdown(
        {name = "Side", flag = "esp_txtstuds_side", items = {"Top", "Bot"}, default = "Top", callback = function(o6)
                if _G.ESP_Config and _G.ESP_Config.Text and _G.ESP_Config.Text.Studs then
                    _G.ESP_Config.Text.Studs.Side = o6
                end
            end}
    )
    oq:slider(
        {
            name = "StrokeTr",
            flag = "esp_txtstuds_stroke_tr",
            min = 0,
            max = 1,
            default = 0.0,
            interval = 0.05,
            callback = function(o6)
                if _G.ESP_Config and _G.ESP_Config.Text and _G.ESP_Config.Text.Studs then
                    _G.ESP_Config.Text.Studs.StrokeTransparency = o6
                end
            end
        }
    )
    local ot =
        nT:toggle(
        {name = "TextState", state = false, callback = function(state)
                if _G.ESP_Config and _G.ESP_Config.Text and _G.ESP_Config.Text.State then
                    _G.ESP_Config.Text.State.Enable = state
                end
            end}
    )
    do
        _G.ESP_Config = _G.ESP_Config or {}
        _G.ESP_Config.Text = _G.ESP_Config.Text or {}
        _G.ESP_Config.Text.State = _G.ESP_Config.Text.State or {}
        local ou = _G.ESP_Config.Text.State
        ou.Font = ou.Font or "ProggyClean"
        ou.Size = ou.Size or 13
        ou.Side = ou.Side or "Top"
        ou.StrokeTransparency = ou.StrokeTransparency == nil and 0.0 or ou.StrokeTransparency
        ou.Color = ou.Color or c("#ffffff")
        ou.StrokeColor = ou.StrokeColor or c("#000000")
    end
    local ov = nT:dependency_box()
    ov:setup_dependencies({{ot, true}})
    ov:dropdown(
        {
            name = "Font",
            flag = "esp_txtstate_font",
            items = {
                "ProggyClean",
                "ProggyTiny",
                "Minecraftia",
                "SmallestPixel7",
                "Verdana",
                "VerdanaBold",
                "Tahoma",
                "TahomaBold",
                "CSGO",
                "WindowsXPTahoma",
                "Stratum2",
                "Visitor"
            },
            default = "ProggyClean",
            callback = function(o6)
                if _G.ESP_Config and _G.ESP_Config.Text and _G.ESP_Config.Text.State then
                    _G.ESP_Config.Text.State.Font = o6
                end
            end
        }
    )
    ov:slider(
        {
            name = "Size",
            flag = "esp_txtstate_size",
            min = 8,
            max = 32,
            default = 13,
            interval = 1,
            callback = function(o6)
                if _G.ESP_Config and _G.ESP_Config.Text and _G.ESP_Config.Text.State then
                    _G.ESP_Config.Text.State.Size = o6
                end
            end
        }
    )
    ov:dropdown(
        {name = "Side", flag = "esp_txtstate_side", items = {"Top", "Bot"}, default = "Top", callback = function(o6)
                if _G.ESP_Config and _G.ESP_Config.Text and _G.ESP_Config.Text.State then
                    _G.ESP_Config.Text.State.Side = o6
                end
            end}
    )
    ov:slider(
        {
            name = "StrokeTr",
            flag = "esp_txtstate_stroke_tr",
            min = 0,
            max = 1,
            default = 0.0,
            interval = 0.05,
            callback = function(o6)
                if _G.ESP_Config and _G.ESP_Config.Text and _G.ESP_Config.Text.State then
                    _G.ESP_Config.Text.State.StrokeTransparency = o6
                end
            end
        }
    )
    ot:colorpicker(
        {
            name = "Color",
            flag = "esp_txtstate_color",
            default = _G.ESP_Config and _G.ESP_Config.Text and _G.ESP_Config.Text.State and
                _G.ESP_Config.Text.State.Color or
                c("#ffffff"),
            callback = function(nW)
                if _G.ESP_Config and _G.ESP_Config.Text and _G.ESP_Config.Text.State then
                    _G.ESP_Config.Text.State.Color = nW
                end
            end
        }
    )
    ot:colorpicker(
        {
            name = "Stroke",
            flag = "esp_txtstate_stroke",
            default = _G.ESP_Config and _G.ESP_Config.Text and _G.ESP_Config.Text.State and
                _G.ESP_Config.Text.State.StrokeColor or
                c("#000000"),
            callback = function(nW)
                if _G.ESP_Config and _G.ESP_Config.Text and _G.ESP_Config.Text.State then
                    _G.ESP_Config.Text.State.StrokeColor = nW
                end
            end
        }
    )
    local ow =
        nT:toggle(
        {name = "TextTool", state = false, callback = function(state)
                if _G.ESP_Config and _G.ESP_Config.Text and _G.ESP_Config.Text.Tool then
                    _G.ESP_Config.Text.Tool.Enable = state
                end
            end}
    )
    do
        _G.ESP_Config = _G.ESP_Config or {}
        _G.ESP_Config.Text = _G.ESP_Config.Text or {}
        _G.ESP_Config.Text.Tool = _G.ESP_Config.Text.Tool or {}
        local ox = _G.ESP_Config.Text.Tool
        ox.Font = ox.Font or "ProggyClean"
        ox.Size = ox.Size or 13
        ox.Side = ox.Side or "Top"
        ox.StrokeTransparency = ox.StrokeTransparency == nil and 0.0 or ox.StrokeTransparency
        ox.Color = ox.Color or c("#ffffff")
        ox.StrokeColor = ox.StrokeColor or c("#000000")
    end
    local oy = nT:dependency_box()
    oy:setup_dependencies({{ow, true}})
    oy:dropdown(
        {
            name = "Font",
            flag = "esp_txttool_font",
            items = {
                "ProggyClean",
                "ProggyTiny",
                "Minecraftia",
                "SmallestPixel7",
                "Verdana",
                "VerdanaBold",
                "Tahoma",
                "TahomaBold",
                "CSGO",
                "WindowsXPTahoma",
                "Stratum2",
                "Visitor"
            },
            default = "ProggyClean",
            callback = function(o6)
                if _G.ESP_Config and _G.ESP_Config.Text and _G.ESP_Config.Text.Tool then
                    _G.ESP_Config.Text.Tool.Font = o6
                end
            end
        }
    )
    oy:slider(
        {
            name = "Size",
            flag = "esp_txttool_size",
            min = 8,
            max = 32,
            default = 13,
            interval = 1,
            callback = function(o6)
                if _G.ESP_Config and _G.ESP_Config.Text and _G.ESP_Config.Text.Tool then
                    _G.ESP_Config.Text.Tool.Size = o6
                end
            end
        }
    )
    oy:dropdown(
        {name = "Side", flag = "esp_txttool_side", items = {"Top", "Bot"}, default = "Top", callback = function(o6)
                if _G.ESP_Config and _G.ESP_Config.Text and _G.ESP_Config.Text.Tool then
                    _G.ESP_Config.Text.Tool.Side = o6
                end
            end}
    )
    oy:slider(
        {
            name = "StrokeTr",
            flag = "esp_txttool_stroke_tr",
            min = 0,
            max = 1,
            default = 0.0,
            interval = 0.05,
            callback = function(o6)
                if _G.ESP_Config and _G.ESP_Config.Text and _G.ESP_Config.Text.Tool then
                    _G.ESP_Config.Text.Tool.StrokeTransparency = o6
                end
            end
        }
    )
    ow:colorpicker(
        {
            name = "Color",
            flag = "esp_txttool_color",
            default = _G.ESP_Config and _G.ESP_Config.Text and _G.ESP_Config.Text.Tool and _G.ESP_Config.Text.Tool.Color or
                c("#ffffff"),
            callback = function(nW)
                if _G.ESP_Config and _G.ESP_Config.Text and _G.ESP_Config.Text.Tool then
                    _G.ESP_Config.Text.Tool.Color = nW
                end
            end
        }
    )
    ow:colorpicker(
        {
            name = "Stroke",
            flag = "esp_txttool_stroke",
            default = _G.ESP_Config and _G.ESP_Config.Text and _G.ESP_Config.Text.Tool and
                _G.ESP_Config.Text.Tool.StrokeColor or
                c("#000000"),
            callback = function(nW)
                if _G.ESP_Config and _G.ESP_Config.Text and _G.ESP_Config.Text.Tool then
                    _G.ESP_Config.Text.Tool.StrokeColor = nW
                end
            end
        }
    )
end
do
    local oz = v:column()
    local oA = oz:section({name = "Local"})
    do
        local oB = {los_highlight = nil, connection = nil}
        local function oC(oD)
            if oB.los_highlight then
                oB.los_highlight:Destroy()
            end
            local oE = Instance.new("Highlight")
            oE.Parent = oD
            oE.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
            local oF = f or {}
            local oG = oF["selfhighlight_fill_color"]
            local oH = oF["selfhighlight_outline_color"]
            local oI = typeof(oG) == "table" and (oG.Color or oG.Color3) or oG or Color3.fromRGB(255, 255, 255)
            local oJ = typeof(oH) == "table" and (oH.Color or oH.Color3) or oH or Color3.fromRGB(255, 255, 255)
            oE.FillColor = oI
            oE.OutlineColor = oJ
            if f then
                f["selfhighlight_fill_color"] = oI
                f["selfhighlight_outline_color"] = oJ
            end
            oE.FillTransparency = oF["selfhighlight_fill_transparency"] or 1
            oE.OutlineTransparency = oF["selfhighlight_outline_transparency"] or 0
            oE.Enabled = true
            oB.los_highlight = oE
        end
        local function oK()
            local lU = vars and vars.lp or game and game:GetService("Players").LocalPlayer
            if not lU then
                task.defer(
                    function()
                        local oL = 0
                        while not lU and oL < 100 do
                            task.wait(0.1)
                            lU = vars and vars.lp or game and game:GetService("Players").LocalPlayer
                            oL = oL + 1
                        end
                        if lU then
                            oK()
                        end
                    end
                )
                return
            end
            if not oB.connection then
                oB.connection =
                    lU.CharacterAdded:Connect(
                    function(js)
                        task.wait(0.5)
                        if js then
                            oC(js)
                        end
                    end
                )
            end
            local js = lU.Character
            if js then
                oC(js)
            end
        end
        local function oM()
            if oB.los_highlight then
                oB.los_highlight:Destroy()
                oB.los_highlight = nil
            end
            if oB.connection then
                oB.connection:Disconnect()
                oB.connection = nil
            end
        end
        local function oN()
            local oF = f or {}
            if oB.los_highlight then
                local oO = oF["selfhighlight_fill_color"]
                local oP = oF["selfhighlight_outline_color"]
                local oQ = typeof(oO) == "table" and (oO.Color or oO.Color3) or oO or Color3.fromRGB(255, 255, 255)
                local oR = typeof(oP) == "table" and (oP.Color or oP.Color3) or oP or Color3.fromRGB(255, 255, 255)
                oB.los_highlight.FillColor = oQ
                oB.los_highlight.OutlineColor = oR
                if f then
                    f["selfhighlight_fill_color"] = oQ
                    f["selfhighlight_outline_color"] = oR
                end
                oB.los_highlight.FillTransparency = oF["selfhighlight_fill_transparency"] or 1
                oB.los_highlight.OutlineTransparency = oF["selfhighlight_outline_transparency"] or 0
            end
        end
        local oS =
            oA:toggle(
            {name = "SelfHighlight", flag = "selfhighlight_enabled", default = false, callback = function(state)
                    if state then
                        oK()
                    else
                        oM()
                    end
                end}
        )
        oS:colorpicker(
            {
                name = "Fill",
                flag = "selfhighlight_fill_color",
                color = Color3.fromRGB(255, 255, 255),
                callback = function(oT)
                    local c = oT
                    if typeof(oT) == "table" then
                        c = oT.Color or oT.Color3 or oT.color
                    end
                    if oB.los_highlight then
                        oB.los_highlight.FillColor = c
                    end
                    if f then
                        f["selfhighlight_fill_color"] = c
                    end
                end
            }
        )
        oS:colorpicker(
            {
                name = "Outline",
                flag = "selfhighlight_outline_color",
                color = Color3.fromRGB(255, 255, 255),
                callback = function(oT)
                    local c = oT
                    if typeof(oT) == "table" then
                        c = oT.Color or oT.Color3 or oT.color
                    end
                    if oB.los_highlight then
                        oB.los_highlight.OutlineColor = c
                    end
                    if f then
                        f["selfhighlight_outline_color"] = c
                    end
                end
            }
        )
        local oU = oA:dependency_box()
        oU:setup_dependencies({{oS, true}})
        oU:slider(
            {
                name = "FillTr",
                flag = "selfhighlight_fill_transparency",
                min = 0,
                max = 1,
                default = 1,
                interval = 0.05,
                callback = function(oV)
                    if f then
                        f["selfhighlight_fill_transparency"] = oV
                    end
                    if oB.los_highlight then
                        oB.los_highlight.FillTransparency = oV
                    end
                end
            }
        )
        oU:slider(
            {
                name = "OutlineTr",
                flag = "selfhighlight_outline_transparency",
                min = 0,
                max = 1,
                default = 0,
                interval = 0.05,
                callback = function(oV)
                    if f then
                        f["selfhighlight_outline_transparency"] = oV
                    end
                    if oB.los_highlight then
                        oB.los_highlight.OutlineTransparency = oV
                    end
                end
            }
        )
    end
    do
        local oW = {
            connection = nil,
            child_conn = nil,
            appearance_conn = nil,
            original_materials = {},
            active = false,
            override_color = nil
        }
        local function oX(oD)
            if not oD then
                return
            end
            if not next(oW.original_materials) then
                for _, oY in pairs(oD:GetDescendants()) do
                    if oY:IsA("BasePart") then
                        oW.original_materials[oY] = {Material = oY.Material, Color = oY.Color}
                    end
                end
            end
            local f = flags or {}
            local oZ = Enum.Material.ForceField
            local o_ = f["selfmaterial_color"]
            local p0 = oW.override_color
            if typeof(p0) == "table" then
                p0 = p0.Color or p0.color
            end
            local p1 =
                p0 or typeof(o_) == "table" and (o_.Color or o_.color) or typeof(o_) == "Color3" and o_ or
                Color3.fromRGB(255, 255, 255)
            for _, oY in pairs(oD:GetDescendants()) do
                if oY:IsA("BasePart") then
                    if oZ then
                        oY.Material = oZ
                    end
                    if p1 then
                        oY.Color = p1
                    end
                end
            end
        end
        local function p2(oD)
            if not oD then
                return
            end
            for oY, p3 in pairs(oW.original_materials) do
                if oY and oY.Parent then
                    oY.Material = p3.Material
                    oY.Color = p3.Color
                end
            end
            oW.original_materials = {}
        end
        local function p4(lU)
        end
        local p5 = "SimpleBotHiddenClothes"
        local function p6(oD)
            if not oD then
                return
            end
            local p7 = oD:FindFirstChild(p5)
            if not p7 then
                p7 = Instance.new("Folder")
                p7.Name = p5
                p7.Parent = oD
            end
            for _, nh in ipairs(oD:GetChildren()) do
                if nh:IsA("Shirt") or nh:IsA("Pants") or nh:IsA("ShirtGraphic") then
                    nh.Parent = p7
                end
            end
        end
        local function p8(oD)
            if not oD then
                return
            end
            local p7 = oD:FindFirstChild(p5)
            if p7 then
                for _, nh in ipairs(p7:GetChildren()) do
                    nh.Parent = oD
                end
                p7:Destroy()
            end
        end
        local function p9()
            local lU = vars and vars.lp or game and game:GetService("Players").LocalPlayer
            if not lU then
                return
            end
            oW.active = true
            if not oW.connection then
                oW.connection =
                    lU.CharacterAdded:Connect(
                    function(js)
                        oW.original_materials = {}
                        local function pa()
                            if oW.active and js and lU and lU.Character == js then
                                oX(js)
                                p6(js)
                            end
                        end
                        task.delay(0.5, pa)
                        task.delay(1.0, pa)
                        task.delay(1.5, pa)
                        if oW.appearance_conn then
                            oW.appearance_conn:Disconnect()
                            oW.appearance_conn = nil
                        end
                        oW.appearance_conn =
                            lU.CharacterAppearanceLoaded:Connect(
                            function(pb)
                                if pb ~= js then
                                    return
                                end
                                task.delay(0.2, pa)
                            end
                        )
                    end
                )
            end
            local js = lU.Character
            if js then
                oW.original_materials = {}
                oX(js)
                p6(js)
            end
        end
        local function pc()
            oW.active = false
            local lU = vars and vars.lp or game and game:GetService("Players").LocalPlayer
            if lU and lU.Character then
                p8(lU.Character)
                p2(lU.Character)
            end
            if oW.connection then
                oW.connection:Disconnect()
                oW.connection = nil
            end
            if oW.child_conn then
                oW.child_conn:Disconnect()
                oW.child_conn = nil
            end
            if oW.appearance_conn then
                oW.appearance_conn:Disconnect()
                oW.appearance_conn = nil
            end
            oW.override_material = nil
            oW.override_color = nil
        end
        local function pd()
            if not oW.active then
                return
            end
            local lU = vars and vars.lp or game and game:GetService("Players").LocalPlayer
            if lU and lU.Character then
                oX(lU.Character)
            end
        end
        local pe =
            oA:toggle(
            {name = "SelfMaterial", flag = "selfmaterial_enabled", default = false, callback = function(state)
                    if state then
                        p9()
                    else
                        pc()
                    end
                end}
        )
        pe:colorpicker(
            {name = "Color", flag = "selfmaterial_color", color = Color3.fromRGB(255, 255, 255), callback = function(oT)
                    if typeof(oT) == "table" then
                        oW.override_color = oT.Color or oT.color
                    else
                        oW.override_color = oT
                    end
                    pd()
                end}
        )
    end
    do
        local pf = game and game.GetService and game:GetService("Players")
        local pg = game and game.GetService and game:GetService("RunService")
        local ph = {
            active = false,
            conn = nil,
            run_conn = nil,
            chair = nil,
            chairarms = nil,
            chairlegs = nil,
            chairfan = nil,
            weld = nil,
            highlight = nil,
            trails = {},
            anim = nil,
            color = Color3.fromRGB(255, 255, 255)
        }
        local pi = {Vector3.new(-0.8, -0.6, -0.18), Vector3.new(0.1, -0.6, -0.88), Vector3.new(0, -0.6, 0.7)}
        local function pj()
            return vars and vars.lp or pf and pf.LocalPlayer
        end
        local function pk()
            if ph.trails then
                for _, t in ipairs(ph.trails) do
                    if t and t.Parent then
                        t.Enabled = false
                        t:Destroy()
                    end
                end
            end
            ph.trails = {}
            if ph.highlight then
                pcall(
                    function()
                        ph.highlight:Destroy()
                    end
                )
                ph.highlight = nil
            end
            if ph.weld then
                pcall(
                    function()
                        ph.weld:Destroy()
                    end
                )
                ph.weld = nil
            end
            if ph.chairarms then
                pcall(
                    function()
                        ph.chairarms:Destroy()
                    end
                )
                ph.chairarms = nil
            end
            if ph.chairlegs then
                pcall(
                    function()
                        ph.chairlegs:Destroy()
                    end
                )
                ph.chairlegs = nil
            end
            if ph.chairfan then
                pcall(
                    function()
                        ph.chairfan:Destroy()
                    end
                )
                ph.chairfan = nil
            end
            if ph.chair then
                pcall(
                    function()
                        ph.chair:Destroy()
                    end
                )
                ph.chair = nil
            end
        end
        local function pl(js)
            pk()
            if not js then
                return
            end
            local kA = js:FindFirstChild("HumanoidRootPart") or js:FindFirstChild("Torso")
            if not kA then
                return
            end
            local pm = Instance.new("MeshPart")
            pm.Name = "GamingChair_Base"
            pm.Color = Color3.fromRGB(21, 21, 21)
            pm.Size = Vector3.new(2.16, 3.6, 2.3) / Vector3.new(12.37, 20.636, 13.071)
            pm.CanCollide = false
            pm.Massless = true
            pm.MeshId = "rbxassetid://12972961089"
            pm.Material = Enum.Material.SmoothPlastic
            pm.CFrame = kA.CFrame * CFrame.Angles(0, math.rad(-90), 0)
            pm.Parent = workspace
            local pn = Instance.new("WeldConstraint")
            pn.Part0 = pm
            pn.Part1 = kA
            pn.Parent = pm
            local hn = Instance.new("Highlight")
            hn.FillTransparency = 1
            hn.OutlineColor = ph.color
            hn.DepthMode = Enum.HighlightDepthMode.Occluded
            hn.OutlineTransparency = 0.2
            hn.Parent = pm
            local po = Instance.new("MeshPart")
            po.Name = "GamingChair_Arms"
            po.Color = pm.Color
            po.Size = Vector3.new(1.39, 1.345, 2.75) / Vector3.new(97.13, 136.216, 234.031)
            po.CFrame = pm.CFrame * CFrame.new(-0.169, -1.129, -0.013)
            po.MeshId = "rbxassetid://12972673898"
            po.CanCollide = false
            po.Massless = true
            po.Parent = pm
            local pp = Instance.new("WeldConstraint")
            pp.Part0 = po
            pp.Part1 = pm
            pp.Parent = pm
            local pq = Instance.new("MeshPart")
            pq.Color = pm.Color
            pq.Name = "Legs"
            pq.Size = Vector3.new(1.8, 1.2, 1.8) / Vector3.new(10.432, 8.105, 9.488)
            pq.CFrame = pm.CFrame * CFrame.new(0.047, -2.324, 0)
            pq.MeshId = "rbxassetid://13003181606"
            pq.CanCollide = false
            pq.Massless = true
            pq.Parent = pm
            local pr = Instance.new("MeshPart")
            pr.Color = pm.Color
            pr.Name = "Fan"
            pr.Size = Vector3.zero
            pr.CFrame = pm.CFrame * CFrame.new(0, -1.873, 0)
            pr.MeshId = "rbxassetid://13004977292"
            pr.CanCollide = false
            pr.Massless = true
            pr.Parent = pm
            local ps = {}
            for _, pt in ipairs(pi) do
                local a0 = Instance.new("Attachment")
                a0.Position = pt
                a0.Parent = pq
                local a1 = Instance.new("Attachment")
                a1.Position = pt + Vector3.new(0, 0, 0.18)
                a1.Parent = pq
                local pu = Instance.new("Trail")
                pu.Texture = "http://www.roblox.com/asset/?id=13005168530"
                pu.TextureMode = Enum.TextureMode.Static
                pu.Transparency = NumberSequence.new(0.5)
                pu.Color = ColorSequence.new(Color3.new(0.5, 0.5, 0.5))
                pu.Attachment0 = a0
                pu.Attachment1 = a1
                pu.Lifetime = 0.8
                pu.MaxLength = 60
                pu.MinLength = 0.1
                pu.Parent = pq
                table.insert(ps, pu)
            end
            ph.chair = pm
            ph.chairarms = po
            ph.chairlegs = pq
            ph.chairfan = pr
            ph.weld = pn
            ph.highlight = hn
            ph.trails = ps
        end
        local function pv(js)
            if not ph.active then
                return
            end
            pl(js)
            if ph.run_conn then
                ph.run_conn:Disconnect()
                ph.run_conn = nil
            end
            if not pg then
                return
            end
            ph.run_conn =
                pg.RenderStepped:Connect(
                function()
                    if not ph.chair then
                        return
                    end
                    local lU = pj()
                    local oD = lU and lU.Character
                    local jt = oD and oD:FindFirstChildOfClass("Humanoid")
                    local kA = oD and (oD:FindFirstChild("HumanoidRootPart") or oD:FindFirstChild("Torso"))
                    if not (jt and kA and jt.Health > 0) then
                        if ph.anim then
                            pcall(
                                function()
                                    ph.anim:Stop()
                                end
                            )
                            ph.anim = nil
                        end
                        return
                    end
                    if not (ph.anim and ph.anim.IsPlaying) then
                        local ju = Instance.new("Animation")
                        ju.AnimationId =
                            jt.RigType == Enum.HumanoidRigType.R15 and "http://www.roblox.com/asset/?id=2506281703" or
                            "http://www.roblox.com/asset/?id=178130996"
                        local pw = jt:FindFirstChildOfClass("Animator")
                        if not pw then
                            pw = Instance.new("Animator")
                            pw.Parent = jt
                        end
                        local jv = pw:LoadAnimation(ju)
                        jv.Priority = Enum.AnimationPriority.Action
                        jv.Looped = true
                        jv:Play(0.1, 1, 1)
                        ph.anim = jv
                    end
                    ph.chair.CFrame = kA.CFrame * CFrame.Angles(0, math.rad(-90), 0)
                    if ph.weld and ph.weld.Part1 ~= kA then
                        ph.weld.Part1 = kA
                    end
                    if ph.chairlegs then
                        ph.chairlegs.Velocity = Vector3.zero
                        ph.chairlegs.CFrame = ph.chair.CFrame * CFrame.new(0.047, -2.324, 0)
                    end
                    if ph.chairfan then
                        ph.chairfan.Velocity = Vector3.zero
                        ph.chairfan.CFrame =
                            ph.chair.CFrame * CFrame.new(0.047, -1.873, 0) *
                            CFrame.Angles(0, math.rad(os.clock() * 180 % 360), math.rad(180))
                    end
                end
            )
        end
        local function px()
            local lU = pj()
            if not lU then
                return
            end
            ph.active = true
            if ph.conn then
                ph.conn:Disconnect()
                ph.conn = nil
            end
            ph.conn =
                lU.CharacterAdded:Connect(
                function(js)
                    task.wait(0.3)
                    pv(js)
                end
            )
            if lU.Character then
                pv(lU.Character)
            end
        end
        local function py()
            ph.active = false
            if ph.run_conn then
                ph.run_conn:Disconnect()
                ph.run_conn = nil
            end
            if ph.conn then
                ph.conn:Disconnect()
                ph.conn = nil
            end
            if ph.anim then
                pcall(
                    function()
                        ph.anim:Stop()
                    end
                )
                ph.anim = nil
            end
            pk()
        end
        local pz =
            oA:toggle(
            {name = "GamingChair", flag = "gamingchair_enabled", default = false, callback = function(state)
                    if state then
                        px()
                    else
                        py()
                    end
                end}
        )
        pz:colorpicker(
            {name = "Color", flag = "gamingchair_color", color = ph.color, callback = function(oT)
                    local c = oT
                    if typeof(oT) == "table" then
                        c = oT.Color or oT.Color3 or oT.color
                    end
                    ph.color = c
                    if ph.highlight then
                        ph.highlight.OutlineColor = c
                    end
                end}
        )
    end
    do
        local pf = game and game.GetService and game:GetService("Players")
        local pg = game and game.GetService and game:GetService("RunService")
        Config = Config or {}
        Config.Trails =
            Config.Trails or
            {
                Enabled = false,
                Color = Color3.fromRGB(255, 255, 255),
                Transparency = 0.5,
                Length = 0.6,
                Width = 1,
                MinLength = 0.1,
                Type = "Basic",
                Origin = "Body"
            }
        local pA = {active = false, run_conn = nil, char_conn = nil, a0 = nil, a1 = nil, trail = nil, leg_attach = nil}
        local function pB(pC, pD)
            local t = pC or "Basic"
            local b = typeof(pD) == "number" and pD or 0.5
            b = math.clamp(b, 0, 1)
            if t == "Bright" then
                return NumberSequence.new(
                    {
                        NumberSequenceKeypoint.new(0, math.clamp(b * 0.2, 0, 1)),
                        NumberSequenceKeypoint.new(0.5, math.clamp(b * 0.5, 0, 1)),
                        NumberSequenceKeypoint.new(1, b)
                    }
                )
            elseif t == "Dash" then
                return NumberSequence.new(
                    {
                        NumberSequenceKeypoint.new(0, 1),
                        NumberSequenceKeypoint.new(0.5, b),
                        NumberSequenceKeypoint.new(1, 1)
                    }
                )
            elseif t == "Shadow" then
                return NumberSequence.new(
                    {NumberSequenceKeypoint.new(0, math.clamp(b * 0.8, 0, 1)), NumberSequenceKeypoint.new(1, 1)}
                )
            end
            return NumberSequence.new(b)
        end
        local function pE(pC, pD)
            local t = pC or "Basic"
            local l = typeof(pD) == "number" and pD or 0.6
            if t == "Bright" then
                return 1
            elseif t == "Dash" then
                return 0.25
            elseif t == "Shadow" then
                return 1
            end
            return l
        end
        local function pj()
            return pf and pf.LocalPlayer
        end
        local function pF(ky)
            if not ky then
                return
            end
            if not pA.a0 or pA.a0.Parent ~= ky then
                pA.a0 = Instance.new("Attachment")
                pA.a0.Name = "SimpleBotTrailA0"
                pA.a0.Position = Vector3.new(0.5, 0, 0)
                pA.a0.Parent = ky
            end
            if not pA.a1 or pA.a1.Parent ~= ky then
                pA.a1 = Instance.new("Attachment")
                pA.a1.Name = "SimpleBotTrailA1"
                pA.a1.Position = Vector3.new(-0.5, 0, 0)
                pA.a1.Parent = ky
            end
            if not pA.trail or pA.trail.Parent ~= ky then
                pA.trail = Instance.new("Trail")
                pA.trail.Name = "SimpleBotTrail"
                pA.trail.Parent = ky
            end
            pA.trail.Attachment0 = pA.a0
            pA.trail.Attachment1 = pA.a1
            if Config.Trails.Origin == "Legs" then
                pA.leg_attach = ky:FindFirstChild("CustomLegAttach")
                if not pA.leg_attach then
                    local pG = Instance.new("Attachment")
                    pG.Name = "CustomLegAttach"
                    pG.CFrame = CFrame.new(0, -2.7, 0)
                    pG.Parent = ky
                    pA.leg_attach = pG
                end
                if pA.a0 then
                    pA.a0.CFrame = pA.leg_attach.CFrame * CFrame.new(0, 0, -0.677116394)
                end
                if pA.a1 then
                    pA.a1.CFrame = pA.leg_attach.CFrame * CFrame.new(0, 0, 0.687942505)
                end
            else
                if pA.a0 then
                    pA.a0.CFrame = CFrame.new(0, 0, -0.677116394)
                end
                if pA.a1 then
                    pA.a1.CFrame = CFrame.new(0, 0, 0.687942505)
                end
            end
            pA.trail.Color = ColorSequence.new(Config.Trails.Color)
            pA.trail.Transparency = pB(Config.Trails.Type, Config.Trails.Transparency)
            pA.trail.Lifetime = pE(Config.Trails.Type, Config.Trails.Length)
            do
                local w = (Config.Trails.Width or 1) / 3.2
                local pH = Config.Trails.Type
                if pH == "Bright" or pH == "Dash" or pH == "Shadow" then
                    pA.trail.WidthScale =
                        NumberSequence.new({NumberSequenceKeypoint.new(0, w), NumberSequenceKeypoint.new(1, 0)})
                else
                    pA.trail.WidthScale = NumberSequence.new(w)
                end
            end
            if Config.Trails.Type == "Basic" then
                pA.trail.MinLength = 0
            else
                pA.trail.MinLength = Config.Trails.MinLength
            end
            pA.trail.FaceCamera = true
            pA.trail.Enabled = true
            local t = Config.Trails and Config.Trails.Type or "Basic"
            if t == "Bright" then
                pA.trail.Texture = "rbxassetid://9234319472"
                pA.trail.Brightness = 20
                pA.trail.LightEmission = 0
            elseif t == "Dash" then
                pA.trail.Texture = "http://www.roblox.com/asset/?id=13703813488"
                pA.trail.LightEmission = 1
                pA.trail.Brightness = 20
            elseif t == "Shadow" then
                pA.trail.Texture = "rbxassetid://9234319472"
                pA.trail.LightEmission = 0
                pA.trail.Brightness = 0
            elseif t == "Basic" then
                pA.trail.Texture = ""
                pA.trail.TextureMode = Enum.TextureMode.Static
                pA.trail.MaxLength = 400
                pA.trail.LightEmission = 1
            end
        end
        local function pI()
            if pA.trail then
                pA.trail.Enabled = false
            end
        end
        local function pJ()
            local lU = pj()
            local js = lU and lU.Character
            local ky = js and js:FindFirstChild("HumanoidRootPart")
            if not Config.Trails.Enabled or not ky then
                pI()
                return
            end
            pF(ky)
        end
        local function pv(js)
            if not pA.active then
                return
            end
            pJ()
        end
        local function pK()
            if pA.active then
                return
            end
            pA.active = true
            Config.Trails.Enabled = true
            local lU = pj()
            if pA.char_conn then
                pA.char_conn:Disconnect()
                pA.char_conn = nil
            end
            if lU then
                pA.char_conn =
                    lU.CharacterAdded:Connect(
                    function(js)
                        task.wait(0.1)
                        pv(js)
                    end
                )
                if lU.Character then
                    pv(lU.Character)
                end
            end
            if pA.run_conn then
                pA.run_conn:Disconnect()
                pA.run_conn = nil
            end
            if pg then
                pA.run_conn = pg.RenderStepped:Connect(pJ)
            end
        end
        local function pL()
            pA.active = false
            Config.Trails.Enabled = false
            if pA.run_conn then
                pA.run_conn:Disconnect()
                pA.run_conn = nil
            end
            if pA.char_conn then
                pA.char_conn:Disconnect()
                pA.char_conn = nil
            end
            pI()
        end
        local pM =
            oA:toggle(
            {name = "Trail", flag = "trail_enabled", default = false, callback = function(state)
                    if state then
                        pK()
                    else
                        pL()
                    end
                end}
        )
        pM:colorpicker(
            {name = "Color", flag = "trail_color", color = Config.Trails.Color, callback = function(oT)
                    local c = oT
                    if typeof(oT) == "table" then
                        c = oT.Color or oT.Color3 or oT.color
                    end
                    Config.Trails.Color = c
                    pJ()
                end}
        )
        local pN = oA:dependency_box()
        pN:setup_dependencies({{pM, true}})
        pN:dropdown(
            {
                name = "Type",
                flag = "trail_type",
                items = {"Basic", "Bright", "Dash", "Shadow"},
                default = Config.Trails.Type or "Basic",
                callback = function(jx)
                    Config.Trails.Type = jx or "Basic"
                    pJ()
                end
            }
        )
        pN:dropdown(
            {
                name = "Origin",
                flag = "trail_origin",
                items = {"Body", "Legs"},
                default = Config.Trails.Origin or "Body",
                callback = function(jx)
                    Config.Trails.Origin = jx or "Body"
                    pJ()
                end
            }
        )
        pN:slider(
            {
                name = "Len",
                flag = "trail_len",
                min = 0.05,
                max = 3,
                default = Config.Trails.Length or 0.6,
                interval = 0.05,
                callback = function(v)
                    Config.Trails.Length = v
                    pJ()
                end
            }
        )
        pN:slider(
            {
                name = "Wdt",
                flag = "trail_wdt",
                min = 0.05,
                max = 10,
                default = Config.Trails.Width or 1,
                interval = 0.05,
                callback = function(v)
                    Config.Trails.Width = v
                    pJ()
                end
            }
        )
        pN:slider(
            {
                name = "Trs",
                flag = "trail_trs",
                min = 0,
                max = 1,
                default = Config.Trails.Transparency or 0.5,
                interval = 0.05,
                callback = function(v)
                    Config.Trails.Transparency = v
                    pJ()
                end
            }
        )
        pN:slider(
            {
                name = "Min",
                flag = "trail_min",
                min = 0,
                max = 1,
                default = Config.Trails.MinLength or 0.1,
                interval = 0.01,
                callback = function(v)
                    Config.Trails.MinLength = v
                    pJ()
                end
            }
        )
    end
    do
        Config = Config or {}
        Config.JumpCircles =
            Config.JumpCircles or
            {Enabled = false, Size = 6, Color1 = Color3.new(1, 1, 1), LifeAfterMax = 0, Type = "v1", Transparency = 0}
        local pO = {active = false, hum_conn = nil, char_conn = nil, color = Config.JumpCircles.Color1}
        local function pP()
            local t = Config.JumpCircles and Config.JumpCircles.Type or "v1"
            if t == "v2" then
                return "rbxassetid://7185003058"
            end
            if t == "v3" then
                return "rbxassetid://12363804869"
            end
            if t == "v4" then
                return "rbxassetid://12363857726"
            end
            return "rbxassetid://7216856276"
        end
        local function pQ(pt, pR)
            local oY = Instance.new("Part")
            oY.Name = "SB_JumpCircle"
            oY.Anchored = true
            oY.CanCollide = false
            oY.Material = Enum.Material.SmoothPlastic
            oY.Transparency = 1
            oY.Size = Vector3.new(1, 0.05, 1)
            oY.CFrame = CFrame.new(pt)
            oY.Parent = workspace
            local pS = Instance.new("SurfaceGui")
            pS.Name = "SB_JumpCircleGui"
            pS.Face = Enum.NormalId.Top
            pS.AlwaysOnTop = true
            pS.SizingMode = Enum.SurfaceGuiSizingMode.PixelsPerStud
            pS.PixelsPerStud = 64
            pS.Parent = oY
            local pT = Instance.new("ImageLabel")
            pT.Name = "Image"
            pT.BackgroundTransparency = 1
            pT.Image = pP()
            pT.ImageColor3 = pR or pO.color or Config.JumpCircles and Config.JumpCircles.Color1 or Color3.new(1, 1, 1)
            pT.ImageTransparency = Config.JumpCircles and Config.JumpCircles.Transparency or 0
            pT.Size = UDim2.fromScale(1, 1)
            pT.Parent = pS
            task.spawn(
                function(p)
                    local pU = game:GetService("RunService")
                    local g = p and p:FindFirstChild("SB_JumpCircleGui")
                    local iu = g and g:FindFirstChild("Image")
                    local t, pV = 0, 0.6
                    while t < pV do
                        t = t + pU.Heartbeat:Wait()
                        local k = math.clamp(t / pV, 0, 1)
                        local s = (Config.JumpCircles and Config.JumpCircles.Size or 6) * k
                        if p then
                            p.Size = Vector3.new(math.max(0.1, s), 0.05, math.max(0.1, s))
                        end
                        if iu then
                            iu.ImageTransparency = Config.JumpCircles and Config.JumpCircles.Transparency or 0
                        end
                    end
                    local pW = Config.JumpCircles and Config.JumpCircles.LifeAfterMax or 0
                    if pW > 0 then
                        local hv = 0
                        while hv < pW do
                            hv = hv + pU.Heartbeat:Wait()
                            if iu then
                                iu.ImageTransparency = Config.JumpCircles and Config.JumpCircles.Transparency or 0
                            end
                        end
                    end
                    if p then
                        p:Destroy()
                    end
                end,
                oY
            )
        end
        local function pv(js)
            if not js then
                return
            end
            local jt = js:FindFirstChildOfClass("Humanoid")
            if not jt then
                return
            end
            if pO.hum_conn then
                pO.hum_conn:Disconnect()
                pO.hum_conn = nil
            end
            pO.hum_conn =
                jt.StateChanged:Connect(
                function(_, pX)
                    if not pO.active then
                        return
                    end
                    if pX ~= Enum.HumanoidStateType.Jumping then
                        return
                    end
                    local ky = js:FindFirstChild("HumanoidRootPart")
                    if not ky then
                        return
                    end
                    local pY = ky.Position
                    local pZ = RaycastParams.new()
                    pZ.FilterType = Enum.RaycastFilterType.Blacklist
                    pZ.FilterDescendantsInstances = {js}
                    local p_ = workspace:Raycast(pY, Vector3.new(0, -25, 0), pZ)
                    local pt = p_ and p_.Position + Vector3.new(0, -0.1, 0) or pY + Vector3.new(0, -2.8, 0)
                    pQ(pt, pO.color)
                end
            )
        end
        local function q0()
            pO.active = true
            Config.JumpCircles.Enabled = true
            pO.color = Config.JumpCircles.Color1
            local lU = vars and vars.lp or game:GetService("Players").LocalPlayer
            if pO.char_conn then
                pO.char_conn:Disconnect()
                pO.char_conn = nil
            end
            pO.char_conn =
                lU.CharacterAdded:Connect(
                function(ch)
                    task.defer(
                        function()
                            pv(ch)
                        end
                    )
                end
            )
            if lU.Character then
                pv(lU.Character)
            end
        end
        local function q1()
            pO.active = false
            Config.JumpCircles.Enabled = false
            if pO.hum_conn then
                pO.hum_conn:Disconnect()
                pO.hum_conn = nil
            end
            if pO.char_conn then
                pO.char_conn:Disconnect()
                pO.char_conn = nil
            end
        end
        local q2 =
            oA:toggle(
            {
                name = "JumpCircles",
                flag = "jumpcircles_enabled",
                default = Config.JumpCircles.Enabled,
                callback = function(state)
                    if state then
                        q0()
                    else
                        q1()
                    end
                end
            }
        )
        q2:colorpicker(
            {name = "Color", flag = "jumpcircles_color", color = Config.JumpCircles.Color1, callback = function(oT)
                    local c = oT
                    if typeof(oT) == "table" then
                        c = oT.Color or oT.Color3 or oT.color
                    end
                    Config.JumpCircles.Color1 = c
                    pO.color = c
                end}
        )
        local q3 = oA:dependency_box()
        q3:setup_dependencies({{q2, true}})
        q3:dropdown(
            {
                name = "Type",
                flag = "jumpcircles_type",
                items = {"v1", "v2", "v3", "v4"},
                default = Config.JumpCircles and Config.JumpCircles.Type or "v1",
                callback = function(jx)
                    Config.JumpCircles.Type = jx or "v1"
                end
            }
        )
        q3:slider(
            {
                name = "Sz",
                flag = "jumpcircles_size",
                min = 0.1,
                max = 12,
                default = Config.JumpCircles and Config.JumpCircles.Size or 6,
                interval = 0.1,
                callback = function(v)
                    Config.JumpCircles.Size = v
                end
            }
        )
        q3:slider(
            {
                name = "Life",
                flag = "jumpcircles_life",
                min = 0,
                max = 3,
                default = Config.JumpCircles and Config.JumpCircles.LifeAfterMax or 0,
                interval = 0.05,
                callback = function(v)
                    Config.JumpCircles.LifeAfterMax = v
                end
            }
        )
        q3:slider(
            {
                name = "Trs",
                flag = "jumpcircles_transparency",
                min = 0,
                max = 1,
                default = Config.JumpCircles and Config.JumpCircles.Transparency or 0,
                interval = 0.05,
                callback = function(v)
                    Config.JumpCircles.Transparency = v
                end
            }
        )
    end
    do
        Config = Config or {}
        Config.ColorCorrection =
            Config.ColorCorrection or
            {Enabled = false, Brightness = 0, Contrast = 0, Saturation = 0, TintColor = Color3.fromRGB(255, 255, 255)}
        Config.Ambient = Config.Ambient or {Enabled = false, Color = Color3.fromRGB(255, 255, 255)}
        Config.Atmosphere =
            Config.Atmosphere or
            {
                Enabled = false,
                Color = Color3.fromRGB(255, 255, 255),
                Decay = Color3.fromRGB(0, 0, 0),
                Density = 0,
                Offset = 0,
                Glare = 0,
                Haze = 0
            }
        Config.Bloom = Config.Bloom or {Enabled = false, Intensity = 1, Size = 24, Threshold = 0.7}
        Config.Textures = Config.Textures or {Enabled = false, Selected = "Plastic"}
        Config.Skybox = Config.Skybox or {Enabled = false, Selected = "Night Sky"}
        Config.Time = Config.Time or {Enabled = false, Hours = 12, Minutes = 0}
        Config.FOV = Config.FOV or {Enabled = false, Value = 70}
        Config.AspectRatio = Config.AspectRatio or {Enabled = false, Horizontal = 100, Vertical = 100}
        Config.ThirdPerson = Config.ThirdPerson or {Enabled = false, X = 0, Y = 0, Z = 0}
        Config.Crosshair =
            Config.Crosshair or
            {
                Enabled = false,
                Sides = 4,
                Length = 10,
                GapSize = 5,
                Thickness = 2,
                CrosshairColor = Color3.fromRGB(255, 255, 255),
                OutlineColor = Color3.fromRGB(0, 0, 0),
                AttachToTarget = false,
                AlwaysRotating = false,
                Speed = 1,
                Pulse = false,
                Position = "mouse",
                UseInset = true
            }
        local function q4()
            local q5 = game and game.GetService and game:GetService("Lighting")
            if not q5 then
                return
            end
            for _, nh in ipairs(q5:GetChildren()) do
                if nh.ClassName == "ColorCorrectionEffect" and nh.Name == "RebuilColorCorrection" then
                    nh:Destroy()
                end
            end
            local q6 = "RebuildColorCorrection"
            local cc = Config.ColorCorrection or {}
            if not (cc.Enabled and true or false) then
                local q7 = q5:FindFirstChild(q6)
                if q7 then
                    q7:Destroy()
                end
                return
            end
            local q8 = q5:FindFirstChild(q6)
            if not q8 then
                q8 = Instance.new("ColorCorrectionEffect")
                q8.Name = q6
                q8.Parent = q5
            end
            local b = typeof(cc.Brightness) == "number" and math.clamp(cc.Brightness, -0.5, 0.5) or 0
            local ct = typeof(cc.Contrast) == "number" and math.clamp(cc.Contrast, 0, 1) or 0
            local s = typeof(cc.Saturation) == "number" and math.clamp(cc.Saturation, -0.5, 0.5) or 0
            q8.Brightness = b
            q8.Contrast = ct
            q8.Saturation = s
            if cc.TintColor then
                local c = cc.TintColor
                if typeof(c) == "table" then
                    c = c.Color or c.Color3 or c.color
                end
                q8.TintColor = c
            end
            q8.Enabled = true
        end
        local q9 = {originals = {}, connections = {}, materials = nil}
        local pf = B and B.ps or game and game.GetService and game:GetService("Players")
        local qa = game and game.GetService and game:GetService("Workspace") or workspace
        local function qb(kz)
            local oY = kz
            while oY and oY.Parent do
                if oY:IsA("Model") then
                    local jt = oY:FindFirstChildOfClass("Humanoid")
                    if jt then
                        local qc = pf and pf:GetPlayerFromCharacter(oY)
                        return qc ~= nil
                    end
                end
                oY = oY.Parent
            end
            return false
        end
        local function qd()
            if q9.materials then
                return q9.materials
            end
            local qe = {}
            for _, m in ipairs(Enum.Material:GetEnumItems()) do
                table.insert(qe, m.Name)
            end
            q9.materials = qe
            return qe
        end
        local function qf(oY)
            if not oY or not oY:IsA("BasePart") then
                return
            end
            if qb(oY) then
                return
            end
            if q9.originals[oY] == nil then
                q9.originals[oY] = oY.Material
            end
            local qg = Config.Textures and Config.Textures.Selected or "Plastic"
            local qh = Enum.Material[qg] or Enum.Material.Plastic
            oY.Material = qh
        end
        local function qi()
            if not qa then
                return
            end
            for _, d in ipairs(qa:GetDescendants()) do
                if d:IsA("BasePart") then
                    qf(d)
                end
            end
            if q9.connections.DescAdded then
                if typeof(q9.connections.DescAdded) == "RBXScriptConnection" then
                    q9.connections.DescAdded:Disconnect()
                end
                q9.connections.DescAdded = nil
            end
            q9.connections.DescAdded =
                qa.DescendantAdded:Connect(
                function(d)
                    if d and d:IsA("BasePart") then
                        qf(d)
                    end
                end
            )
        end
        local function qj()
            for k, qk in pairs(q9.connections) do
                if typeof(qk) == "RBXScriptConnection" then
                    qk:Disconnect()
                end
                q9.connections[k] = nil
            end
            for kz, qh in pairs(q9.originals) do
                if kz and kz.Parent then
                    pcall(
                        function()
                            kz.Material = qh
                        end
                    )
                end
            end
            q9.originals = {}
        end
        local ql = {
            ["Purple Nebula"] = {
                SkyboxBk = "rbxassetid://159454299",
                SkyboxDn = "rbxassetid://159454296",
                SkyboxFt = "rbxassetid://159454293",
                SkyboxLf = "rbxassetid://159454286",
                SkyboxRt = "rbxassetid://159454300",
                SkyboxUp = "rbxassetid://159454288"
            },
            ["Night Sky"] = {
                SkyboxBk = "rbxassetid://12064107",
                SkyboxDn = "rbxassetid://12064152",
                SkyboxFt = "rbxassetid://12064121",
                SkyboxLf = "rbxassetid://12063984",
                SkyboxRt = "rbxassetid://12064115",
                SkyboxUp = "rbxassetid://12064131"
            },
            ["Pink Daylight"] = {
                SkyboxBk = "rbxassetid://271042516",
                SkyboxDn = "rbxassetid://271077243",
                SkyboxFt = "rbxassetid://271042556",
                SkyboxLf = "rbxassetid://271042310",
                SkyboxRt = "rbxassetid://271042467",
                SkyboxUp = "rbxassetid://271077958"
            },
            ["Morning Glow"] = {
                SkyboxBk = "rbxassetid://1417494030",
                SkyboxDn = "rbxassetid://1417494146",
                SkyboxFt = "rbxassetid://1417494253",
                SkyboxLf = "rbxassetid://1417494402",
                SkyboxRt = "rbxassetid://1417494499",
                SkyboxUp = "rbxassetid://1417494643"
            },
            ["Setting Sun"] = {
                SkyboxBk = "rbxassetid://626460377",
                SkyboxDn = "rbxassetid://626460216",
                SkyboxFt = "rbxassetid://626460513",
                SkyboxLf = "rbxassetid://626473032",
                SkyboxRt = "rbxassetid://626458639",
                SkyboxUp = "rbxassetid://626460625"
            },
            ["Cache"] = {
                SkyboxBk = "rbxassetid://220513302",
                SkyboxDn = "rbxassetid://213221473",
                SkyboxFt = "rbxassetid://220513328",
                SkyboxLf = "rbxassetid://220513318",
                SkyboxRt = "rbxassetid://220513279",
                SkyboxUp = "rbxassetid://220513345"
            },
            ["Fade Blue"] = {
                SkyboxBk = "rbxassetid://153695414",
                SkyboxDn = "rbxassetid://153695352",
                SkyboxFt = "rbxassetid://153695452",
                SkyboxLf = "rbxassetid://153695320",
                SkyboxRt = "rbxassetid://153695383",
                SkyboxUp = "rbxassetid://153695471"
            },
            ["Elegant Morning"] = {
                SkyboxBk = "rbxassetid://153767241",
                SkyboxDn = "rbxassetid://153767216",
                SkyboxFt = "rbxassetid://153767266",
                SkyboxLf = "rbxassetid://153767200",
                SkyboxRt = "rbxassetid://153767231",
                SkyboxUp = "rbxassetid://153767288"
            },
            ["Neptune"] = {
                SkyboxBk = "rbxassetid://218955819",
                SkyboxDn = "rbxassetid://218953419",
                SkyboxFt = "rbxassetid://218954524",
                SkyboxLf = "rbxassetid://218958493",
                SkyboxRt = "rbxassetid://218957134",
                SkyboxUp = "rbxassetid://218950090"
            },
            ["Redshift"] = {
                SkyboxBk = "rbxassetid://401664839",
                SkyboxDn = "rbxassetid://401664862",
                SkyboxFt = "rbxassetid://401664960",
                SkyboxLf = "rbxassetid://401664881",
                SkyboxRt = "rbxassetid://401664901",
                SkyboxUp = "rbxassetid://401664936"
            },
            ["Aesthetic Night"] = {
                SkyboxBk = "rbxassetid://1045964490",
                SkyboxDn = "rbxassetid://1045964368",
                SkyboxFt = "rbxassetid://1045964655",
                SkyboxLf = "rbxassetid://1045964655",
                SkyboxRt = "rbxassetid://1045964655",
                SkyboxUp = "rbxassetid://1045962969"
            },
            ["Minecraft"] = {
                SkyboxBk = "rbxassetid://1876545003",
                SkyboxDn = "rbxassetid://1876544331",
                SkyboxFt = "rbxassetid://1876542941",
                SkyboxLf = "rbxassetid://1876543392",
                SkyboxRt = "rbxassetid://1876543764",
                SkyboxUp = "rbxassetid://1876544642"
            }
        }
        local function qm()
            if q9 and q9.s_items then
                return q9.s_items
            end
            local t = {}
            for qn, _ in pairs(ql) do
                table.insert(t, qn)
            end
            table.sort(t)
            if q9 then
                q9.s_items = t
            end
            return t
        end
        local function qo()
            local q5 = game and game.GetService and game:GetService("Lighting")
            if not q5 then
                return
            end
            local qp = Config.Skybox or {}
            local q6 = "RebuildSky"
            if not (qp.Enabled and true or false) then
                local q7 = q5:FindFirstChild(q6)
                if q7 then
                    q7:Destroy()
                end
                return
            end
            local q8 = q5:FindFirstChild(q6)
            if not q8 then
                q8 = Instance.new("Sky")
                q8.Name = q6
                q8.Parent = q5
            end
            local qg = qp.Selected or "Night Sky"
            local qq = ql[qg]
            if not qq then
                return
            end
            q8.SkyboxBk = qq.SkyboxBk
            q8.SkyboxDn = qq.SkyboxDn
            q8.SkyboxFt = qq.SkyboxFt
            q8.SkyboxLf = qq.SkyboxLf
            q8.SkyboxRt = qq.SkyboxRt
            q8.SkyboxUp = qq.SkyboxUp
        end
        local qr
        local function qs()
            local q5 = game and game.GetService and game:GetService("Lighting")
            if not q5 then
                return
            end
            local qt = Config.Time or {}
            local qu = qt.Enabled and true or false
            if qu then
                if qr == nil then
                    qr = q5.ClockTime
                end
                local h = typeof(qt.Hours) == "number" and math.clamp(qt.Hours, 0, 23) or 12
                local m = typeof(qt.Minutes) == "number" and math.clamp(qt.Minutes, 0, 59) or 0
                q5.ClockTime = h + m / 60
            else
                if qr ~= nil then
                    q5.ClockTime = qr
                    qr = nil
                end
            end
        end
        local qv
        local qw
        local function qx()
            local no = qa or game and game.GetService and game:GetService("Workspace") or workspace
            local qy = no and no.CurrentCamera
            if not qy then
                return
            end
            local fe = Config.FOV or {}
            if fe.Enabled then
                if qv == nil then
                    qv = qy.FieldOfView
                end
                local v = typeof(fe.Value) == "number" and math.clamp(fe.Value, 1, 180) or 70
                qy.FieldOfView = v
                if qw then
                    if typeof(qw) == "RBXScriptConnection" then
                        qw:Disconnect()
                    end
                    qw = nil
                end
                local qz = B and B.run
                if qz and qz.RenderStepped then
                    qw =
                        qz.RenderStepped:Connect(
                        function()
                            qy.FieldOfView = v
                        end
                    )
                end
            else
                if qw then
                    if typeof(qw) == "RBXScriptConnection" then
                        qw:Disconnect()
                    end
                    qw = nil
                end
                if qv ~= nil then
                    pcall(
                        function()
                            qy.FieldOfView = qv
                        end
                    )
                    qv = nil
                end
            end
        end
        local qA
        local function qB()
            local no = qa or game and game.GetService and game:GetService("Workspace") or workspace
            local qy = no and no.CurrentCamera
            if not qy then
                return
            end
            local qC = Config.AspectRatio or {}
            local qu = qC.Enabled and true or false
            if qA then
                if typeof(qA) == "RBXScriptConnection" then
                    pcall(
                        function()
                            qA:Disconnect()
                        end
                    )
                end
                qA = nil
            end
            if not qu then
                return
            end
            local qz = B and B.run
            if qz and qz.RenderStepped then
                qA =
                    qz.RenderStepped:Connect(
                    function()
                        local qD = typeof(qC.Horizontal) == "number" and qC.Horizontal or 100
                        local qE = typeof(qC.Vertical) == "number" and qC.Vertical or 100
                        local h = math.clamp(qD, 50, 120) / 100
                        local v = math.clamp(qE, 50, 120) / 100
                        local X, Y, Z, qF, qG, qH, qI, qJ, qK, qL, qM, qN = qy.CFrame:GetComponents()
                        qy.CFrame = CFrame.new(X, Y, Z, qF * h, qG * v, qH, qI, qJ * v, qK, qL * h, qM * v, qN)
                    end
                )
            end
        end
        local qO
        local function qP()
            local no = qa or game and game.GetService and game:GetService("Workspace") or workspace
            local qy = no and no.CurrentCamera
            if not qy then
                return
            end
            local qQ = Config.ThirdPerson or {}
            if qO then
                if typeof(qO) == "RBXScriptConnection" then
                    pcall(
                        function()
                            qO:Disconnect()
                        end
                    )
                end
                qO = nil
            end
            if not (qQ.Enabled and true or false) then
                return
            end
            local qz = B and B.run
            if qz and qz.RenderStepped then
                qO =
                    qz.RenderStepped:Connect(
                    function()
                        local x = typeof(qQ.X) == "number" and qQ.X or 0
                        local y = typeof(qQ.Y) == "number" and qQ.Y or 0
                        local z = typeof(qQ.Z) == "number" and qQ.Z or 0
                        qy.CFrame = qy.CFrame * CFrame.new(x, y, z)
                    end
                )
            end
        end
        local qR = {lines = {}, outlines = {}, connection = nil, line_offsets = {}, spin_angle = 0, cursor_size = 0}
        local function qS(qT)
            qR.line_offsets = {}
            local qU = 2 * math.pi / qT
            for i = 1, qT do
                qR.line_offsets[i] = (i - 1) * qU
            end
        end
        local function qV()
            for i = 1, #qR.lines do
                if qR.lines[i] then
                    qR.lines[i]:Remove()
                end
                if qR.outlines[i] then
                    qR.outlines[i]:Remove()
                end
            end
            qR.lines = {}
            qR.outlines = {}
            local qW = B and B.drawing or Drawing
            if not qW then
                return
            end
            for i = 1, Config.Crosshair.Sides do
                qR.lines[i] = qW.new("Line")
                qR.lines[i].Visible = false
                qR.lines[i].Color = Config.Crosshair.CrosshairColor
                qR.lines[i].Thickness = Config.Crosshair.Thickness
                qR.lines[i].ZIndex = 2
                qR.lines[i].Transparency = 1
                qR.outlines[i] = qW.new("Line")
                qR.outlines[i].Visible = false
                qR.outlines[i].Color = Config.Crosshair.OutlineColor
                qR.outlines[i].Thickness = Config.Crosshair.Thickness + 2
                qR.outlines[i].ZIndex = 1
                qR.outlines[i].Transparency = 1
            end
            qS(Config.Crosshair.Sides)
        end
        local function qX()
            if not Config.Crosshair.Enabled then
                for i = 1, #qR.lines do
                    if qR.lines[i] then
                        qR.lines[i].Visible = false
                    end
                    if qR.outlines[i] then
                        qR.outlines[i].Visible = false
                    end
                end
                return
            end
            local qY = B and B.uis or game and game.GetService and game:GetService("UserInputService")
            if not qY then
                return
            end
            local qZ = B and B.camera or workspace and workspace.CurrentCamera
            local q_ = qY:GetMouseLocation()
            local r0 = q_
            local r1 = Config.Crosshair and Config.Crosshair.Position or "mouse"
            if type(r1) == "string" then
                r1 = string.lower(r1)
            end
            if r1 == "center" and qZ and qZ.ViewportSize then
                r0 = Vector2.new(qZ.ViewportSize.X / 2, qZ.ViewportSize.Y / 2)
            end
            if Config.Crosshair and Config.Crosshair.AttachToTarget and qZ then
                local r2 = _G and _G.targeting_state or nil
                local r3 = r2 and r2.current
                if r3 and r3.Character then
                    local js = r3.Character
                    local r4 = g and g["aimbot_part"]
                    local oY = r4 and js:FindFirstChild(r4) or C and C.GetPreferredPart and C:GetPreferredPart(js)
                    if oY then
                        local r5, r6 = qZ:WorldToViewportPoint(oY.Position)
                        if r6 then
                            r0 = Vector2.new(r5.X, r5.Y)
                        end
                    end
                end
            end
            if Config.Crosshair.AlwaysRotating then
                qR.spin_angle = qR.spin_angle + math.rad(Config.Crosshair.Speed * 10 * 1 / 60)
            else
                qR.spin_angle = 0
            end
            local r7 = Config.Crosshair.Length * 5
            local r8 = Config.Crosshair.GapSize
            qR.cursor_size = qR.cursor_size + 0.025
            local r9 = r7
            if Config.Crosshair.Pulse then
                local ra = math.cos(qR.cursor_size)
                r9 = r7 - r7 / 4 * math.abs(ra)
            end
            for i = 1, #qR.lines do
                if qR.lines[i] and qR.line_offsets[i] then
                    local rb = qR.spin_angle + qR.line_offsets[i]
                    local rc = Vector2.new(math.cos(rb), math.sin(rb)).Unit
                    qR.lines[i].From = r0 + rc * r8
                    qR.lines[i].To = qR.lines[i].From + rc * r9
                    qR.lines[i].Visible = true
                    qR.lines[i].Color = Config.Crosshair.CrosshairColor
                    qR.lines[i].Thickness = Config.Crosshair.Thickness
                    if qR.outlines[i] then
                        qR.outlines[i].From = r0 + rc * (r8 - 1)
                        qR.outlines[i].To = qR.lines[i].From + rc * (r9 + 1)
                        qR.outlines[i].Visible = true
                        qR.outlines[i].Color = Config.Crosshair.OutlineColor
                        qR.outlines[i].Thickness = Config.Crosshair.Thickness + 2
                    end
                end
            end
        end
        local function rd()
            if qR.connection then
                if typeof(qR.connection) == "RBXScriptConnection" then
                    pcall(
                        function()
                            qR.connection:Disconnect()
                        end
                    )
                end
                qR.connection = nil
            end
            if Config.Crosshair.Enabled then
                qV()
                local qz = B and B.run or game and game.GetService and game:GetService("RunService")
                if qz and qz.RenderStepped then
                    qR.connection = qz.RenderStepped:Connect(qX)
                end
            else
                qX()
            end
            if apply_mouse_icon then
                apply_mouse_icon()
            end
        end
        local re
        local function apply_mouse_icon()
            local qY = B and B.uis or game and game.GetService and game:GetService("UserInputService")
            if not qY then
                return
            end
            local he = Config.Crosshair and Config.Crosshair.HideCursor and true or false
            if he then
                if re == nil then
                    re = qY.MouseIconEnabled
                end
                qY.MouseIconEnabled = false
            else
                if re ~= nil then
                    qY.MouseIconEnabled = re
                    re = nil
                else
                    qY.MouseIconEnabled = true
                end
            end
        end
        do
            Config.Indicators = Config.Indicators or {Enabled = false, Selected = {}}
            Config.Indicators.ClientName =
                Config.Indicators.ClientName ~= nil and Config.Indicators.ClientName or "Rebuild.gg"
            Config.Indicators.InfoSize = Config.Indicators.InfoSize ~= nil and Config.Indicators.InfoSize or 14
            Config.Indicators.ClientSize = Config.Indicators.ClientSize ~= nil and Config.Indicators.ClientSize or 16
            local rf = {drawings = {}, connection = nil, last_clock = nil, fps_smooth = nil}
            local function rg()
                local qg = Config.Indicators and Config.Indicators.Selected or {}
                if type(qg) ~= "table" then
                    return {}
                end
                return qg
            end
            local function rh(qn)
                local qW = B and B.drawing or Drawing
                if not rf.drawings[qn] and qW and qW.new then
                    local t = qW.new("Text")
                    t.Visible = false
                    t.Color = Color3.new(1, 1, 1)
                    t.Center = false
                    t.Outline = true
                    t.OutlineColor = Color3.new(0, 0, 0)
                    t.Transparency = 1
                    t.Size = 13
                    t.Font = 2
                    rf.drawings[qn] = t
                end
                return rf.drawings[qn]
            end
            local function ri()
                for _, nh in pairs(rf.drawings) do
                    if nh then
                        nh.Visible = false
                    end
                end
            end
            local function rj()
                if not (Config.Indicators and Config.Indicators.Enabled) then
                    ri()
                    return
                end
                local qY = B and B.uis or game and game.GetService and game:GetService("UserInputService")
                local qZ = B and B.camera or workspace and workspace.CurrentCamera
                if not qY or not qZ then
                    ri()
                    return
                end
                local rk = qY:GetMouseLocation()
                local rl = Vector2.new(rk.X + 12, rk.Y + 12)
                local rm = rg()
                local rn = {}
                local y = 0
                local pf = B and B.ps or game and game.GetService and game:GetService("Players")
                local lU = pf and pf.LocalPlayer
                local ro = lU and lU.Character
                local rp = ro and ro:FindFirstChildOfClass("Humanoid")
                local rq = ro and (ro:FindFirstChild("HumanoidRootPart") or ro:FindFirstChild("Head"))
                local r2 = _G and _G.targeting_state or nil
                local r3 = r2 and r2.current
                local rr = r3 and r3.Character and r3.Character:FindFirstChildOfClass("Humanoid")
                local rs =
                    r3 and r3.Character and
                    (r3.Character:FindFirstChild("HumanoidRootPart") or r3.Character:FindFirstChild("Head"))
                local rt = os.clock()
                if rf.last_clock then
                    local du = math.max(rt - rf.last_clock, 1e-6)
                    local ru = 1 / du
                    rf.fps_smooth = rf.fps_smooth and rf.fps_smooth * 0.9 + ru * 0.1 or ru
                end
                rf.last_clock = rt
                local rv = false
                for _, k in ipairs(rm) do
                    if tostring(k) == "ClientName" then
                        rv = true
                        break
                    end
                end
                if rv then
                    local im = "ClientName"
                    rn[im] = true
                    local nh = rh(im)
                    if nh then
                        local rw = Config.Indicators and Config.Indicators.ClientName or "Rebuild.gg"
                        nh.Size = Config.Indicators and Config.Indicators.ClientSize or 16
                        nh.Text = rw
                        nh.Position = Vector2.new(rl.X, rl.Y + y)
                        nh.Visible = true
                        y = y + nh.Size + 2
                    end
                end
                for _, rx in ipairs(rm) do
                    local im = tostring(rx)
                    if im ~= "ClientName" then
                        rn[im] = true
                        local nh = rh(im)
                        if nh then
                            local rw = nil
                            if im == "localplayerHP" then
                                local hr = rp and rp.Health or 0
                                rw = ("HP %d"):format(math.floor(hr + 0.5))
                            elseif im == "TargetHP" then
                                local ry = rr and rr.Health or nil
                                if ry then
                                    rw = ("THP %d"):format(math.floor(ry + 0.5))
                                end
                            elseif im == "LocalPlayerSpeed" then
                                local jw = rq and rq.Velocity and rq.Velocity.Magnitude or 0
                                rw = ("Spd %d"):format(math.floor(jw + 0.5))
                            elseif im == "TargetDistance" then
                                local rz = rq and rs and (rq.Position - rs.Position).Magnitude or nil
                                if rz then
                                    rw = ("Dist %d"):format(math.floor(rz + 0.5))
                                end
                            elseif im == "FPS" then
                                local rA = rf.fps_smooth and math.floor(rf.fps_smooth + 0.5) or nil
                                if rA then
                                    rw = ("FPS %d"):format(rA)
                                end
                            elseif im == "Ping" then
                                local rB
                                local rC = B and B.stats or game and game.GetService and game:GetService("Stats")
                                if rC and rC.Network and rC.Network.ServerStatsItem then
                                    local nq, rD =
                                        pcall(
                                        function()
                                            return rC.Network.ServerStatsItem["Data Ping"]:GetValueString()
                                        end
                                    )
                                    if nq and type(rD) == "string" then
                                        local n = rD:match("(%d+)")
                                        rB = tonumber(n)
                                    end
                                end
                                if rB then
                                    rw = ("Ping %d"):format(rB)
                                end
                            elseif im == "ClockTime" then
                                local q5 = game and game.GetService and game:GetService("Lighting")
                                if q5 then
                                    local ct = q5.ClockTime or 0
                                    local h = math.floor(ct) % 24
                                    local m = math.floor((ct - h) * 60 + 0.5) % 60
                                    rw = ("Time %02d:%02d"):format(h, m)
                                end
                            end
                            if rw then
                                nh.Size = Config.Indicators and Config.Indicators.InfoSize or 14
                                nh.Text = rw
                                nh.Position = Vector2.new(rl.X, rl.Y + y)
                                nh.Visible = true
                                y = y + nh.Size + 2
                            else
                                nh.Visible = false
                            end
                        end
                    end
                end
                for qn, nh in pairs(rf.drawings) do
                    if nh and not rn[qn] then
                        nh.Visible = false
                    end
                end
            end
            function apply_indicators()
                if rf.connection and typeof(rf.connection) == "RBXScriptConnection" then
                    pcall(
                        function()
                            rf.connection:Disconnect()
                        end
                    )
                end
                rf.connection = nil
                if Config.Indicators and Config.Indicators.Enabled then
                    local qz = B and B.run or game and game.GetService and game:GetService("RunService")
                    if qz and qz.RenderStepped then
                        rf.connection = qz.RenderStepped:Connect(rj)
                    end
                else
                    rj()
                end
            end
        end
        local rE
        local function rF()
            local q5 = game and game.GetService and game:GetService("Lighting")
            if not q5 then
                return
            end
            if not rE then
                rE = q5.Ambient
            end
            local ac = Config.Ambient or {}
            if ac.Enabled then
                local pR = ac.Color or Color3.fromRGB(255, 255, 255)
                if typeof(pR) == "table" then
                    pR = pR.Color or pR.Color3 or pR.color
                end
                q5.Ambient = pR
            else
                if rE ~= nil then
                    q5.Ambient = rE
                end
            end
        end
        local rG
        local rH = false
        local function rI()
            local q5 = game and game.GetService and game:GetService("Lighting")
            if not q5 then
                return nil
            end
            local rJ =
                q5:FindFirstChild("CurrentAtmosphere") or q5:FindFirstChild("currentatmosphere") or
                q5:FindFirstChildOfClass("Atmosphere")
            if not rJ then
                rJ = Instance.new("Atmosphere")
                rJ.Name = "CurrentAtmosphere"
                rJ.Parent = q5
                rH = true
            end
            return rJ
        end
        local function rK()
            local q5 = game and game.GetService and game:GetService("Lighting")
            if not q5 then
                return
            end
            local ac = Config.Atmosphere or {}
            local rJ = rI()
            if not rJ then
                return
            end
            if ac.Enabled then
                if not rG then
                    rG = {
                        Color = rJ.Color,
                        Decay = rJ.Decay,
                        Density = rJ.Density,
                        Offset = rJ.Offset,
                        Glare = rJ.Glare,
                        Haze = rJ.Haze
                    }
                end
                if ac.Color then
                    local pR = ac.Color
                    if typeof(pR) == "table" then
                        pR = pR.Color or pR.Color3 or pR.color
                    end
                    rJ.Color = pR
                end
                if ac.Decay then
                    local rL = ac.Decay
                    if typeof(rL) == "table" then
                        rL = rL.Color or rL.Color3 or rL.color
                    end
                    rJ.Decay = rL
                end
                if typeof(ac.Density) == "number" then
                    rJ.Density = math.clamp(ac.Density, 0, 1)
                end
                if typeof(ac.Offset) == "number" then
                    rJ.Offset = math.clamp(ac.Offset, -1, 1)
                end
                if typeof(ac.Glare) == "number" then
                    rJ.Glare = math.clamp(ac.Glare, 0, 10)
                end
                if typeof(ac.Haze) == "number" then
                    rJ.Haze = math.clamp(ac.Haze, 0, 10)
                end
            else
                if rH then
                    rJ:Destroy()
                    rH = false
                    rG = nil
                elseif rG then
                    rJ.Color = rG.Color
                    rJ.Decay = rG.Decay
                    rJ.Density = rG.Density
                    rJ.Offset = rG.Offset
                    rJ.Glare = rG.Glare
                    rJ.Haze = rG.Haze
                end
            end
        end
        local function rM()
            local q5 = game and game.GetService and game:GetService("Lighting")
            if not q5 then
                return
            end
            local bc = Config.Bloom or {}
            local q6 = "RebuildBloom"
            if not (bc.Enabled and true or false) then
                local q7 = q5:FindFirstChild(q6)
                if q7 then
                    q7:Destroy()
                end
                return
            end
            local q8 = q5:FindFirstChild(q6)
            if not q8 then
                q8 = Instance.new("BloomEffect")
                q8.Name = q6
                q8.Parent = q5
            end
            local rN = typeof(bc.Intensity) == "number" and math.clamp(bc.Intensity, 0, 10) or 1
            local rO = typeof(bc.Size) == "number" and math.clamp(bc.Size, 0, 100) or 24
            local rP = typeof(bc.Threshold) == "number" and math.clamp(bc.Threshold, 0, 1) or 0.7
            q8.Intensity = rN
            q8.Size = rO
            q8.Threshold = rP
            q8.Enabled = true
        end
        local rQ = v:column()
        local rR = rQ:section({name = "World"})
        local rS =
            rR:toggle(
            {
                name = "ColorCorrection",
                flag = "colorcorr_enabled",
                default = Config.ColorCorrection and Config.ColorCorrection.Enabled or false,
                callback = function(state)
                    Config.ColorCorrection.Enabled = state and true or false
                    q4()
                end
            }
        )
        local rT = rR:dependency_box()
        rT:setup_dependencies({{rS, true}})
        rT:slider(
            {
                name = "Brightness",
                flag = "colorcorr_brt",
                min = -0.5,
                max = 0.5,
                default = Config.ColorCorrection and Config.ColorCorrection.Brightness or 0,
                interval = 0.01,
                callback = function(v)
                    Config.ColorCorrection.Brightness = v
                    q4()
                end
            }
        )
        rT:slider(
            {
                name = "Contrast",
                flag = "colorcorr_ctr",
                min = 0,
                max = 1,
                default = Config.ColorCorrection and Config.ColorCorrection.Contrast or 0,
                interval = 0.01,
                callback = function(v)
                    Config.ColorCorrection.Contrast = v
                    q4()
                end
            }
        )
        rT:slider(
            {
                name = "Saturation",
                flag = "colorcorr_sat",
                min = -0.5,
                max = 0.5,
                default = Config.ColorCorrection and Config.ColorCorrection.Saturation or 0,
                interval = 0.01,
                callback = function(v)
                    Config.ColorCorrection.Saturation = v
                    q4()
                end
            }
        )
        rS:colorpicker(
            {
                name = "TintColor",
                flag = "colorcorr_tint",
                color = Config.ColorCorrection and Config.ColorCorrection.TintColor or Color3.fromRGB(255, 255, 255),
                callback = function(oT)
                    local c = oT
                    if typeof(oT) == "table" then
                        c = oT.Color or oT.Color3 or oT.color
                    end
                    Config.ColorCorrection.TintColor = c
                    q4()
                end
            }
        )
        local rU =
            rR:toggle(
            {
                name = "Ambient",
                flag = "ambient_enabled",
                default = Config.Ambient and Config.Ambient.Enabled or false,
                callback = function(state)
                    Config.Ambient.Enabled = state and true or false
                    rF()
                end
            }
        )
        rU:colorpicker(
            {
                name = "AmbientColor",
                flag = "ambient_color",
                color = Config.Ambient and Config.Ambient.Color or Color3.fromRGB(255, 255, 255),
                callback = function(oT)
                    local c = oT
                    if typeof(oT) == "table" then
                        c = oT.Color or oT.Color3 or oT.color
                    end
                    Config.Ambient.Color = c
                    rF()
                end
            }
        )
        local rV =
            rR:toggle(
            {
                name = "Atmosphere",
                flag = "atmosphere_enabled",
                default = Config.Atmosphere and Config.Atmosphere.Enabled or false,
                callback = function(state)
                    Config.Atmosphere.Enabled = state and true or false
                    rK()
                end
            }
        )
        rV:colorpicker(
            {
                name = "Color",
                flag = "atmosphere_color",
                color = Config.Atmosphere and Config.Atmosphere.Color or Color3.fromRGB(255, 255, 255),
                callback = function(oT)
                    local c = oT
                    if typeof(oT) == "table" then
                        c = oT.Color or oT.Color3 or oT.color
                    end
                    Config.Atmosphere.Color = c
                    rK()
                end
            }
        )
        rV:colorpicker(
            {
                name = "Decay",
                flag = "atmosphere_decay",
                color = Config.Atmosphere and Config.Atmosphere.Decay or Color3.fromRGB(0, 0, 0),
                callback = function(oT)
                    local c = oT
                    if typeof(oT) == "table" then
                        c = oT.Color or oT.Color3 or oT.color
                    end
                    Config.Atmosphere.Decay = c
                    rK()
                end
            }
        )
        local rW = rR:dependency_box()
        rW:setup_dependencies({{rV, true}})
        rW:slider(
            {
                name = "Density",
                flag = "atmosphere_density",
                min = 0,
                max = 1,
                default = Config.Atmosphere and Config.Atmosphere.Density or 0,
                interval = 0.01,
                callback = function(v)
                    Config.Atmosphere.Density = v
                    rK()
                end
            }
        )
        rW:slider(
            {
                name = "Offset",
                flag = "atmosphere_offset",
                min = -1,
                max = 1,
                default = Config.Atmosphere and Config.Atmosphere.Offset or 0,
                interval = 0.01,
                callback = function(v)
                    Config.Atmosphere.Offset = v
                    rK()
                end
            }
        )
        rW:slider(
            {
                name = "Glare",
                flag = "atmosphere_glare",
                min = 0,
                max = 10,
                default = Config.Atmosphere and Config.Atmosphere.Glare or 0,
                interval = 0.05,
                callback = function(v)
                    Config.Atmosphere.Glare = v
                    rK()
                end
            }
        )
        rW:slider(
            {
                name = "Haze",
                flag = "atmosphere_haze",
                min = 0,
                max = 10,
                default = Config.Atmosphere and Config.Atmosphere.Haze or 0,
                interval = 0.05,
                callback = function(v)
                    Config.Atmosphere.Haze = v
                    rK()
                end
            }
        )
        local rX =
            rR:toggle(
            {
                name = "Bloom",
                flag = "bloom_enabled",
                default = Config.Bloom and Config.Bloom.Enabled or false,
                callback = function(state)
                    Config.Bloom.Enabled = state and true or false
                    rM()
                end
            }
        )
        local rY = rR:dependency_box()
        rY:setup_dependencies({{rX, true}})
        rY:slider(
            {
                name = "Int",
                flag = "bloom_intensity",
                min = 0,
                max = 10,
                default = Config.Bloom and Config.Bloom.Intensity or 1,
                interval = 0.05,
                callback = function(v)
                    Config.Bloom.Intensity = v
                    rM()
                end
            }
        )
        rY:slider(
            {
                name = "Size",
                flag = "bloom_size",
                min = 0,
                max = 100,
                default = Config.Bloom and Config.Bloom.Size or 24,
                interval = 1,
                callback = function(v)
                    Config.Bloom.Size = v
                    rM()
                end
            }
        )
        rY:slider(
            {
                name = "Thr",
                flag = "bloom_threshold",
                min = 0,
                max = 1,
                default = Config.Bloom and Config.Bloom.Threshold or 0.7,
                interval = 0.01,
                callback = function(v)
                    Config.Bloom.Threshold = v
                    rM()
                end
            }
        )
        local rZ =
            rR:toggle(
            {
                name = "Textures",
                flag = "textures_enabled",
                default = Config.Textures and Config.Textures.Enabled or false,
                callback = function(state)
                    Config.Textures.Enabled = state and true or false
                    if state then
                        qi()
                    else
                        qj()
                    end
                end
            }
        )
        local r_ = rR:dependency_box()
        r_:setup_dependencies({{rZ, true}})
        local s0 = qd()
        r_:dropdown(
            {
                name = "Mat",
                flag = "textures_material",
                items = s0,
                default = Config.Textures and Config.Textures.Selected or "Plastic",
                callback = function(v)
                    Config.Textures.Selected = v
                    if Config.Textures and Config.Textures.Enabled then
                        qi()
                    end
                end
            }
        )
        local s1 =
            rR:toggle(
            {
                name = "Skybox",
                flag = "skybox_enabled",
                default = Config.Skybox and Config.Skybox.Enabled or false,
                callback = function(state)
                    Config.Skybox.Enabled = state and true or false
                    qo()
                end
            }
        )
        local s2 = rR:dependency_box()
        s2:setup_dependencies({{s1, true}})
        local s3 = qm()
        s2:dropdown(
            {
                name = "Set",
                flag = "skybox_set",
                items = s3,
                default = Config.Skybox and Config.Skybox.Selected or "Night Sky",
                callback = function(v)
                    Config.Skybox.Selected = v
                    if Config.Skybox and Config.Skybox.Enabled then
                        qo()
                    end
                end
            }
        )
        local s4 =
            rR:toggle(
            {
                name = "Time",
                flag = "time_enabled",
                default = Config.Time and Config.Time.Enabled or false,
                callback = function(state)
                    Config.Time.Enabled = state and true or false
                    qs()
                end
            }
        )
        local s5 = rR:dependency_box()
        s5:setup_dependencies({{s4, true}})
        s5:slider(
            {
                name = "Hrs",
                flag = "time_hours",
                min = 0,
                max = 23,
                default = Config.Time and Config.Time.Hours or 12,
                interval = 1,
                callback = function(v)
                    Config.Time.Hours = v
                    qs()
                end
            }
        )
        s5:slider(
            {
                name = "Min",
                flag = "time_minutes",
                min = 0,
                max = 59,
                default = Config.Time and Config.Time.Minutes or 0,
                interval = 1,
                callback = function(v)
                    Config.Time.Minutes = v
                    qs()
                end
            }
        )
        task.defer(q4)
        task.defer(rF)
        task.defer(rK)
        task.defer(rM)
        task.defer(qo)
        task.defer(qs)
        task.defer(qx)
        task.defer(qB)
        task.defer(qP)
        task.defer(rd)
        task.defer(apply_indicators)
        task.defer(
            function()
                if Config.Textures and Config.Textures.Enabled then
                    qi()
                end
            end
        )
        local s6 = rQ:section({name = "Random"})
        local s7 =
            s6:toggle(
            {
                name = "FieldOfView",
                flag = "fov_enabled",
                default = Config.FOV and Config.FOV.Enabled or false,
                callback = function(state)
                    Config.FOV.Enabled = state and true or false
                    qx()
                end
            }
        )
        local s8 = s6:dependency_box()
        s8:setup_dependencies({{s7, true}})
        s8:slider(
            {
                name = "FOV",
                flag = "fov_value",
                min = 60,
                max = 180,
                default = Config.FOV and Config.FOV.Value or 70,
                interval = 1,
                callback = function(v)
                    Config.FOV.Value = v
                    qx()
                end
            }
        )
        local s9 =
            s6:toggle(
            {
                name = "AspectRatio",
                flag = "aspect_enabled",
                default = Config.AspectRatio and Config.AspectRatio.Enabled or false,
                callback = function(state)
                    Config.AspectRatio.Enabled = state and true or false
                    qB()
                end
            }
        )
        local sa = s6:dependency_box()
        sa:setup_dependencies({{s9, true}})
        sa:slider(
            {
                name = "Hor",
                flag = "aspect_horizontal",
                min = 50,
                max = 120,
                default = math.clamp(Config.AspectRatio and Config.AspectRatio.Horizontal or 100, 50, 120),
                interval = 1,
                callback = function(v)
                    Config.AspectRatio.Horizontal = v
                    qB()
                end
            }
        )
        sa:slider(
            {
                name = "Ver",
                flag = "aspect_vertical",
                min = 50,
                max = 120,
                default = math.clamp(Config.AspectRatio and Config.AspectRatio.Vertical or 100, 50, 120),
                interval = 1,
                callback = function(v)
                    Config.AspectRatio.Vertical = v
                    qB()
                end
            }
        )
        local sb =
            s6:toggle(
            {
                name = "ThirdPerson",
                flag = "tp_enabled",
                default = Config.ThirdPerson and Config.ThirdPerson.Enabled or false,
                callback = function(state)
                    Config.ThirdPerson.Enabled = state and true or false
                    qP()
                end
            }
        )
        local sc = s6:dependency_box()
        sc:setup_dependencies({{sb, true}})
        sc:slider(
            {
                name = "X",
                flag = "tp_x",
                min = -20,
                max = 20,
                default = Config.ThirdPerson and Config.ThirdPerson.X or 0,
                interval = 0.1,
                callback = function(v)
                    Config.ThirdPerson.X = v
                    qP()
                end
            }
        )
        sc:slider(
            {
                name = "Y",
                flag = "tp_y",
                min = -20,
                max = 20,
                default = Config.ThirdPerson and Config.ThirdPerson.Y or 0,
                interval = 0.1,
                callback = function(v)
                    Config.ThirdPerson.Y = v
                    qP()
                end
            }
        )
        sc:slider(
            {
                name = "Z",
                flag = "tp_z",
                min = -20,
                max = 20,
                default = Config.ThirdPerson and Config.ThirdPerson.Z or 0,
                interval = 0.1,
                callback = function(v)
                    Config.ThirdPerson.Z = v
                    qP()
                end
            }
        )
        local sd =
            s6:toggle(
            {
                name = "Crosshair",
                flag = "ch_enabled",
                default = Config.Crosshair and Config.Crosshair.Enabled or false,
                callback = function(state)
                    Config.Crosshair.Enabled = state and true or false
                    rd()
                end
            }
        )
        sd:colorpicker(
            {
                name = "Fill",
                flag = "ch_color",
                color = Config.Crosshair and Config.Crosshair.CrosshairColor or Color3.fromRGB(255, 255, 255),
                callback = function(oT)
                    Config.Crosshair.CrosshairColor = oT
                    rd()
                end
            }
        )
        sd:colorpicker(
            {
                name = "Outline",
                flag = "ch_outline",
                color = Config.Crosshair and Config.Crosshair.OutlineColor or Color3.fromRGB(0, 0, 0),
                callback = function(oT)
                    Config.Crosshair.OutlineColor = oT
                    rd()
                end
            }
        )
        local se = s6:dependency_box()
        se:setup_dependencies({{sd, true}})
        se:slider(
            {
                name = "Length",
                flag = "ch_length",
                min = 5,
                max = 300,
                default = Config.Crosshair and Config.Crosshair.Length or 10,
                interval = 1,
                callback = function(v)
                    Config.Crosshair.Length = v
                    rd()
                end
            }
        )
        se:slider(
            {
                name = "Gap",
                flag = "ch_gap",
                min = 0,
                max = 20,
                default = Config.Crosshair and Config.Crosshair.GapSize or 5,
                interval = 1,
                callback = function(v)
                    Config.Crosshair.GapSize = v
                    rd()
                end
            }
        )
        se:slider(
            {
                name = "Thickness",
                flag = "ch_thickness",
                min = 1,
                max = 5,
                default = Config.Crosshair and Config.Crosshair.Thickness or 2,
                interval = 1,
                callback = function(v)
                    Config.Crosshair.Thickness = v
                    rd()
                end
            }
        )
        se:toggle(
            {
                name = "Rotating",
                flag = "ch_rotating",
                default = Config.Crosshair and Config.Crosshair.AlwaysRotating or false,
                callback = function(state)
                    Config.Crosshair.AlwaysRotating = state and true or false
                    rd()
                end
            }
        )
        se:slider(
            {
                name = "Speed",
                flag = "ch_speed",
                min = 1,
                max = 10,
                default = Config.Crosshair and Config.Crosshair.Speed or 1,
                interval = 1,
                callback = function(v)
                    Config.Crosshair.Speed = v
                    rd()
                end
            }
        )
        se:toggle(
            {
                name = "Pulse",
                flag = "ch_pulse",
                default = Config.Crosshair and Config.Crosshair.Pulse or false,
                callback = function(state)
                    Config.Crosshair.Pulse = state and true or false
                    rd()
                end
            }
        )
        se:toggle(
            {
                name = "AttachToTarget",
                flag = "ch_attach",
                default = Config.Crosshair and Config.Crosshair.AttachToTarget or false,
                callback = function(state)
                    Config.Crosshair.AttachToTarget = state and true or false
                    rd()
                end
            }
        )
        se:toggle(
            {
                name = "HideCursor",
                flag = "ch_hidecursor",
                default = Config.Crosshair and Config.Crosshair.HideCursor or false,
                callback = function(state)
                    Config.Crosshair.HideCursor = state and true or false
                    if apply_mouse_icon then
                        apply_mouse_icon()
                    end
                end
            }
        )
        se:dropdown(
            {
                name = "Position",
                flag = "ch_position",
                items = {"Mouse", "Center"},
                default = (Config.Crosshair and Config.Crosshair.Position) == "center" and "Center" or "Mouse",
                callback = function(v)
                    local jx = tostring(v)
                    if jx == "Center" or jx == "center" then
                        Config.Crosshair.Position = "center"
                    else
                        Config.Crosshair.Position = "mouse"
                    end
                    rd()
                end
            }
        )
        local sf =
            s6:toggle(
            {
                name = "Indicators",
                flag = "ind_enabled",
                default = Config.Indicators and Config.Indicators.Enabled or false,
                callback = function(state)
                    Config.Indicators = Config.Indicators or {}
                    Config.Indicators.Enabled = state and true or false
                    Config.Indicators.ClientSize = 13
                    Config.Indicators.InfoSize = 13
                    apply_indicators()
                end
            }
        )
        local sg = s6:dependency_box()
        sg:setup_dependencies({{sf, true}})
        sg:dropdown(
            {
                name = "Indicators",
                flag = "ind_list",
                items = {"ClientName", "localplayerHP", "TargetHP", "LocalPlayerSpeed", "TargetDistance", "FPS", "Ping"},
                multi = true,
                default = Config.Indicators and Config.Indicators.Selected or {"localplayerHP"},
                callback = function(qe)
                    Config.Indicators = Config.Indicators or {}
                    Config.Indicators.Selected = type(qe) == "table" and qe or {}
                    apply_indicators()
                end
            }
        )
    end
    do
        local sh = {
            active = false,
            conn = nil,
            appearance_conn = nil,
            desc_conn = nil,
            type = "Slashesv1",
            emitters = {},
            color = Color3.fromRGB(255, 255, 255)
        }
        local function si()
            if sh.emitters then
                for _, eo in ipairs(sh.emitters) do
                    if eo and eo.Parent then
                        eo.Enabled = false
                        eo:Destroy()
                    end
                end
            end
            sh.emitters = {}
        end
        local function sj(sk)
            si()
            if not sk then
                return
            end
            local sl = {}
            if sh.type == "Slashesv2" then
                local sm = Instance.new("ParticleEmitter")
                sm.Name = "Glow"
                sm.Texture = "rbxassetid://2956681067"
                sm.Rate = 50
                sm.ZOffset = 2
                sm.Rotation = NumberRange.new(-360, 360)
                sm.Transparency =
                    NumberSequence.new(
                    {NumberSequenceKeypoint.new(0, 0.992, 0), NumberSequenceKeypoint.new(1, 0.992, 0)}
                )
                sm.Lifetime = NumberRange.new(0.25)
                sm.Speed = NumberRange.new(0.012202076613903046)
                sm.LightEmission = -5
                sm.LockedToPart = true
                sm.Orientation = Enum.ParticleOrientation.VelocityPerpendicular
                sm.SpreadAngle = Vector2.new(180, 180)
                sm.VelocitySpread = 180
                sm.Size =
                    NumberSequence.new(
                    {
                        NumberSequenceKeypoint.new(0, 3.8040645122528076, 3.8040645122528076),
                        NumberSequenceKeypoint.new(1, 7.608129024505615, 0)
                    }
                )
                sm.Color = ColorSequence.new(sh.color or Color3.fromRGB(255, 255, 255))
                sm.Parent = sk
                sm.Enabled = true
                table.insert(sl, sm)
                local sn = Instance.new("ParticleEmitter")
                sn.Name = "Slashesv2"
                sn.Texture = "rbxassetid://6246398215"
                sn.Rate = 15
                sn.ZOffset = 2
                sn.Rotation = NumberRange.new(-360, 360)
                sn.RotSpeed = NumberRange.new(1000)
                sn.Transparency =
                    NumberSequence.new(
                    {
                        NumberSequenceKeypoint.new(0, 0, 0),
                        NumberSequenceKeypoint.new(0.5, 0, 0),
                        NumberSequenceKeypoint.new(1, 1, 0)
                    }
                )
                sn.Lifetime = NumberRange.new(0.25, 0.5)
                sn.Speed = NumberRange.new(0.012202076613903046)
                sn.LightEmission = -10
                sn.Orientation = Enum.ParticleOrientation.VelocityPerpendicular
                sn.SpreadAngle = Vector2.new(180, 180)
                sn.VelocitySpread = 180
                sn.LockedToPart = true
                sn.Size =
                    NumberSequence.new(
                    {
                        NumberSequenceKeypoint.new(0, 3.8040645122528076, 3.8040645122528076),
                        NumberSequenceKeypoint.new(1, 7.608129024505615, 0)
                    }
                )
                sn.Color = ColorSequence.new(sh.color or Color3.fromRGB(255, 255, 255))
                sn.Parent = sk
                sn.Enabled = true
                table.insert(sl, sn)
            elseif sh.type == "Slashesv3" then
                local so = Instance.new("ParticleEmitter")
                so.Name = "slash1"
                so.Texture = "rbxassetid://6732711844"
                so.Rate = 10
                so.ZOffset = 2
                so.RotSpeed = NumberRange.new(1000)
                so.VelocitySpread = 180
                so.LockedToPart = true
                so.LightEmission = -1
                so.LightInfluence = 1
                so.Transparency =
                    NumberSequence.new(
                    {
                        NumberSequenceKeypoint.new(0, 1, 0),
                        NumberSequenceKeypoint.new(0.02631578966975212, 0.59375, 0),
                        NumberSequenceKeypoint.new(0.06024930626153946, 0, 0),
                        NumberSequenceKeypoint.new(0.765625, 0.956250011920929, 0),
                        NumberSequenceKeypoint.new(1, 1, 0)
                    }
                )
                so.Lifetime = NumberRange.new(1)
                so.Speed = NumberRange.new(-0.060865648090839386, 0.060865648090839386)
                so.Rotation = NumberRange.new(-180, 180)
                so.SpreadAngle = Vector2.new(180, -180)
                so.Size =
                    NumberSequence.new(
                    {
                        NumberSequenceKeypoint.new(0, 4.526882648468018, 0),
                        NumberSequenceKeypoint.new(0.7523961663246155, 2.891117811203003, 0),
                        NumberSequenceKeypoint.new(1, 0, 0)
                    }
                )
                so.Orientation = Enum.ParticleOrientation.VelocityPerpendicular
                so.Color = ColorSequence.new(sh.color or Color3.fromRGB(255, 255, 255))
                so.Parent = sk
                so.Enabled = true
                table.insert(sl, so)
                local sp = Instance.new("ParticleEmitter")
                sp.Name = "slash2"
                sp.Texture = "rbxassetid://6732711844"
                sp.Rate = 10
                sp.ZOffset = 2
                sp.RotSpeed = NumberRange.new(1000)
                sp.VelocitySpread = 180
                sp.LockedToPart = true
                sp.LightEmission = -1
                sp.LightInfluence = 1
                sp.Transparency =
                    NumberSequence.new(
                    {
                        NumberSequenceKeypoint.new(0, 1, 0),
                        NumberSequenceKeypoint.new(0.02631578966975212, 0.59375, 0),
                        NumberSequenceKeypoint.new(0.06024930626153946, 0, 0),
                        NumberSequenceKeypoint.new(0.765625, 0.956250011920929, 0),
                        NumberSequenceKeypoint.new(1, 1, 0)
                    }
                )
                sp.Lifetime = NumberRange.new(1)
                sp.Speed = NumberRange.new(-0.060865648090839386, 0.060865648090839386)
                sp.Rotation = NumberRange.new(-180, 180)
                sp.SpreadAngle = Vector2.new(180, -180)
                sp.Size =
                    NumberSequence.new(
                    {
                        NumberSequenceKeypoint.new(0, 4.526882648468018, 0),
                        NumberSequenceKeypoint.new(0.7523961663246155, 2.891117811203003, 0),
                        NumberSequenceKeypoint.new(1, 0, 0)
                    }
                )
                sp.Orientation = Enum.ParticleOrientation.VelocityPerpendicular
                sp.Color = ColorSequence.new(sh.color or Color3.fromRGB(255, 255, 255))
                sp.Parent = sk
                sp.Enabled = true
                table.insert(sl, sp)
                local sq = Instance.new("ParticleEmitter")
                sq.Name = "slash3"
                sq.Texture = "rbxassetid://6732711844"
                sq.Rate = 10
                sq.ZOffset = 2
                sq.RotSpeed = NumberRange.new(1000)
                sq.VelocitySpread = 180
                sq.LockedToPart = true
                sq.LightEmission = -1
                sq.LightInfluence = 1
                sq.Transparency =
                    NumberSequence.new(
                    {
                        NumberSequenceKeypoint.new(0, 1, 0),
                        NumberSequenceKeypoint.new(0.02631578966975212, 0.59375, 0),
                        NumberSequenceKeypoint.new(0.06024930626153946, 0, 0),
                        NumberSequenceKeypoint.new(0.765625, 0.956250011920929, 0),
                        NumberSequenceKeypoint.new(1, 1, 0)
                    }
                )
                sq.Lifetime = NumberRange.new(1)
                sq.Speed = NumberRange.new(-0.060865648090839386, 0.060865648090839386)
                sq.Rotation = NumberRange.new(-180, 180)
                sq.SpreadAngle = Vector2.new(180, -180)
                sq.Size =
                    NumberSequence.new(
                    {
                        NumberSequenceKeypoint.new(0, 4.526882648468018, 0),
                        NumberSequenceKeypoint.new(0.7523961663246155, 2.891117811203003, 0),
                        NumberSequenceKeypoint.new(1, 0, 0)
                    }
                )
                sq.Orientation = Enum.ParticleOrientation.VelocityPerpendicular
                sq.Color = ColorSequence.new(sh.color or Color3.fromRGB(255, 255, 255))
                sq.Parent = sk
                sq.Enabled = true
                table.insert(sl, sq)
            else
                local eo = Instance.new("ParticleEmitter")
                eo.Name = "Slashes1"
                eo.Texture = "rbxassetid://10927170198"
                eo.ZOffset = 10
                eo.Rate = 10
                eo.Rotation = NumberRange.new(-360, 360)
                eo.RotSpeed = NumberRange.new(1000)
                eo.Transparency =
                    NumberSequence.new(
                    {
                        NumberSequenceKeypoint.new(0, 0, 0),
                        NumberSequenceKeypoint.new(0.5, 0, 0),
                        NumberSequenceKeypoint.new(1, 1, 0)
                    }
                )
                eo.Lifetime = NumberRange.new(0.25, 0.5)
                eo.Speed = NumberRange.new(0.012202076613903046)
                eo.LightEmission = -10
                eo.Orientation = Enum.ParticleOrientation.VelocityPerpendicular
                eo.SpreadAngle = Vector2.new(180, 180)
                eo.VelocitySpread = 180
                eo.LockedToPart = true
                eo.Size =
                    NumberSequence.new(
                    {
                        NumberSequenceKeypoint.new(0, 3.8040645122528076, 3.8040645122528076),
                        NumberSequenceKeypoint.new(1, 7.608129024505615, 0)
                    }
                )
                eo.Color = ColorSequence.new(sh.color or Color3.fromRGB(255, 255, 255))
                eo.Parent = sk
                eo.Enabled = true
                table.insert(sl, eo)
            end
            sh.emitters = sl
        end
        local function sr(js)
            if not js then
                return
            end
            local ky =
                js:FindFirstChild("HumanoidRootPart") or js.WaitForChild and js:WaitForChild("HumanoidRootPart", 2)
            if not ky then
                return
            end
            local ss = ky:FindFirstChild("RootAttachment") or ky.WaitForChild and ky:WaitForChild("RootAttachment", 1)
            sj(ss or ky)
        end
        local function st()
            local lU = vars and vars.lp or game and game:GetService("Players").LocalPlayer
            if not lU then
                return
            end
            sh.active = true
            local function su(js)
                local function sv()
                    if sh.active and lU.Character == js then
                        sr(js)
                    end
                end
                task.delay(0.25, sv)
                task.delay(0.6, sv)
                task.delay(1.0, sv)
                if sh.desc_conn then
                    sh.desc_conn:Disconnect()
                    sh.desc_conn = nil
                end
                sh.desc_conn =
                    js.DescendantAdded:Connect(
                    function(kz)
                        if not sh.active or lU.Character ~= js then
                            return
                        end
                        if
                            kz.Name == "RootAttachment" or
                                kz:IsA("Attachment") and kz.Parent and kz.Parent.Name == "HumanoidRootPart"
                         then
                            sr(js)
                            if sh.desc_conn then
                                sh.desc_conn:Disconnect()
                                sh.desc_conn = nil
                            end
                        end
                    end
                )
                task.delay(
                    3,
                    function()
                        if sh.desc_conn then
                            sh.desc_conn:Disconnect()
                            sh.desc_conn = nil
                        end
                    end
                )
            end
            if not sh.conn then
                sh.conn =
                    lU.CharacterAdded:Connect(
                    function(js)
                        task.wait(0.5)
                        if sh.active and lU.Character == js then
                            sr(js)
                            su(js)
                        end
                    end
                )
            end
            if sh.appearance_conn then
                sh.appearance_conn:Disconnect()
                sh.appearance_conn = nil
            end
            sh.appearance_conn =
                (vars and vars.lp or game and game:GetService("Players").LocalPlayer).CharacterAppearanceLoaded:Connect(
                function(js)
                    task.delay(
                        0.2,
                        function()
                            local sw = (vars and vars.lp or game and game:GetService("Players").LocalPlayer).Character
                            if sh.active and sw == js then
                                sr(js)
                                su(js)
                            end
                        end
                    )
                end
            )
            if lU.Character then
                sr(lU.Character)
                su(lU.Character)
            end
        end
        local function sx()
            sh.active = false
            if sh.conn then
                sh.conn:Disconnect()
                sh.conn = nil
            end
            if sh.appearance_conn then
                sh.appearance_conn:Disconnect()
                sh.appearance_conn = nil
            end
            if sh.desc_conn then
                sh.desc_conn:Disconnect()
                sh.desc_conn = nil
            end
            si()
        end
        local function sy(oT)
            sh.color = oT
            if sh.emitters then
                for _, eo in ipairs(sh.emitters) do
                    if eo then
                        eo.Color = ColorSequence.new(oT)
                    end
                end
            end
        end
        local sz =
            oA:toggle(
            {name = "Slashes", flag = "slashes_enabled", default = false, callback = function(state)
                    if state then
                        st()
                    else
                        sx()
                    end
                end}
        )
        sz:colorpicker(
            {name = "Clr", flag = "slashes_color", color = Color3.fromRGB(255, 255, 255), callback = function(c)
                    local pR = typeof(c) == "table" and (c.Color or c.color) or c
                    if pR then
                        sy(pR)
                    end
                end}
        )
        do
            local sA = oA:dependency_box()
            sA:setup_dependencies({{sz, true}})
            sA:dropdown(
                {
                    name = "Type",
                    flag = "slashes_type",
                    items = {"Slashesv1", "Slashesv2", "Slashesv3"},
                    default = "Slashesv1",
                    callback = function(sB)
                        local sC = {"Slashesv1", "Slashesv2", "Slashesv3"}
                        if typeof(sB) == "table" then
                            sB = sB.text or sB.value or sB.Name or sB[1]
                        end
                        if typeof(sB) == "number" then
                            sB = sC[sB]
                        end
                        if type(sB) ~= "string" then
                            sB = "Slashesv1"
                        end
                        sh.type = sB
                        if sh.active then
                            si()
                            local lU = vars and vars.lp or game and game:GetService("Players").LocalPlayer
                            local js = lU and lU.Character
                            if js then
                                sr(js)
                            end
                        end
                    end
                }
            )
        end
    end
    do
        local sD = {
            enabled = false,
            style = "Custom",
            c1 = Color3.fromRGB(128, 18, 255),
            c2 = Color3.fromRGB(255, 0, 128),
            c3 = Color3.fromRGB(0, 200, 255),
            c4 = Color3.fromRGB(255, 255, 0),
            height = 0.7,
            radius = 2,
            sides = 25,
            hat_trs = 0.35,
            line_trs = 1.0,
            drawings = {},
            conn = nil,
            speed = 0.2
        }
        local function sE(a, b, t)
            return a + (b - a) * t
        end
        local function sF(a, b, t)
            return Color3.new(sE(a.R, b.R, t), sE(a.G, b.G, t), sE(a.B, b.B, t))
        end
        local function sG(sH, sI)
            local s = (sH + sI * sD.speed) % 1
            if s < 0.25 then
                return sF(sD.c1, sD.c2, s / 0.25)
            elseif s < 0.5 then
                return sF(sD.c2, sD.c3, (s - 0.25) / 0.25)
            elseif s < 0.75 then
                return sF(sD.c3, sD.c4, (s - 0.5) / 0.25)
            else
                return sF(sD.c4, sD.c1, (s - 0.75) / 0.25)
            end
        end
        local function sJ(sK, sH, sI, jw)
            local n = #sK
            if n == 0 then
                return Color3.new(1, 1, 1)
            end
            if n == 1 then
                return sK[1]
            end
            local s = (sH + sI * (jw or sD.speed)) % 1
            local x = s * n
            local i = math.floor(x) + 1
            local f = x - math.floor(x)
            local a = sK[i]
            local b = sK[i % n + 1]
            return sF(a, b, f)
        end
        local function sL(sH, sI)
            local sK = {Color3.fromRGB(255, 105, 180), Color3.fromRGB(255, 75, 150), Color3.fromRGB(135, 206, 250)}
            return sJ(sK, sH, sI, 0.25)
        end
        local function sM(sH, sI)
            local h = (sI * 0.2 + sH) % 1
            return Color3.fromHSV(h, 0.6, 1)
        end
        local sN = {
            CustomPalette1 = {Color3.fromRGB(255, 94, 58), Color3.fromRGB(255, 154, 0), Color3.fromRGB(255, 212, 0)},
            CustomPalette2 = {
                Color3.fromRGB(0, 212, 255),
                Color3.fromRGB(0, 128, 255),
                Color3.fromRGB(0, 64, 128),
                Color3.fromRGB(0, 40, 80)
            },
            CustomPalette3 = {Color3.fromRGB(255, 0, 0), Color3.fromRGB(255, 102, 0)},
            CustomPalette4 = {
                Color3.fromRGB(200, 255, 255),
                Color3.fromRGB(150, 220, 255),
                Color3.fromRGB(100, 200, 255),
                Color3.fromRGB(80, 160, 220),
                Color3.fromRGB(60, 120, 190)
            },
            CustomPalette5 = {Color3.fromRGB(88, 0, 255), Color3.fromRGB(255, 0, 191), Color3.fromRGB(0, 160, 255)},
            CustomPalette6 = {Color3.fromRGB(0, 255, 128), Color3.fromRGB(255, 0, 255), Color3.fromRGB(0, 255, 255)},
            CustomPalette7 = {
                Color3.fromRGB(255, 255, 255),
                Color3.fromRGB(200, 200, 200),
                Color3.fromRGB(150, 150, 150),
                Color3.fromRGB(100, 100, 100)
            },
            CustomPalette8 = {Color3.fromRGB(255, 20, 147), Color3.fromRGB(186, 85, 211), Color3.fromRGB(72, 61, 139)},
            CustomPalette9 = {Color3.fromRGB(0, 255, 255), Color3.fromRGB(173, 216, 230), Color3.fromRGB(25, 25, 112)},
            CustomPalette10 = {Color3.fromRGB(255, 215, 0), Color3.fromRGB(255, 165, 0), Color3.fromRGB(255, 69, 0)},
            CustomPalette11 = {Color3.fromRGB(124, 252, 0), Color3.fromRGB(50, 205, 50), Color3.fromRGB(0, 128, 0)},
            CustomPalette12 = {
                Color3.fromRGB(0, 0, 0),
                Color3.fromRGB(45, 0, 80),
                Color3.fromRGB(120, 0, 200),
                Color3.fromRGB(255, 0, 255)
            },
            CustomPalette13 = {
                Color3.fromRGB(0, 0, 128),
                Color3.fromRGB(0, 0, 255),
                Color3.fromRGB(0, 191, 255),
                Color3.fromRGB(135, 206, 250)
            },
            CustomPalette14 = {
                Color3.fromRGB(255, 105, 180),
                Color3.fromRGB(255, 182, 193),
                Color3.fromRGB(135, 206, 250)
            },
            CustomPalette15 = {
                Color3.fromRGB(240, 255, 255),
                Color3.fromRGB(176, 224, 230),
                Color3.fromRGB(135, 206, 235),
                Color3.fromRGB(70, 130, 180)
            },
            CustomPalette16 = {
                Color3.fromRGB(255, 255, 240),
                Color3.fromRGB(255, 250, 205),
                Color3.fromRGB(250, 250, 210),
                Color3.fromRGB(238, 232, 170)
            }
        }
        local function sO(sH, sI)
            local sP = sD.style
            if sP == "Rainbow" then
                return sM(sH, sI)
            elseif sP == "Astolfo" then
                return sL(sH, sI)
            elseif sN[sP] ~= nil then
                return sJ(sN[sP], sH, sI, 0.2)
            else
                return sG(sH, sI)
            end
        end
        local function sQ()
            if #sD.drawings == sD.sides then
                return
            end
            for _, sR in ipairs(sD.drawings) do
                pcall(
                    function()
                        if sR[1] then
                            sR[1]:Remove()
                        end
                    end
                )
                pcall(
                    function()
                        if sR[2] then
                            sR[2]:Remove()
                        end
                    end
                )
            end
            sD.drawings = {}
            for i = 1, sD.sides do
                local lS = Drawing.new("Line")
                local sS = Drawing.new("Triangle")
                lS.ZIndex = 2
                lS.Thickness = 1
                sS.ZIndex = 1
                sS.Filled = true
                table.insert(sD.drawings, {lS, sS})
            end
        end
        local function sT(sU)
            for _, sR in ipairs(sD.drawings) do
                local lS, sS = sR[1], sR[2]
                if lS then
                    lS.Visible = sU
                end
                if sS then
                    sS.Visible = sU
                end
            end
        end
        local function sV()
            if sD.conn then
                pcall(
                    function()
                        sD.conn:Disconnect()
                    end
                )
                sD.conn = nil
            end
            for _, sR in ipairs(sD.drawings) do
                pcall(
                    function()
                        if sR[1] then
                            sR[1]:Remove()
                        end
                    end
                )
                pcall(
                    function()
                        if sR[2] then
                            sR[2]:Remove()
                        end
                    end
                )
            end
            sD.drawings = {}
        end
        local function sW()
            if not sD.enabled then
                sV()
                return
            end
            local lU = vars and vars.lp or game and game:GetService("Players").LocalPlayer
            local js = lU and lU.Character or nil
            local sX = js and js:FindFirstChild("Head")
            local jt = js and js:FindFirstChildOfClass("Humanoid")
            if not (js and sX and jt and jt.Health > 0) then
                sT(false)
                return
            end
            sQ()
            local qy = B and B.cam or workspace.CurrentCamera
            local t = tick()
            local sY = math.pi * 2
            local pD = sX.Position + Vector3.new(0, 0.75, 0)
            local sZ = pD + Vector3.new(0, sD.height, 0)
            local s_, t0 = qy:WorldToViewportPoint(sX.Position)
            if not t0 or s_.Z <= 0 then
                sT(false)
                return
            end
            for t1 = 1, sD.sides do
                local lS, sS = sD.drawings[t1][1], sD.drawings[t1][2]
                local sH = t1 / sD.sides
                local t2 = (t1 % sD.sides + 1) / sD.sides
                local a = sH * sY
                local b = t2 * sY
                local t3 = pD + Vector3.new(math.cos(a), 0, math.sin(a)) * sD.radius
                local t4 = pD + Vector3.new(math.cos(b), 0, math.sin(b)) * sD.radius
                local t5 = qy:WorldToViewportPoint(t3)
                local t6 = qy:WorldToViewportPoint(t4)
                local r5 = qy:WorldToViewportPoint(sZ)
                local pR = sO(sH, t)
                lS.From = Vector2.new(t5.X, t5.Y)
                lS.To = Vector2.new(t6.X, t6.Y)
                lS.Color = pR
                lS.Transparency = sD.line_trs
                lS.Visible = true
                sS.PointA = Vector2.new(r5.X, r5.Y)
                sS.PointB = lS.From
                sS.PointC = lS.To
                sS.Color = pR
                sS.Transparency = sD.hat_trs
                sS.Visible = true
            end
        end
        local t7 =
            oA:toggle(
            {name = "ChinaHat", flag = "selfhat_enabled", default = false, callback = function(state)
                    sD.enabled = state
                    if state then
                        if not sD.conn then
                            sD.conn = (B and B.run or game:GetService("RunService")).RenderStepped:Connect(sW)
                        end
                    else
                        sV()
                    end
                end}
        )
        t7:colorpicker(
            {name = "Color 1", flag = "selfhat_c1", default = sD.c1, callback = function(pR)
                    sD.c1 = pR
                end}
        )
        t7:colorpicker(
            {name = "Color 2", flag = "selfhat_c2", default = sD.c2, callback = function(pR)
                    sD.c2 = pR
                end}
        )
        t7:colorpicker(
            {name = "Color 3", flag = "selfhat_c3", default = sD.c3, callback = function(pR)
                    sD.c3 = pR
                end}
        )
        t7:colorpicker(
            {name = "Color 4", flag = "selfhat_c4", default = sD.c4, callback = function(pR)
                    sD.c4 = pR
                end}
        )
        local t8 = oA:dependency_box()
        t8:setup_dependencies({{t7, true}})
        t8:dropdown(
            {
                name = "Style",
                flag = "selfhat_style",
                items = {
                    "Custom",
                    "Rainbow",
                    "Astolfo",
                    "CustomPalette1",
                    "CustomPalette2",
                    "CustomPalette3",
                    "CustomPalette4",
                    "CustomPalette5",
                    "CustomPalette6",
                    "CustomPalette7",
                    "CustomPalette8",
                    "CustomPalette9",
                    "CustomPalette10",
                    "CustomPalette11",
                    "CustomPalette12",
                    "CustomPalette13",
                    "CustomPalette14",
                    "CustomPalette15",
                    "CustomPalette16"
                },
                default = "Custom",
                callback = function(jx)
                    sD.style = jx
                end
            }
        )
        table.insert(
            a.connections,
            {Disconnect = function()
                    sV()
                end}
        )
    end
end
for hH, cL in next, f.preset do
    pcall(
        function()
            j:update_theme(hH, cL)
        end
    )
end
j:notification({text = "hello, client is loaded, onyx hub = zalupa ebanaya", time = 10})
