loadstring(game:HttpGet("https://pastebin.com/raw/gimbTwW1"))()
local a, b, c, d, e, f, g, h, i =
    loadstring(game:HttpGet("https://raw.githubusercontent.com/AreWeDeadas/Rebuild.gg/refs/heads/main/libraryv2"))()
local j =
    a:window(
    {
        name = os.date(
            "Rebuild.gg - skidded by 32vision - %b %d %Y - Private - onyxhub sucks - cursed by 32vision to win - creds to chagpt "
        ),
        size = b(0, 614, 0, 639)
    }
)
local k = j:tab({name = "Rage"})
local l = j:tab({name = "Misc"})
local m = j:tab({name = "Visuals"})
local n = j:tab({name = "Players"})
local o = j:tab({name = "Settings"})
local p = a:watermark({default = os.date("Rebuild.gg - fuckass - %b %d %Y - %H:%M:%S")})
local q = a:radar({size = 200, clamp = true})
local r = a:custom_hud({size = b(0, 280, 0, 32), position = b(0, 250, 0, 300), hud_type = "Rust"})
local s = {
    ps = game:GetService("Players"),
    run = game:GetService("RunService"),
    uis = game:GetService("UserInputService"),
    ts = game:GetService("TweenService"),
    hs = game:GetService("HttpService"),
    cam = workspace.CurrentCamera,
    camera = workspace.CurrentCamera,
    workspace = workspace,
    math = math,
    cf = CFrame,
    v2 = Vector2,
    v3 = Vector3,
    Vector3 = Vector3,
    RaycastParams = RaycastParams,
    task = task,
    tick = tick
}
g["Debug"] = true
print("[Rebuild] Debug enabled")
local t = {}
do
    function t:ValidateClient(u)
        if not u then
            return false
        end
        local v = u.Character
        if not v then
            return false
        end
        local w = v:FindFirstChildOfClass("Humanoid")
        if not w or w.Health <= 0 then
            return false
        end
        return true
    end
    local function ensure_visuals()
        if not state.viz_part then
            local x = Instance.new("Part")
            x.Name = "RB_DesyncViz"
            x.Anchored = true
            x.CanCollide = false
            x.Massless = true
            x.Material = Enum.Material.Neon
            x.Color = Color3.fromRGB(255, 80, 80)
            x.Size = Vector3.new(0.6, 0.6, 0.6)
            x.Transparency = 0.1
            x.Parent = workspace
            state.viz_part = x
        end
        if not state.viz_line then
            local y = Drawing.new("Line")
            y.Visible = false
            y.Thickness = 2
            y.Transparency = 1
            y.Color = Color3.fromRGB(255, 80, 80)
            state.viz_line = y
        end
    end
    local function z()
        if state.followMode then
            local A, A, B = desync_utility:getPlayerParts(LocalPlayer)
            return B and B.CFrame or nil
        end
        return state.targetCFrame or state.realCFrame
    end
    local function C()
        if not state.viz_enabled then
            return
        end
        if not desync_utility:ValidateClient(LocalPlayer) then
            return
        end
        ensure_visuals()
        local D = z()
        local E = state.viz_part
        local y = state.viz_line
        if not D or not E or not y then
            return
        end
        E.CFrame = D
        local F = D.Position
        local G, H = desync_vars.cam:WorldToViewportPoint(F)
        local I = desync_vars.uis:GetMouseLocation()
        local J = Vector2.new(G.X, G.Y)
        y.From = I
        y.To = J
        y.Visible = H == true
        E.Transparency = 0.1
    end
    local function start_visuals()
        if state.viz_conn then
            return
        end
        state.viz_conn =
            desync_vars.RunService.RenderStepped:Connect(
            function()
                if not state.viz_enabled then
                    return
                end
                C()
            end
        )
    end
    local function stop_visuals()
        if state.viz_conn then
            pcall(
                function()
                    state.viz_conn:Disconnect()
                end
            )
            state.viz_conn = nil
        end
        if state.viz_line then
            state.viz_line.Visible = false
        end
        if state.viz_part then
            state.viz_part.Transparency = 1
        end
    end
    function t:GetPreferredPart(v)
        return v and
            (v:FindFirstChild("HumanoidRootPart") or v:FindFirstChild("Head") or v:FindFirstChild("UpperTorso") or
                v:FindFirstChild("Torso")) or
            nil
    end
    function t:ToScreen(F)
        local G, H = s.cam:WorldToViewportPoint(F)
        return s.v2.new(G.X, G.Y), H
    end
    function t:GetMouseLocation()
        return s.uis:GetMouseLocation()
    end
    function t:GetMouseDistance(K)
        return (self:GetMouseLocation() - K).Magnitude
    end
    function t:GetClosestToMouse()
        local L, M = nil, nil
        for A, N in ipairs(s.ps:GetPlayers()) do
            if N ~= i and self:ValidateClient(N) then
                local v = N.Character
                local E = self:GetPreferredPart(v)
                if E then
                    local O, H = self:ToScreen(E.Position)
                    if H then
                        local P = self:GetMouseDistance(O)
                        if not M or P < M then
                            L, M = N, P
                        end
                    end
                end
            end
        end
        return L, M or s.math.huge
    end
    t._hit_listeners = {}
    t._target = {info = nil, listeners = {}}
    function t:OnHit(Q)
        if typeof(Q) == "function" then
            table.insert(self._hit_listeners, Q)
        end
    end
    function t:OnTargetUpdate(Q)
        if typeof(Q) == "function" then
            table.insert(self._target.listeners, Q)
        end
    end
    function t:_emit_hit(R)
        for A, S in ipairs(self._hit_listeners) do
            pcall(S, R)
        end
    end
    function t:_chat(T)
        local U = game:GetService("StarterGui")
        pcall(
            function()
                U:SetCore("ChatMakeSystemMessage", {Text = T})
            end
        )
        print(T)
    end
    function t:GetTargetInfo()
        local R = self._target.info
        return R ~= nil, R
    end
    function t:SetTargetInfo(u)
        local R = nil
        t._dd.override_player = u or nil
        if u and u.Character then
            local v = u.Character
            local w = v:FindFirstChildOfClass("Humanoid")
            local V = w and w.RootPart or v:FindFirstChild("HumanoidRootPart")
            local W = w and w.Health or nil
            local X = w and w.MaxHealth or nil
            local D = V and V.CFrame or (v.GetPivot and v:GetPivot() or nil)
            local F = V and V.Position or (D and D.Position or nil)
            R = {
                isTarget = true,
                player = u,
                userId = u.UserId,
                name = u.Name,
                displayName = u.DisplayName,
                character = v,
                humanoid = w,
                root = V,
                cframe = D,
                position = F,
                health = W,
                maxHealth = X,
                alive = w and w.Health > 0,
                time = os.clock()
            }
        end
        self._target.info = R
        for A, S in ipairs(self._target.listeners) do
            pcall(S, R)
        end
        if g and g["Debug"] then
            if R then
                print("[TargetFeed] SetTargetInfo:", R.name)
            else
                print("[TargetFeed] SetTargetInfo (char not ready):", u and u.Name or "nil")
            end
        end
    end
    function t:ClearTargetInfo()
        self._target.info = nil
        t._dd.override_player = nil
        for A, S in ipairs(self._target.listeners) do
            pcall(S, nil)
        end
        if g and g["Debug"] then
            print("[TargetFeed] ClearTargetInfo")
        end
    end
    t._dd = {
        last_target = nil,
        last_char = nil,
        hum = nil,
        last_health = nil,
        last_max = nil,
        conn = nil,
        hum_conn = nil,
        last_debug_t = 0,
        override_player = nil
    }
    function t:SetCurrentTarget(u)
        t._dd.override_player = u
        if g and g["Debug"] then
            print("[DD] SetCurrentTarget:", u and u.Name)
        end
    end
    function t:ClearCurrentTarget()
        t._dd.override_player = nil
        if g and g["Debug"] then
            print("[DD] ClearCurrentTarget")
        end
    end
    if not t._dd.conn then
        t._dd.conn =
            s.run.Heartbeat:Connect(
            function()
                local Y = t._dd
                local Z = t._dd.override_player or (targeting_state and targeting_state.current or nil)
                if g and g["Debug"] then
                    local _ = os.clock()
                    if _ - (Y.last_debug_t or 0) > 1 then
                        Y.last_debug_t = _
                        print(
                            string.format(
                                "[DD] hb: current=%s hum=%s lh=%s lm=%s",
                                Z and Z.Name or "nil",
                                Y.hum and "ok" or "nil",
                                tostring(Y.last_health),
                                tostring(Y.last_max)
                            )
                        )
                    end
                end
                if Z ~= Y.last_target then
                    Y.last_target = Z
                    Y.last_char = nil
                    Y.hum = nil
                    Y.last_health = nil
                    Y.last_max = nil
                    if Y.hum_conn then
                        pcall(
                            function()
                                Y.hum_conn:Disconnect()
                            end
                        )
                        Y.hum_conn = nil
                    end
                    if g and g["Debug"] then
                        print("[DD] target switched to:", Z and Z.Name)
                    end
                end
                if not Z then
                    return
                end
                local v = Z.Character
                if v ~= Y.last_char or Y.hum and not Y.hum.Parent then
                    Y.last_char = v
                    Y.hum = v and v:FindFirstChildOfClass("Humanoid") or nil
                    Y.last_health = nil
                    Y.last_max = nil
                    if Y.hum_conn then
                        pcall(
                            function()
                                Y.hum_conn:Disconnect()
                            end
                        )
                        Y.hum_conn = nil
                    end
                    if Y.hum then
                        s.run.Heartbeat:Wait()
                        if g and g["Debug"] then
                            print("[DD] humanoid bound for:", Z and Z.Name)
                        end
                        Y.hum_conn =
                            Y.hum.HealthChanged:Connect(
                            function(a0)
                                local a1 = Y.hum and Y.hum.MaxHealth or 0
                                if Y.last_health == nil or Y.last_max == nil or a1 ~= Y.last_max then
                                    Y.last_health = a0
                                    Y.last_max = a1
                                    return
                                end
                                if a0 ~= Y.last_health then
                                    local a2 = Y.last_health - a0
                                    if a2 > 0 then
                                        local a3 = s.math.floor((a1 > 0 and a0 / a1 or 0) * 100 + 0.5)
                                        local a4 = {player = Z, damage = a2, health = a0, max = a1, percentage = a3}
                                        if g and g["Debug"] then
                                            print(
                                                "[DD] hit:",
                                                a4.player and a4.player.Name,
                                                a4.damage,
                                                a4.health,
                                                a4.max,
                                                a4.percentage
                                            )
                                        end
                                    end
                                    Y.last_health = a0
                                    Y.last_max = a1
                                end
                            end
                        )
                    end
                end
                local w = Y.hum
                if not w or not w.Parent then
                    return
                end
                local a0 = w.Health
                local a1 = w.MaxHealth
                if Y.last_health == nil or Y.last_max == nil or a1 ~= Y.last_max then
                    Y.last_health = a0
                    Y.last_max = a1
                    return
                end
                if a0 ~= Y.last_health then
                    local a2 = Y.last_health - a0
                    if a2 > 0 then
                        local a3 = s.math.floor((a1 > 0 and a0 / a1 or 0) * 100 + 0.5)
                        local R = {player = Z, damage = a2, health = a0, max = a1, percentage = a3}
                        t:_emit_hit(R)
                    end
                    Y.last_health = a0
                    Y.last_max = a1
                end
            end
        )
        t:OnHit(
            function(R)
                local a5 = R.player and R.player.Name or "?"
                local a2 = s.math.floor(R.damage + 0.5)
                local a6 = s.math.floor(R.health + 0.5)
                local a7 = s.math.floor(R.max + 0.5)
                local a8 = s.math.floor(R.percentage + 0.5)
                t:_chat(string.format("[Hit] %s -%d HP | %d/%d (%d%%)", a5, a2, a6, a7, a8))
            end
        )
    end
end
do
    local a9 = {Desync = {Enabled = false, LogInterval = 2}}
    local desync_vars = {
        Players = game:GetService("Players"),
        RunService = game:GetService("RunService"),
        StarterGui = game:GetService("StarterGui"),
        newcf = CFrame.new,
        v3 = Vector3.new,
        typeof = typeof,
        task = task,
        math = math,
        cam = workspace.CurrentCamera,
        uis = game:GetService("UserInputService")
    }
    local LocalPlayer = desync_vars.Players.LocalPlayer
    local aa = task.wait
    local state = {
        enabled = false,
        targetCFrame = nil,
        realCFrame = nil,
        hookInstalled = false,
        logStarted = false,
        followMode = false,
        viz_enabled = false,
        viz_part = nil,
        viz_line = nil,
        viz_conn = nil
    }
    local desync_utility = {}
    function desync_utility:ValidateClient(u)
        if not u then
            return false
        end
        local v = u.Character
        if not v then
            return false
        end
        local w = v:FindFirstChildOfClass("Humanoid")
        if not w or w.Health <= 0 then
            return false
        end
        local B = w.RootPart
        return B ~= nil
    end
    function desync_utility:getPlayerParts(u)
        local v = u and u.Character
        local w = v and v:FindFirstChildOfClass("Humanoid")
        local B = w and w.RootPart
        return v, w, B
    end
    local function ab(ac, ad, ae)
        local af = desync_vars.typeof(ac)
        if af == "CFrame" then
            return ac
        end
        if af == "Vector3" then
            return desync_vars.newcf(ac)
        end
        if af == "table" and ac[1] and ac[2] and ac[3] then
            return desync_vars.newcf(ac[1], ac[2], ac[3])
        end
        if af == "number" and type(ad) == "number" and type(ae) == "number" then
            return desync_vars.newcf(ac, ad, ae)
        end
        return nil
    end
    local function ag()
        if state.hookInstalled then
            return
        end
        if not hookmetamethod or not newcclosure or not checkcaller then
            state.hookInstalled = true
            return
        end
        local ah
        ah =
            hookmetamethod(
            game,
            "__index",
            newcclosure(
                function(self, ai)
                    if not checkcaller() then
                        if ai == "CFrame" and state.enabled then
                            local A, w, B = desync_utility:getPlayerParts(LocalPlayer)
                            if B and self == B and state.realCFrame then
                                return state.realCFrame
                            end
                        end
                    end
                    return ah(self, ai)
                end
            )
        )
        state.hookInstalled = true
    end
    local function aj()
        if state.heartbeatConn then
            return
        end
        state.heartbeatConn =
            desync_vars.RunService.Heartbeat:Connect(
            function()
                if not a9.Desync.Enabled or not state.enabled then
                    return
                end
                if not desync_utility:ValidateClient(LocalPlayer) then
                    return
                end
                local A, A, B = desync_utility:getPlayerParts(LocalPlayer)
                if not B then
                    return
                end
                state.realCFrame = B.CFrame
                local ak
                if state.followMode then
                    ak = B.CFrame
                else
                    ak = state.targetCFrame or state.realCFrame
                end
                B.CFrame = ak
                desync_vars.RunService.RenderStepped:Wait()
                B.CFrame = state.realCFrame
            end
        )
    end
    local function al()
        if state.logStarted then
            return
        end
        state.logStarted = true
        desync_vars.task.spawn(
            function()
                while true do
                    desync_vars.task.wait(a9.Desync.LogInterval)
                    if a9.Desync.Enabled and state.enabled then
                        local F
                        if state.targetCFrame then
                            F = state.targetCFrame.Position
                        else
                            local A, A, B = desync_utility:getPlayerParts(LocalPlayer)
                            F = B and B.Position or nil
                        end
                        if F then
                            print(string.format("[DesyncLibrary] Pos: (%.2f, %.2f, %.2f)", F.X, F.Y, F.Z))
                        else
                            print("[DesyncLibrary] Pos: nil (not set)")
                        end
                    end
                end
            end
        )
    end
    local am = {}
    function am.movedesyncto(ac, ad, ae)
        local D = ab(ac, ad, ae)
        if not D then
            error("movedesyncto: invalid coordinates")
        end
        state.targetCFrame = D
        state.followMode = false
        a9.Desync.Enabled = true
        state.enabled = true
        ag()
        aj()
        al()
        return D
    end
    function am.checksyncposition()
        local F
        if state.targetCFrame then
            F = state.targetCFrame.Position
        else
            local A, A, B = desync_utility:getPlayerParts(LocalPlayer)
            F = B and B.Position or nil
        end
        if F then
            print(string.format("[DesyncLibrary] Pos: (%.2f, %.2f, %.2f)", F.X, F.Y, F.Z))
        else
            print("[DesyncLibrary] Pos: nil (not set)")
        end
        return F
    end
    function am.SynchronizeSyncWithPlayer()
        if not desync_utility:ValidateClient(LocalPlayer) then
            error("SynchronizeSyncWithPlayer: player not ready")
        end
        state.targetCFrame = nil
        state.followMode = true
        a9.Desync.Enabled = true
        state.enabled = true
        ag()
        aj()
        al()
        local A, A, B = desync_utility:getPlayerParts(LocalPlayer)
        return B and B.CFrame or nil
    end
    function am.SetVisualiseEnabled(an)
        state.viz_enabled = an and true or false
        if state.viz_enabled then
            ensure_visuals()
            start_visuals()
        else
            stop_visuals()
        end
        return state.viz_enabled
    end
    pcall(
        function()
            getgenv().DesyncLibrary = am
        end
    )
    _G.DesyncLibrary = am
end
local targeting_state = {current = nil}
do
    local ao = {}
    local ap = {
        last_char = nil,
        hl = nil,
        occ_hl = nil,
        occ_model = nil,
        char_added_conn = nil,
        char_removing_conn = nil,
        died_conn = nil,
        bound_player = nil,
        update_counter = 0
    }
    local aq = "RB_HL_32v"
    local function ar()
        local as = Instance.new("Highlight")
        as.Name = aq
        as.DepthMode = Enum.HighlightDepthMode.Occluded
        return as
    end
    local function at(v)
        if ap.occ_model then
            pcall(
                function()
                    ap.occ_model:Destroy()
                end
            )
            ap.occ_model = nil
        end
        if not v then
            return
        end
        local au = Instance.new("Model")
        au.Name = "RB_TH_OCC"
        au.Parent = workspace
        for A, av in ipairs(v:GetChildren()) do
            if av:IsA("BasePart") then
                local aw = av:Clone()
                aw:ClearAllChildren()
                aw.CanCollide = false
                if aw:IsA("MeshPart") then
                    aw.TextureID = ""
                end
                aw.Size = aw.Size * 0.99
                aw.Parent = au
                local ax = Instance.new("WeldConstraint")
                ax.Part0 = aw
                ax.Part1 = av
                ax.Parent = aw
            end
        end
        ap.occ_model = au
    end
    local function ay()
        if ap.hl then
            ap.hl.Enabled = false
            ap.hl.Adornee = nil
            ap.hl.Parent = nil
        end
        if ap.occ_hl then
            ap.occ_hl.Enabled = false
            ap.occ_hl.Adornee = nil
            ap.occ_hl.Parent = nil
        end
        if ap.occ_model then
            pcall(
                function()
                    ap.occ_model:Destroy()
                end
            )
            ap.occ_model = nil
        end
        if ap.died_conn then
            pcall(
                function()
                    ap.died_conn:Disconnect()
                end
            )
            ap.died_conn = nil
        end
        if ap.char_added_conn then
            pcall(
                function()
                    ap.char_added_conn:Disconnect()
                end
            )
            ap.char_added_conn = nil
        end
        if ap.char_removing_conn then
            pcall(
                function()
                    ap.char_removing_conn:Disconnect()
                end
            )
            ap.char_removing_conn = nil
        end
        ap.last_char = nil
        ap.bound_player = nil
    end
    local function az()
        if ap.hl then
            ap.hl.Enabled = false
            ap.hl.Adornee = nil
        end
        if ap.occ_hl then
            ap.occ_hl.Enabled = false
            ap.occ_hl.Adornee = nil
        end
        ap.last_char = nil
    end
    local function aA(aB, aC)
        local aD = g and g[aB]
        if aD == nil then
            return aC
        end
        local af = typeof(aD)
        if af == "table" and aD.Color then
            return aD.Color
        end
        if af == "Color3" then
            return aD
        end
        return aC
    end
    local function aE(aB, aC)
        local aD = g and g[aB]
        if typeof(aD) == "number" then
            return aD
        end
        return aC
    end
    local function aF(v)
        if not v or not g or not g["target_highlight"] then
            az()
            return
        end
        if not ap.hl then
            ap.hl = ar()
        end
        if not ap.occ_hl then
            ap.occ_hl = ar()
        end
        if not ap.occ_model or not ap.occ_model.Parent then
            at(v)
        end
        local as = ap.hl
        as.DepthMode = Enum.HighlightDepthMode.Occluded
        as.FillColor = aA("th_fill", Color3.fromRGB(255, 255, 0))
        as.OutlineColor = aA("th_out", Color3.fromRGB(0, 0, 0))
        as.FillTransparency = aE("th_ftrs", 0.5)
        as.OutlineTransparency = aE("th_otrs", 0.5)
        if as.Adornee ~= v then
            as.Adornee = v
        end
        if as.Parent ~= v then
            as.Parent = v
        end
        as.Enabled = true
        local aG = ap.occ_hl
        aG.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
        aG.FillColor = aA("th_occ_fill", Color3.fromRGB(0, 170, 255))
        aG.OutlineColor = aA("th_occ_out", Color3.fromRGB(0, 0, 0))
        aG.FillTransparency = aE("th_occ_ftrs", 0.3)
        aG.OutlineTransparency = aE("th_occ_otrs", 0.7)
        if aG.Adornee ~= ap.occ_model then
            aG.Adornee = ap.occ_model
        end
        if aG.Parent ~= ap.occ_model then
            aG.Parent = ap.occ_model
        end
        aG.Enabled = true
        ap.last_char = v
    end
    local function aH(v)
        if not v then
            return
        end
        local w = v:FindFirstChildOfClass("Humanoid")
        if w then
            if ap.died_conn then
                pcall(
                    function()
                        ap.died_conn:Disconnect()
                    end
                )
            end
            ap.died_conn =
                w.Died:Connect(
                function()
                    print("[TH] Humanoid died for:", v.Name, "- removing visual highlight")
                    az()
                end
            )
        end
    end
    local function aI(v)
        if not v then
            return
        end
        print("[TH] Cleanup highlights for:", v.Name)
        if ap.hl then
            ap.hl.Enabled = false
            ap.hl.Adornee = nil
        end
        for A, aJ in ipairs(v:GetDescendants()) do
            if typeof(aJ) == "Instance" and aJ:IsA("Highlight") and aJ ~= ap.hl then
                pcall(
                    function()
                        aJ:Destroy()
                    end
                )
            end
        end
    end
    local function aK(u)
        if not u then
            return
        end
        if ap.char_added_conn then
            pcall(
                function()
                    ap.char_added_conn:Disconnect()
                end
            )
        end
        if ap.char_removing_conn then
            pcall(
                function()
                    ap.char_removing_conn:Disconnect()
                end
            )
        end
        ap.bound_player = u
        ap.char_removing_conn =
            u.CharacterRemoving:Connect(
            function()
                print("[TH] CharacterRemoving for:", u.Name)
                az()
            end
        )
        ap.char_added_conn =
            u.CharacterAdded:Connect(
            function(aL)
                if not aL then
                    return
                end
                print("[TH] CharacterAdded for:", u.Name)
                game:GetService("RunService").Heartbeat:Wait()
                local aM =
                    targeting_state and targeting_state.current and
                    (targeting_state.current == u or
                        targeting_state.current.UserId and targeting_state.current.UserId == u.UserId)
                if aM and g and g["target_highlight"] then
                    print("[TH] Reapplying highlight after respawn for:", u.Name)
                    aF(aL)
                    aH(aL)
                end
            end
        )
        if u.Character then
            aF(u.Character)
            aH(u.Character)
        end
    end
    local function aN(v)
        if not v then
            return false
        end
        local aO = workspace.CurrentCamera
        local V = v:FindFirstChild("HumanoidRootPart") or v:FindFirstChild("Head")
        if not V then
            return false
        end
        local aP = aO.CFrame.Position
        local aQ = V.Position - aP
        local aR = RaycastParams.new()
        aR.FilterType = Enum.RaycastFilterType.Blacklist
        aR.FilterDescendantsInstances = {i.Character, v, ap.occ_model}
        local aS = workspace:Raycast(aP, aQ, aR)
        return aS == nil
    end
    function ao:update_target_highlight()
        if not g or not g["target_highlight"] then
            ay()
            return
        end
        local Z = targeting_state and targeting_state.current
        local v = Z and Z.Character
        if not v then
            ay()
            return
        end
        if ap.last_char ~= v then
            aF(v)
            aH(v)
        end
        local aT = aN(v)
        if ap.occ_hl then
            ap.occ_hl.Enabled = not aT
        end
    end
    function ao:selectTarget()
        if not g or not g["Targeting_Enabled"] then
            return
        end
        if g and g["Debug"] then
            print("[Targeting] selectTarget called")
        end
        if targeting_state.current then
            if g and g["Debug"] then
                print("[Targeting] Releasing target:", targeting_state.current.Name)
            end
            ay()
            targeting_state.current = nil
            t:ClearTargetInfo()
            t:ClearCurrentTarget()
            if targeting_keybind and targeting_keybind.update_visibility then
                targeting_keybind.update_visibility()
            end
            if g and g["Debug"] then
                print("[Targeting] Target cleared")
            end
        else
            local aU, aV = t:GetClosestToMouse()
            if aU then
                targeting_state.current = aU
                t:SetTargetInfo(aU)
                t:SetCurrentTarget(aU)
                if g and g["target_highlight"] then
                    aK(aU)
                end
                if targeting_keybind and targeting_keybind.update_visibility then
                    targeting_keybind.update_visibility()
                end
                if g and g["Debug"] then
                    print(
                        "[Targeting] Target acquired:",
                        targeting_state.current.Name,
                        "(MouseDist:",
                        s.math.floor(aV),
                        ")"
                    )
                end
            else
                if g and g["Debug"] then
                    print("[Targeting] No target found")
                end
            end
        end
    end
    local aW = k:column()
    local aX, aY = aW:multi_section({names = {"Targeting", "Visuals"}})
    local targeting_keybind
    local aZ =
        aX:toggle(
        {name = "Enabled", flag = "Targeting_Enabled", default = false, callback = function(state)
                if not state then
                    if g and g["Debug"] then
                        print("[Targeting] Disabled -> clearing target")
                    end
                    ay()
                    targeting_state.current = nil
                    t:ClearTargetInfo()
                    t:ClearCurrentTarget()
                    if targeting_keybind and targeting_keybind.update_visibility then
                        targeting_keybind.update_visibility()
                    end
                end
            end}
    )
    targeting_keybind =
        aZ:keybind(
        {name = "Target", flag = "Target_Select_Bind", default = "t", visibility_condition = function()
                return targeting_state and targeting_state.current ~= nil
            end, callback = function()
                ao:selectTarget()
            end}
    )
    local a_ =
        aX:dropdown({name = "Selecting Mode", flag = "Targeting_Mode", items = {"Sticky", "Nuker"}, default = "Sticky"})
    local function b0()
        if not g or not g["target_highlight"] then
            return
        end
        local v = ap and ap.last_char
        if not v and targeting_state and targeting_state.current then
            v = targeting_state.current.Character
            if v then
                ap.last_char = v
            end
        end
        if v then
            aF(v)
            aH(v)
        end
    end
    local b1 =
        aY:toggle(
        {name = "Target Highlight", flag = "target_highlight", default = false, callback = function(state)
                if state then
                    b0()
                else
                    ay()
                end
            end}
    )
    b1:colorpicker(
        {name = "Fill", flag = "th_fill", default = Color3.fromRGB(255, 255, 0), callback = function()
                b0()
            end}
    )
    b1:colorpicker(
        {name = "Outline", flag = "th_out", default = Color3.fromRGB(0, 0, 0), callback = function()
                b0()
            end}
    )
    b1:colorpicker(
        {name = "OccludedFill", flag = "th_occ_fill", default = Color3.fromRGB(0, 170, 255), callback = function()
                b0()
            end}
    )
    b1:colorpicker(
        {name = "OccludedOutline", flag = "th_occ_out", default = Color3.fromRGB(0, 0, 0), callback = function()
                b0()
            end}
    )
    local b2 = aY:dependency_box()
    b2:setup_dependencies({{b1, true}})
    b2:slider(
        {
            name = "Fill Transparency",
            flag = "th_ftrs",
            min = 0,
            max = 1,
            default = 0.5,
            interval = 0.01,
            callback = function()
                b0()
            end
        }
    )
    b2:slider(
        {
            name = "Outline Transparency",
            flag = "th_otrs",
            min = 0,
            max = 1,
            default = 0.5,
            interval = 0.01,
            callback = function()
                b0()
            end
        }
    )
    b2:slider(
        {
            name = "OccludedFill Transparency",
            flag = "th_occ_ftrs",
            min = 0,
            max = 1,
            default = 0.3,
            interval = 0.01,
            callback = function()
                b0()
            end
        }
    )
    b2:slider(
        {
            name = "OccludedOutline Transparency",
            flag = "th_occ_otrs",
            min = 0,
            max = 1,
            default = 0.7,
            interval = 0.01,
            callback = function()
                b0()
            end
        }
    )
    do
        local b3 = {
            enabled = false,
            folder = nil,
            handles = {},
            fill_color = c("#ffffff"),
            fill_transparency = 0.5,
            last_target = nil
        }
        local function b4()
            for A, b5 in pairs(b3.handles) do
                pcall(
                    function()
                        b5:Destroy()
                    end
                )
            end
            b3.handles = {}
            if b3.folder then
                pcall(
                    function()
                        b3.folder:Destroy()
                    end
                )
                b3.folder = nil
            end
        end
        local function b6(v)
            if not v then
                return
            end
            if not b3.folder then
                b3.folder = Instance.new("Folder")
                b3.folder.Name = "RB_Chams"
                b3.folder.Parent = workspace.CurrentCamera
            end
            for A, b5 in pairs(b3.handles) do
                pcall(
                    function()
                        b5:Destroy()
                    end
                )
            end
            b3.handles = {}
            for A, E in ipairs(v:GetChildren()) do
                if
                    E:IsA("BasePart") and
                        (E.Name:find("Arm") or E.Name:find("Leg") or E.Name:find("Hand") or E.Name:find("Feet") or
                            E.Name:find("Foot") or
                            E.Name:find("Torso") or
                            E.Name == "Head")
                 then
                    local b5 = Instance.new("BoxHandleAdornment")
                    b5.Size = E.Size
                    b5.Adornee = E
                    b5.AlwaysOnTop = true
                    b5.ZIndex = 0
                    b5.Transparency = b3.fill_transparency
                    b5.Color3 = b3.fill_color
                    b5.Parent = b3.folder
                    table.insert(b3.handles, b5)
                end
            end
        end
        local function b7()
            if not b3.enabled then
                b4()
                return
            end
            local ak = targeting_state and targeting_state.current
            if not ak or not ak.Character then
                b4()
                b3.last_target = nil
                return
            end
            if b3.last_target ~= ak.Character then
                b6(ak.Character)
                b3.last_target = ak.Character
            end
            for A, b5 in pairs(b3.handles) do
                if b5 and b5.Parent then
                    b5.Color3 = b3.fill_color
                    b5.Transparency = b3.fill_transparency
                    b5.AlwaysOnTop = true
                end
            end
        end
        local b8 =
            aY:toggle(
            {name = "Target Chams", flag = "target_chams", default = false, callback = function(state)
                    b3.enabled = state
                    if state then
                        b7()
                    else
                        b4()
                    end
                end}
        )
        b8:colorpicker(
            {name = "Color", flag = "chams_color", default = c("#ffffff"), callback = function(b9)
                    b3.fill_color = b9
                    b7()
                end}
        )
        local ba = aY:dependency_box()
        ba:setup_dependencies({{b8, true}})
        ba:slider(
            {name = "Trs", flag = "chams_trs", min = 0, max = 1, default = 0.5, interval = 0.01, callback = function(bb)
                    b3.fill_transparency = bb
                    b7()
                end}
        )
        table.insert(
            a.connections,
            s.run.RenderStepped:Connect(
                function()
                    if b3.enabled then
                        b7()
                    end
                end
            )
        )
        t:OnTargetUpdate(
            function(R)
                if not R then
                    b4()
                    b3.last_target = nil
                end
            end
        )
    end
    do
        local bc = {
            enabled = false,
            style = "Custom",
            c1 = Color3.fromRGB(128, 18, 255),
            c2 = Color3.fromRGB(255, 0, 128),
            c3 = Color3.fromRGB(0, 200, 255),
            c4 = Color3.fromRGB(255, 255, 0),
            height = 0.7,
            radius = 2,
            sides = 25,
            hat_trs = 0.35,
            line_trs = 1.0,
            drawings = {},
            conn = nil,
            speed = 0.2
        }
        local function bd(be, bf, af)
            return be + (bf - be) * af
        end
        local function bg(be, bf, af)
            return Color3.new(bd(be.R, bf.R, af), bd(be.G, bf.G, af), bd(be.B, bf.B, af))
        end
        local function bh(af, bi)
            local bj = (af + bi * bc.speed) % 1
            if bj < 0.25 then
                return bg(bc.c1, bc.c2, bj / 0.25)
            elseif bj < 0.5 then
                return bg(bc.c2, bc.c3, (bj - 0.25) / 0.25)
            elseif bj < 0.75 then
                return bg(bc.c3, bc.c4, (bj - 0.5) / 0.25)
            else
                return bg(bc.c4, bc.c1, (bj - 0.75) / 0.25)
            end
        end
        local function bk(bl, af, bi, bm)
            local bn = #bl
            if bn == 0 then
                return Color3.new(1, 1, 1)
            end
            if bn == 1 then
                return bl[1]
            end
            local bj = (af + bi * (bm or bc.speed)) % 1
            local bo = bj * bn
            local bp = math.floor(bo) + 1
            local bq = bo - math.floor(bo)
            local be = bl[bp]
            local bf = bl[bp % bn + 1]
            return bg(be, bf, bq)
        end
        local function br(af, bi)
            local bl = {Color3.fromRGB(255, 105, 180), Color3.fromRGB(255, 75, 150), Color3.fromRGB(135, 206, 250)}
            return bk(bl, af, bi, 0.25)
        end
        local function bs(af, bi)
            local bt = (bi * 0.2 + af) % 1
            return Color3.fromHSV(bt, 0.6, 1)
        end
        local function bu()
            if #bc.drawings == bc.sides then
                return
            end
            for A, bv in ipairs(bc.drawings) do
                pcall(
                    function()
                        if bv[1] then
                            bv[1]:Remove()
                        end
                    end
                )
                pcall(
                    function()
                        if bv[2] then
                            bv[2]:Remove()
                        end
                    end
                )
            end
            bc.drawings = {}
            for bp = 1, bc.sides do
                local y = Drawing.new("Line")
                local bw = Drawing.new("Triangle")
                y.ZIndex = 2
                y.Thickness = 1
                bw.ZIndex = 1
                bw.Filled = true
                table.insert(bc.drawings, {y, bw})
            end
        end
        local function bx(aD)
            for A, bv in ipairs(bc.drawings) do
                local y, bw = bv[1], bv[2]
                if y then
                    y.Visible = aD
                end
                if bw then
                    bw.Visible = aD
                end
            end
        end
        local function by()
            if bc.conn then
                pcall(
                    function()
                        bc.conn:Disconnect()
                    end
                )
                bc.conn = nil
            end
            for A, bv in ipairs(bc.drawings) do
                pcall(
                    function()
                        if bv[1] then
                            bv[1]:Remove()
                        end
                    end
                )
                pcall(
                    function()
                        if bv[2] then
                            bv[2]:Remove()
                        end
                    end
                )
            end
            bc.drawings = {}
        end
        local bz = {
            CustomPalette1 = {Color3.fromRGB(255, 94, 58), Color3.fromRGB(255, 154, 0), Color3.fromRGB(255, 212, 0)},
            CustomPalette2 = {
                Color3.fromRGB(0, 212, 255),
                Color3.fromRGB(0, 128, 255),
                Color3.fromRGB(0, 64, 128),
                Color3.fromRGB(0, 40, 80)
            },
            CustomPalette3 = {Color3.fromRGB(255, 0, 0), Color3.fromRGB(255, 102, 0)},
            CustomPalette4 = {
                Color3.fromRGB(200, 255, 255),
                Color3.fromRGB(150, 220, 255),
                Color3.fromRGB(100, 200, 255),
                Color3.fromRGB(80, 160, 220),
                Color3.fromRGB(60, 120, 190)
            },
            CustomPalette5 = {Color3.fromRGB(88, 0, 255), Color3.fromRGB(255, 0, 191), Color3.fromRGB(0, 160, 255)},
            CustomPalette6 = {Color3.fromRGB(0, 255, 128), Color3.fromRGB(255, 0, 255), Color3.fromRGB(0, 255, 255)},
            CustomPalette7 = {
                Color3.fromRGB(255, 255, 255),
                Color3.fromRGB(200, 200, 200),
                Color3.fromRGB(150, 150, 150),
                Color3.fromRGB(100, 100, 100)
            },
            CustomPalette8 = {Color3.fromRGB(255, 20, 147), Color3.fromRGB(186, 85, 211), Color3.fromRGB(72, 61, 139)},
            CustomPalette9 = {Color3.fromRGB(0, 255, 255), Color3.fromRGB(173, 216, 230), Color3.fromRGB(25, 25, 112)},
            CustomPalette10 = {Color3.fromRGB(255, 215, 0), Color3.fromRGB(255, 165, 0), Color3.fromRGB(255, 69, 0)},
            CustomPalette11 = {Color3.fromRGB(124, 252, 0), Color3.fromRGB(50, 205, 50), Color3.fromRGB(0, 128, 0)},
            CustomPalette12 = {
                Color3.fromRGB(0, 0, 0),
                Color3.fromRGB(45, 0, 80),
                Color3.fromRGB(120, 0, 200),
                Color3.fromRGB(255, 0, 255)
            },
            CustomPalette13 = {
                Color3.fromRGB(0, 0, 128),
                Color3.fromRGB(0, 0, 255),
                Color3.fromRGB(0, 191, 255),
                Color3.fromRGB(135, 206, 250)
            },
            CustomPalette14 = {
                Color3.fromRGB(255, 105, 180),
                Color3.fromRGB(255, 182, 193),
                Color3.fromRGB(135, 206, 250)
            },
            CustomPalette15 = {
                Color3.fromRGB(240, 255, 255),
                Color3.fromRGB(176, 224, 230),
                Color3.fromRGB(135, 206, 235),
                Color3.fromRGB(70, 130, 180)
            },
            CustomPalette16 = {
                Color3.fromRGB(255, 255, 240),
                Color3.fromRGB(255, 250, 205),
                Color3.fromRGB(250, 250, 210),
                Color3.fromRGB(238, 232, 170)
            }
        }
        local function bA(bB, bi)
            local bC = bc.style
            if bC == "Rainbow" then
                return bs(bB, bi)
            elseif bC == "Astolfo" then
                return br(bB, bi)
            elseif bz[bC] ~= nil then
                return bk(bz[bC], bB, bi, 0.2)
            else
                return bh(bB, bi)
            end
        end
        local function bD()
            if not bc.enabled then
                by()
                return
            end
            local ak = targeting_state and targeting_state.current
            local v = ak and ak.Character or nil
            local bE = v and v:FindFirstChild("Head")
            local w = v and v:FindFirstChildOfClass("Humanoid")
            if not (v and bE and w and w.Health > 0) then
                by()
                return
            end
            bu()
            local aO = workspace.CurrentCamera
            local bF = tick()
            local bG = math.pi * 2
            local F = bE.Position + Vector3.new(0, 0.75, 0)
            local bH = F + Vector3.new(0, bc.height, 0)
            local bI, bJ = aO:WorldToViewportPoint(bE.Position)
            if not bJ or bI.Z <= 0 then
                bx(false)
                return
            end
            for bp = 1, bc.sides do
                local y, bw = bc.drawings[bp][1], bc.drawings[bp][2]
                local bK = bp / bc.sides
                local bL = (bp % bc.sides + 1) / bc.sides
                local bM = bK * bG
                local bN = bL * bG
                local bO = F + Vector3.new(math.cos(bM), 0, math.sin(bM)) * bc.radius
                local bP = F + Vector3.new(math.cos(bN), 0, math.sin(bN)) * bc.radius
                local bQ = aO:WorldToViewportPoint(bO)
                local bR = aO:WorldToViewportPoint(bP)
                local bS = aO:WorldToViewportPoint(bH)
                local bT = bA(bK, bF)
                y.From = Vector2.new(bQ.X, bQ.Y)
                y.To = Vector2.new(bR.X, bR.Y)
                y.Color = bT
                y.Transparency = bc.line_trs
                y.Visible = true
                bw.PointA = Vector2.new(bS.X, bS.Y)
                bw.PointB = y.From
                bw.PointC = y.To
                bw.Color = bT
                bw.Transparency = bc.hat_trs
                bw.Visible = true
            end
        end
        local bU =
            aY:toggle(
            {name = "Target ChinaHat", flag = "china_hat", default = false, callback = function(state)
                    bc.enabled = state
                    if state then
                        bD()
                    else
                        by()
                    end
                end}
        )
        bU:colorpicker(
            {name = "Color 1", flag = "hat_c1", default = bc.c1, callback = function(bV)
                    bc.c1 = bV
                end}
        )
        bU:colorpicker(
            {name = "Color 2", flag = "hat_c2", default = bc.c2, callback = function(bV)
                    bc.c2 = bV
                end}
        )
        bU:colorpicker(
            {name = "Color 3", flag = "hat_c3", default = bc.c3, callback = function(bV)
                    bc.c3 = bV
                end}
        )
        bU:colorpicker(
            {name = "Color 4", flag = "hat_c4", default = bc.c4, callback = function(bV)
                    bc.c4 = bV
                end}
        )
        local bW = aY:dependency_box()
        bW:setup_dependencies({{bU, true}})
        local bX =
            bW:dropdown(
            {
                name = "Style",
                flag = "hat_style",
                items = {
                    "Custom",
                    "Rainbow",
                    "Astolfo",
                    "CustomPalette1",
                    "CustomPalette2",
                    "CustomPalette3",
                    "CustomPalette4",
                    "CustomPalette5",
                    "CustomPalette6",
                    "CustomPalette7",
                    "CustomPalette8",
                    "CustomPalette9",
                    "CustomPalette10",
                    "CustomPalette11",
                    "CustomPalette12",
                    "CustomPalette13",
                    "CustomPalette14",
                    "CustomPalette15",
                    "CustomPalette16"
                },
                default = "Custom",
                callback = function(bY)
                    bc.style = bY
                end
            }
        )
        table.insert(
            a.connections,
            s.run.RenderStepped:Connect(
                function()
                    if bc.enabled then
                        bD()
                    end
                end
            )
        )
        t:OnTargetUpdate(
            function(R)
                if not R then
                    by()
                end
            end
        )
    end
    do
        local bZ = {
            enabled = false,
            color = c("#ffffff"),
            size = 1.0,
            speed = 1.0,
            bill = nil,
            img = nil,
            angle = 0,
            conn = nil,
            last_tick = os.clock(),
            asset_items = nil,
            asset_map = nil
        }
        local function b_(c0)
            if getcustomasset then
                return getcustomasset(c0)
            end
            if getsynasset then
                return getsynasset(c0)
            end
            return c0
        end
        local function c1()
            local aQ = (a and a.directory or "Rebuild.gg") .. "/assets"
            local c2, c3 = {}, {}
            local c4, c5 =
                pcall(
                function()
                    return listfiles and listfiles(aQ) or {}
                end
            )
            if c4 and c5 and #c5 > 0 then
                table.sort(c5)
                for A, bq in ipairs(c5) do
                    local c6 = string.lower(bq)
                    if c6:sub(-4) == ".png" or c6:sub(-4) == ".jpg" or c6:sub(-5) == ".jpeg" then
                        local a5 = bq:match("([^/\\]+)$") or bq
                        table.insert(c2, a5)
                        c3[a5] = b_(bq)
                    end
                end
            end
            bZ.asset_items = c2
            bZ.asset_map = c3
            return c2, c3
        end
        local function c7(a5)
            if not a5 or a5 == "" then
                return
            end
            local c3 = bZ.asset_map or select(2, c1())
            local c0 = c3 and c3[a5]
            if bZ.img then
                bZ.img.Image = c0 or bZ.img.Image or ""
            end
        end
        local function c8()
            local aQ = (a and a.directory or "Rebuild.gg") .. "/assets"
            local c4, c5 =
                pcall(
                function()
                    return listfiles and listfiles(aQ) or {}
                end
            )
            if not c4 or not c5 or #c5 == 0 then
                return nil
            end
            table.sort(c5)
            for A, bq in ipairs(c5) do
                local c6 = string.lower(bq)
                if c6:sub(-4) == ".png" or c6:sub(-4) == ".jpg" or c6:sub(-5) == ".jpeg" then
                    return b_(bq)
                end
            end
            return b_(c5[1])
        end
        local function c9()
            if bZ.bill then
                return
            end
            local ca = Instance.new("BillboardGui")
            ca.Name = "RB_TargetESP"
            ca.AlwaysOnTop = true
            ca.LightInfluence = 0
            ca.Size = UDim2.new(bZ.size, 0, bZ.size, 0)
            ca.Enabled = true
            local cb = Instance.new("ImageLabel")
            cb.Name = "CrosshairImage"
            cb.BackgroundTransparency = 1
            cb.Size = UDim2.new(1, 0, 1, 0)
            cb.Position = UDim2.fromScale(0, 0)
            if not bZ.asset_items or not bZ.asset_map then
                c1()
            end
            local cc = g and g["target_esp_image"] or bZ.asset_items and bZ.asset_items[1]
            cb.Image = cc and bZ.asset_map and bZ.asset_map[cc] or (c8() or "")
            cb.ImageColor3 = bZ.color
            cb.Parent = ca
            bZ.bill = ca
            bZ.img = cb
        end
        local function cd()
            if bZ.bill then
                pcall(
                    function()
                        bZ.bill:Destroy()
                    end
                )
            end
            bZ.bill = nil
            bZ.img = nil
        end
        local function ce()
            local u = targeting_state and targeting_state.current
            if not u or not u.Character then
                return nil
            end
            local v = u.Character
            local cf = g and g["aimbot_part"]
            if cf and v:FindFirstChild(cf) then
                return v[cf]
            end
            return t:GetPreferredPart(v)
        end
        local function cg()
            if not bZ.enabled then
                return
            end
            c9()
            local E = ce()
            if not E then
                if bZ.bill then
                    bZ.bill.Parent = nil
                end
                return
            end
            bZ.bill.Adornee = E
            bZ.bill.Parent = E
            local aO = s and s.cam or workspace.CurrentCamera
            local ch = (aO.CFrame.Position - E.Position).Magnitude
            local ci = math.clamp(ch / 30, 0.8, 4)
            local cj = g and g["target_esp_size"] or bZ.size
            cj = (cj or 1) * ci
            bZ.bill.Size = UDim2.new(cj, 0, cj, 0)
            local _ = os.clock()
            local ck = math.max(0, _ - (bZ.last_tick or _))
            bZ.last_tick = _
            local cl = g and g["target_esp_speed"] or bZ.speed
            bZ.angle = (bZ.angle + (cl or 1) * 180 * ck) % 360
            if bZ.img then
                bZ.img.Rotation = bZ.angle
                local b9 = g and g["target_esp_color"] or bZ.color
                if type(b9) == "table" then
                    if b9.R and b9.G and b9.B then
                        bZ.img.ImageColor3 = Color3.new(b9.R, b9.G, b9.B)
                    elseif b9.r and b9.g and b9.b then
                        bZ.img.ImageColor3 = Color3.new(b9.r, b9.g, b9.b)
                    else
                        bZ.img.ImageColor3 = Color3.new(1, 1, 1)
                    end
                else
                    bZ.img.ImageColor3 = b9
                end
            end
        end
        local cm =
            aY:toggle(
            {
                name = "Target Esp",
                flag = "target_esp",
                default = false,
                callback = function(state)
                    bZ.enabled = state
                    if state then
                        c9()
                        if not bZ.conn then
                            bZ.conn = s.run.RenderStepped:Connect(cg)
                            table.insert(a.connections, bZ.conn)
                        end
                    else
                        if bZ.conn then
                            pcall(
                                function()
                                    bZ.conn:Disconnect()
                                end
                            )
                        end
                        bZ.conn = nil
                        cd()
                    end
                end
            }
        )
        cm:colorpicker(
            {name = "Color", flag = "target_esp_color", default = c("#ffffff"), callback = function(b9)
                    bZ.color = b9
                    if bZ.img then
                        bZ.img.ImageColor3 = b9
                    end
                end}
        )
        local cn = aY:dependency_box()
        cn:setup_dependencies({{cm, true}})
        local c2 = c1()
        local co = c2 and c2[1] or nil
        cn:dropdown(
            {name = "Image", flag = "target_esp_image", items = c2 or {}, default = co, callback = function(a5)
                    c7(a5)
                end}
        )
        cn:slider(
            {
                name = "Size",
                flag = "target_esp_size",
                min = 0.1,
                max = 40,
                default = 1,
                interval = 0.05,
                callback = function(aD)
                    bZ.size = aD
                end
            }
        )
        cn:slider(
            {
                name = "Speed",
                flag = "target_esp_speed",
                min = 0.1,
                max = 10,
                default = 1,
                interval = 0.1,
                callback = function(aD)
                    bZ.speed = aD
                end
            }
        )
        t:OnTargetUpdate(
            function(R)
                if not R then
                    cd()
                end
            end
        )
        table.insert(
            a.connections,
            {
                Disconnect = function()
                    if bZ.conn then
                        pcall(
                            function()
                                bZ.conn:Disconnect()
                            end
                        )
                    end
                    bZ.conn = nil
                    cd()
                end
            }
        )
    end
    do
        local cp = {
            enabled = false,
            body_part = "HumanoidRootPart",
            origin = "mouse",
            line = nil,
            outline = nil,
            connection = nil,
            line_thickness = 2,
            outline_thickness = 4,
            line_color = Color3.fromRGB(255, 255, 255),
            outline_color = Color3.fromRGB(0, 0, 0)
        }
        local function cq()
            if cp.line then
                pcall(
                    function()
                        cp.line:Remove()
                    end
                )
                cp.line = nil
            end
            if cp.outline then
                pcall(
                    function()
                        cp.outline:Remove()
                    end
                )
                cp.outline = nil
            end
            if cp.connection then
                cp.connection:Disconnect()
                cp.connection = nil
            end
        end
        local function cr()
            if not cp.enabled then
                cq()
                return
            end
            if not cp.outline then
                cp.outline = Drawing.new("Line")
                cp.outline.Visible = false
                cp.outline.Color = cp.outline_color
                cp.outline.Thickness = cp.outline_thickness
            end
            if not cp.line then
                cp.line = Drawing.new("Line")
                cp.line.Visible = false
                cp.line.Color = cp.line_color
                cp.line.Thickness = cp.line_thickness
            end
            if not cp.connection then
                local cs = s and s.run or game:GetService("RunService")
                local ct = s and s.uis or game:GetService("UserInputService")
                local cu = workspace and workspace.CurrentCamera or game:GetService("Workspace").CurrentCamera
                cp.connection =
                    cs.RenderStepped:Connect(
                    function()
                        if not cp.enabled or not targeting_state.current then
                            if cp.line then
                                cp.line.Visible = false
                            end
                            if cp.outline then
                                cp.outline.Visible = false
                            end
                            if cp.beam_line then
                                cp.beam_line.Enabled = false
                            end
                            if cp.beam_outline then
                                cp.beam_outline.Enabled = false
                            end
                            return
                        end
                        local ak = targeting_state.current
                        local v = ak and ak.Character
                        if not v then
                            if cp.line then
                                cp.line.Visible = false
                            end
                            if cp.outline then
                                cp.outline.Visible = false
                            end
                            return
                        end
                        local E = v:FindFirstChild(cp.body_part)
                        if not E then
                            if cp.line then
                                cp.line.Visible = false
                            end
                            if cp.outline then
                                cp.outline.Visible = false
                            end
                            return
                        end
                        local cv, cw = cu:WorldToViewportPoint(E.Position)
                        if not cw then
                            if cp.line then
                                cp.line.Visible = false
                            end
                            if cp.outline then
                                cp.outline.Visible = false
                            end
                            if cp.beam_line then
                                cp.beam_line.Enabled = false
                            end
                            if cp.beam_outline then
                                cp.beam_outline.Enabled = false
                            end
                            return
                        end
                        local cx = Vector2.new(cv.X, cv.Y)
                        local cy
                        if cp.origin == "mouse" then
                            cy = ct:GetMouseLocation()
                        elseif cp.origin == "top" then
                            cy = Vector2.new(cu.ViewportSize.X / 2, 0)
                        elseif cp.origin == "bottom" then
                            cy = Vector2.new(cu.ViewportSize.X / 2, cu.ViewportSize.Y)
                        elseif cp.origin == "center" then
                            cy = Vector2.new(cu.ViewportSize.X / 2, cu.ViewportSize.Y / 2)
                        end
                        if cp.outline then
                            cp.outline.From = cy
                            cp.outline.To = cx
                            cp.outline.Visible = true
                            cp.outline.Thickness = cp.outline_thickness
                        end
                        if cp.line then
                            cp.line.From = cy
                            cp.line.To = cx
                            cp.line.Visible = true
                            cp.line.Thickness = cp.line_thickness
                            cp.line.Color = cp.line_color
                        end
                    end
                )
            end
        end
        local cz =
            aY:toggle(
            {name = "Target Tracer", flag = "target_tracer", default = false, callback = function(state)
                    cp.enabled = state
                    if state then
                        cr()
                    else
                        cq()
                    end
                end}
        )
        cz:colorpicker(
            {name = "Outline", flag = "tt_out", default = Color3.fromRGB(0, 0, 0), callback = function(b9)
                    cp.outline_color = b9
                    if cp.outline then
                        cp.outline.Color = b9
                    end
                end}
        )
        cz:colorpicker(
            {name = "Fill", flag = "tt_fill", default = Color3.fromRGB(255, 255, 255), callback = function(b9)
                    cp.line_color = b9
                    if cp.line then
                        cp.line.Color = b9
                    end
                end}
        )
        local cA = aY:dependency_box()
        cA:setup_dependencies({{cz, true}})
        cA:dropdown(
            {
                name = "Part",
                flag = "tt_part",
                items = {
                    "HumanoidRootPart",
                    "Head",
                    "UpperTorso",
                    "LowerTorso",
                    "LeftUpperArm",
                    "LeftLowerArm",
                    "LeftHand",
                    "RightUpperArm",
                    "RightLowerArm",
                    "RightHand",
                    "LeftUpperLeg",
                    "LeftLowerLeg",
                    "LeftFoot",
                    "RightUpperLeg",
                    "RightLowerLeg",
                    "RightFoot"
                },
                default = "HumanoidRootPart",
                callback = function(bb)
                    cp.body_part = bb
                end
            }
        )
        cA:dropdown(
            {
                name = "Origin",
                flag = "tt_origin",
                items = {"mouse", "top", "bottom", "center"},
                default = "mouse",
                callback = function(bb)
                    cp.origin = bb
                end
            }
        )
        t:OnTargetUpdate(
            function(R)
                if not R then
                    if cp.line then
                        cp.line.Visible = false
                    end
                    if cp.outline then
                        cp.outline.Visible = false
                    end
                    if cp.beam_line then
                        cp.beam_line.Enabled = false
                    end
                    if cp.beam_outline then
                        cp.beam_outline.Enabled = false
                    end
                end
            end
        )
        table.insert(
            a.connections,
            {Disconnect = function()
                    cq()
                end}
        )
    end
    do
        local cB = game:GetService("RunService")
        local n = game:GetService("Players")
        local LocalPlayer = n.LocalPlayer
        local cu = workspace.CurrentCamera
        local ct = game:GetService("UserInputService")
        local function cC(v)
            return v and
                (v:FindFirstChild("HumanoidRootPart") or v:FindFirstChild("Head") or v:FindFirstChild("UpperTorso") or
                    v:FindFirstChild("Torso"))
        end
        local cD =
            cB.RenderStepped:Connect(
            function()
                if not g then
                    return
                end
                if not g["Targeting_Enabled"] then
                    return
                end
                if g["Targeting_Mode"] ~= "Nuker" then
                    return
                end
                local cE = ct:GetMouseLocation()
                local aU, aV
                aV = math.huge
                for A, N in ipairs(n:GetPlayers()) do
                    if N ~= LocalPlayer then
                        local v = N.Character
                        local E = cC(v)
                        if E then
                            local cF, cw = cu:WorldToViewportPoint(E.Position)
                            if cw then
                                local P = (cE - Vector2.new(cF.X, cF.Y)).Magnitude
                                if P < aV then
                                    aV = P
                                    aU = N
                                end
                            end
                        end
                    end
                end
                targeting_state.current = aU
                if aU then
                    if g and g["target_highlight"] then
                        local v = aU.Character
                        if v and ap.last_char ~= v then
                            aF(v)
                        end
                    end
                else
                    if ap and ap.hl then
                        ay()
                    end
                end
            end
        )
        table.insert(a.connections, cD)
    end
end
do
    local cG = k:column()
    local cH, cI, cJ = cG:multi_section({names = {"Aimbot", "Prediction", "Resolver"}})
    local cK, cL = cG:multi_section({names = {"Tweaks", "OnDamage"}})
    do
        local cB = game:GetService("RunService")
        local n = game:GetService("Players")
        local LocalPlayer = n.LocalPlayer
        local cM, cN = 0, 0.2
        local cO
        local function cP()
            if cO then
                cO:Disconnect()
                cO = nil
            end
        end
        local function cQ()
            if cO then
                return
            end
            cO =
                cB.RenderStepped:Connect(
                function()
                    if not (g and g["aimbot_enabled"]) then
                        return
                    end
                    local ak = targeting_state and targeting_state.current
                    if not (ak and ak.Character) then
                        return
                    end
                    local B = ak.Character:FindFirstChild("HumanoidRootPart")
                    if not B then
                        return
                    end
                    local cR = LocalPlayer.Character
                    if not cR then
                        return
                    end
                    local bE = cR:FindFirstChild("Head") or cR:FindFirstChild("HumanoidRootPart")
                    if not bE then
                        return
                    end
                    local aP = bE.Position
                    local cS = B.Position - aP
                    if cS.Magnitude <= 0 then
                        return
                    end
                    local cT = RaycastParams.new()
                    cT.FilterType = Enum.RaycastFilterType.Blacklist
                    cT.FilterDescendantsInstances = {cR, ak.Character}
                    local cU = workspace:Raycast(aP, cS, cT)
                    if cU then
                        return
                    end
                    local cV = B.AssemblyLinearVelocity or B.Velocity or Vector3.zero
                    if cV.Y <= 15 then
                        return
                    end
                    local _ = tick()
                    if _ - cM < cN then
                        return
                    end
                    cM = _
                    local cW = cR:FindFirstChildOfClass("Tool")
                    if cW then
                        pcall(
                            function()
                                cW:Activate()
                            end
                        )
                    end
                end
            )
            table.insert(a.connections, cO)
        end
        cK:toggle(
            {name = "AutoAir", flag = "autoair_enabled", default = false, callback = function(H)
                    if H then
                        cQ()
                    else
                        cP()
                    end
                end}
        )
    end
    do
        local cB = game:GetService("RunService")
        local n = game:GetService("Players")
        local cX = game:GetService("ReplicatedStorage")
        local LocalPlayer = n.LocalPlayer
        local cY, cN = 0, 1
        local cZ
        local function c_()
            if cZ then
                cZ:Disconnect()
                cZ = nil
            end
        end
        local function d0()
            if cZ then
                return
            end
            cZ =
                cB.Heartbeat:Connect(
                function()
                    local v = LocalPlayer and LocalPlayer.Character
                    if not v then
                        return
                    end
                    local cW = v:FindFirstChildOfClass("Tool")
                    if not cW then
                        return
                    end
                    local d1 = cW:FindFirstChild("Ammo")
                    if not d1 then
                        return
                    end
                    local bb = tonumber(d1.Value)
                    if not bb then
                        return
                    end
                    if bb > 0 then
                        return
                    end
                    local _ = tick()
                    if _ - cY < cN then
                        return
                    end
                    cY = _
                    pcall(
                        function()
                            cX.MainEvent:FireServer("Reload", cW)
                        end
                    )
                end
            )
            table.insert(a.connections, cZ)
        end
        cK:toggle(
            {name = "AutoReload", flag = "autoreload_enabled", default = false, callback = function(H)
                    if H then
                        d0()
                    else
                        c_()
                    end
                end}
        )
    end
    do
        local d2
        local function d3()
            if d2 then
                d2:Disconnect()
                d2 = nil
            end
        end
        local function d4()
            if d2 then
                return
            end
            d2 =
                s.run.RenderStepped:Connect(
                function()
                    local ak = targeting_state and targeting_state.current
                    if not (ak and t:ValidateClient(ak)) then
                        return
                    end
                    local d5 = i and i.Character
                    if not d5 then
                        return
                    end
                    local d6 = d5:FindFirstChild("HumanoidRootPart")
                    if not d6 then
                        return
                    end
                    local E = t:GetPreferredPart(ak.Character)
                    if not E then
                        return
                    end
                    local d7 = d6.Position
                    local aQ = E.Position - d7
                    aQ = s.v3.new(aQ.X, 0, aQ.Z)
                    local d8 = aQ.Magnitude
                    if d8 < 1e-6 then
                        return
                    end
                    local d9 = aQ.Unit
                    d6.CFrame = s.cf.new(d7, d7 + d9)
                end
            )
            table.insert(a.connections, d2)
        end
        cK:toggle(
            {name = "LookAtTarget", flag = "lookat_enabled", default = false, callback = function(H)
                    if H then
                        d4()
                    else
                        d3()
                    end
                end}
        )
    end
    do
        local da = game:GetService("UserInputService")
        local cX = game:GetService("ReplicatedStorage")
        local cB = game:GetService("RunService")
        local n = game:GetService("Players")
        local LocalPlayer = n.LocalPlayer
        local db, dc
        local cM, cN = 0, 0.15
        local dd, de = 0, 1
        local function df()
            local i = LocalPlayer
            if not i then
                return
            end
            local dg, dh = 0, 60
            local cD
            cD =
                cB.Heartbeat:Connect(
                function()
                    dg = dg + 1
                    if not (g and g["forcereload_enabled"] and g["forcereload_autoequip"]) then
                        if cD then
                            cD:Disconnect()
                        end
                        return
                    end
                    local v = i.Character
                    if not v then
                        if dg >= dh and cD then
                            cD:Disconnect()
                        end
                        return
                    end
                    local w = v:FindFirstChildOfClass("Humanoid")
                    local di = i:FindFirstChildOfClass("Backpack") or i:FindFirstChild("Backpack")
                    local function dj(dk)
                        if not dk then
                            return nil
                        end
                        local af = dk:FindFirstChild("[Revolver]")
                        if af and af:IsA("Tool") and af:FindFirstChild("Handle") then
                            return af
                        end
                        return nil
                    end
                    local dl = dj(v)
                    if dl then
                        if w then
                            pcall(
                                function()
                                    w:EquipTool(dl)
                                end
                            )
                        end
                        if cD then
                            cD:Disconnect()
                        end
                        return
                    end
                    local dm = dj(di)
                    if dm then
                        pcall(
                            function()
                                dm.Parent = v
                            end
                        )
                        if w then
                            pcall(
                                function()
                                    w:EquipTool(dm)
                                end
                            )
                        end
                        if cD then
                            cD:Disconnect()
                        end
                        return
                    end
                    if dg >= dh then
                        if cD then
                            cD:Disconnect()
                        end
                        return
                    end
                end
            )
            table.insert(a.connections, cD)
        end
        local function dn()
            if db then
                db:Disconnect()
                db = nil
            end
        end
        local function dp()
            if db then
                return
            end
            db =
                da.InputBegan:Connect(
                function(dq, dr)
                    if dr then
                        return
                    end
                    if dq.UserInputType ~= Enum.UserInputType.Keyboard then
                        return
                    end
                    if dq.KeyCode ~= Enum.KeyCode.R then
                        return
                    end
                    if da:GetFocusedTextBox() then
                        return
                    end
                    local _ = tick()
                    if _ - cM < cN then
                        return
                    end
                    cM = _
                    local ds = {"ChangeLoadout", "[Knife]", "Slot3"}
                    pcall(
                        function()
                            cX:WaitForChild("MainEvent"):FireServer(unpack(ds))
                        end
                    )
                end
            )
            table.insert(a.connections, db)
        end
        local function dt()
            if dc then
                dc:Disconnect()
                dc = nil
            end
        end
        local function du()
            if dc then
                return
            end
            dc =
                cB.Heartbeat:Connect(
                function()
                    if not (g and g["forcereload_enabled"]) then
                        return
                    end
                    local v = LocalPlayer and LocalPlayer.Character
                    if not v then
                        return
                    end
                    local cW = v:FindFirstChildOfClass("Tool")
                    if not cW then
                        return
                    end
                    local d1 = cW:FindFirstChild("Ammo")
                    if not d1 then
                        return
                    end
                    local bb = tonumber(d1.Value)
                    if not bb or bb > 0 then
                        return
                    end
                    local _ = tick()
                    if _ - dd < de then
                        return
                    end
                    dd = _
                    local ds = {"ChangeLoadout", "[Knife]", "Slot3"}
                    pcall(
                        function()
                            cX:WaitForChild("MainEvent"):FireServer(unpack(ds))
                        end
                    )
                    if g and g["forcereload_autoequip"] then
                        df()
                    end
                end
            )
            table.insert(a.connections, dc)
        end
        local function dv()
            if forcere_autoequip_conn then
                forcere_autoequip_conn:Disconnect()
                forcere_autoequip_conn = nil
            end
        end
        local function dw()
            if forcere_autoequip_conn then
                return
            end
            forcere_autoequip_conn =
                cB.Heartbeat:Connect(
                function()
                    if not (g and g["forcereload_enabled"] and g["forcereload_autoequip"]) then
                        return
                    end
                    local i = LocalPlayer
                    if not i then
                        return
                    end
                    local v = i.Character
                    if not v then
                        return
                    end
                    local w = v:FindFirstChildOfClass("Humanoid")
                    if not w then
                        return
                    end
                    local _ = os.clock()
                    if _ - (last_equip_try or 0) < 0.2 then
                        return
                    end
                    last_equip_try = _
                    local dx = v:FindFirstChild("[Revolver]")
                    if dx then
                        pcall(
                            function()
                                w:EquipTool(dx)
                            end
                        )
                    else
                        df()
                    end
                end
            )
            table.insert(a.connections, forcere_autoequip_conn)
        end
        local dy =
            cK:toggle(
            {name = "ForceReload", flag = "forcereload_enabled", default = false, callback = function(H)
                    if H then
                        dp()
                        if g and g["forcereload_auto"] then
                            du()
                        end
                        if g and g["forcereload_autoequip"] then
                            dw()
                        end
                    else
                        dn()
                        dt()
                        dv()
                        if g then
                            g["forcereload_auto"] = false
                            g["forcereload_autoequip"] = false
                        end
                    end
                end}
        )
        local dz = cK:dependency_box()
        dz:setup_dependencies({{dy, true}})
        local dA =
            dz:toggle(
            {name = "Auto", flag = "forcereload_auto", default = false, callback = function(H)
                    if H then
                        if g and g["forcereload_enabled"] then
                            du()
                        end
                    else
                        dt()
                    end
                end}
        )
        local dB = cK:dependency_box()
        dB:setup_dependencies({{dy, true}, {dA, true}})
        dB:toggle(
            {name = "AutoEquip", flag = "forcereload_autoequip", default = false, callback = function(H)
                    if g and g["forcereload_enabled"] and H then
                        dw()
                    else
                        dv()
                    end
                end}
        )
    end
    do
        local cB = s.run
        local n = s.ps
        local LocalPlayer = n.LocalPlayer
        local cX = game:GetService("ReplicatedStorage")
        local dC
        local dD = 0
        local dE = 0.00000000001
        local function dF(u)
            local v = u and u.Character
            local dG = v and v:FindFirstChild("BodyEffects")
            local dH = dG and dG:FindFirstChild("K.O")
            return dH and dH.Value and true or false
        end
        local function dI(u)
            local v = u and u.Character
            return v and v:FindFirstChildOfClass("ForceField") and true or false
        end
        local function dJ()
            local v = LocalPlayer and LocalPlayer.Character
            if not v then
                return nil
            end
            for A, dK in ipairs(v:GetChildren()) do
                if dK:IsA("Tool") then
                    return dK
                end
            end
            return nil
        end
        local function dL(u)
            if not (u and u.Character) then
                return
            end
            local _ = os.clock()
            if _ - (dD or 0) < dE then
                return
            end
            local cW = dJ()
            if not cW then
                return
            end
            local d1 = cW:FindFirstChild("Ammo")
            if d1 and d1.Value and d1.Value <= 0 then
                return
            end
            local b5 = cW:FindFirstChild("Handle")
            if not b5 then
                return
            end
            local bE = u.Character:FindFirstChild("Head")
            if not bE then
                return
            end
            local dM = bE.Position
            local dN = {dM, dM, dM, dM, dM}
            local dO = {
                Vector3.new(0, 1, 0),
                Vector3.new(0, 1, 0),
                Vector3.new(0, 1, 0),
                Vector3.new(0, 1, 0),
                Vector3.new(0, 1, 0)
            }
            local dP = {bE, bE, bE, bE, bE}
            local ds = {"ShootGun", b5, dM, dN, dP, dO, {}, os.clock(), math.huge, dN, 5, 0.2, dM}
            local dQ = cX:FindFirstChild("ShootEvent")
            if dQ then
                dD = _
                pcall(
                    function()
                        dQ:FireServer(unpack(ds))
                    end
                )
            end
        end
        local function dR()
            if dC then
                dC:Disconnect()
                dC = nil
            end
        end
        local function dS()
            if dC then
                return
            end
            dC =
                cB.Heartbeat:Connect(
                function()
                    if not (g and g["magicbullets_enabled"]) then
                        return
                    end
                    local ak = targeting_state and targeting_state.current
                    if not ak then
                        return
                    end
                    local cf = g and g["magicbullets_checks"]
                    local dT, dU = false, false
                    if typeof(cf) == "table" then
                        for A, aD in ipairs(cf) do
                            if aD == "KO" then
                                dT = true
                            end
                            if aD == "FF" then
                                dU = true
                            end
                        end
                    end
                    if dT and dF(ak) then
                        return
                    end
                    if dU and dI(ak) then
                        return
                    end
                    dL(ak)
                end
            )
            table.insert(a.connections, dC)
        end
        local dV =
            cK:toggle(
            {name = "MagicBullets", flag = "magicbullets_enabled", default = false, callback = function(H)
                    if H then
                        dS()
                    else
                        dR()
                    end
                end}
        )
        local dW = cK:dependency_box()
        dW:setup_dependencies({{dV, true}})
        dW:label({name = "Checks"})
        dW:dropdown(
            {
                name = "Checks",
                flag = "magicbullets_checks",
                items = {"KO", "FF"},
                default = {"KO", "FF"},
                multi = true,
                callback = function()
                end
            }
        )
    end
    do
        local function dX()
            local c2 = {}
            local aQ = (a and a.directory or "Rebuild.gg") .. "/sounds"
            local c4, c5 =
                pcall(
                function()
                    return listfiles and listfiles(aQ) or {}
                end
            )
            if c4 and type(c5) == "table" then
                for A, c0 in ipairs(c5) do
                    local a5 = c0:match("[^/\\]+$")
                    if a5 then
                        table.insert(c2, a5)
                    end
                end
            end
            table.sort(c2)
            return #c2 > 0 and c2 or {"ding.ogg", "bell.wav", "hit.mp3"}
        end
        function play_hitsound(dY)
            local dZ = game:GetService("SoundService")
            local d_ = dZ:FindFirstChild("RB_HitSound")
            if not d_ then
                d_ = Instance.new("Sound")
                d_.Name = "RB_HitSound"
                d_.Looped = false
                d_.Parent = dZ
            end
            local e0 = (a and a.directory or "Rebuild.gg") .. "/sounds/" .. tostring(dY or "")
            local e1
            if getcustomasset then
                e1 = getcustomasset(e0)
            elseif getsynasset then
                e1 = getsynasset(e0)
            end
            if e1 then
                d_.SoundId = e1
                d_.Volume = tonumber(g["hs_volume"]) or 0.5
                local e2 = tonumber(g["hs_pitch"]) or 1
                d_.PlaybackSpeed = e2
                pcall(
                    function()
                        d_:Play()
                    end
                )
            end
        end
        local e3 = cL:toggle({name = "Sounds", flag = "hitsound_enabled", default = false})
        local e4 = cL:dependency_box()
        e4:setup_dependencies({{e3, true}})
        local e5 = e4:dropdown({name = "Sound", flag = "hs_file", items = dX()})
        e4:slider({name = "Vol", flag = "hs_volume", min = 0, max = 10, default = 0.5, interval = 0.05})
        e4:slider({name = "Pitch", flag = "hs_pitch", min = 0.5, max = 2, default = 1, interval = 0.05})
        e4:toggle({name = "MuteOriginalSound", flag = "hs_mute_original", default = false})
        local e6 = {Sound = {}}
        e6.Sound.TargetIds =
            e6.Sound.TargetIds or
            {"rbxassetid://6773912589", "6773912589", "http://www.roblox.com/asset/?id=6773912589"}
        function e6.Sound.MuteTargetSound(d_)
            if not d_ or not d_:IsA("Sound") then
                return false
            end
            local e7 = tostring(d_.SoundId or ""):lower()
            for A, e8 in pairs(e6.Sound.TargetIds) do
                if e7:find(tostring(e8):lower(), 1, true) then
                    if g and g["hs_mute_original"] then
                        pcall(
                            function()
                                d_:Stop()
                                d_.Volume = 0
                                d_.Playing = false
                            end
                        )
                        if not e6.Sound._guarded then
                            e6.Sound._guarded = {}
                        end
                        if not e6.Sound._guarded[d_] then
                            e6.Sound._guarded[d_] =
                                d_:GetPropertyChangedSignal("Playing"):Connect(
                                function()
                                    if g and g["hs_mute_original"] and d_.Playing then
                                        pcall(
                                            function()
                                                d_:Stop()
                                                d_.Volume = 0
                                            end
                                        )
                                    end
                                end
                            )
                        end
                        return true
                    end
                end
            end
            return false
        end
        function e6.Sound.MuteExistingSounds()
            for A, aJ in ipairs(game:GetDescendants()) do
                if aJ:IsA("Sound") then
                    e6.Sound.MuteTargetSound(aJ)
                end
            end
        end
        task.defer(
            function()
                e6.Sound.MuteExistingSounds()
            end
        )
        if not e6.Sound._conn then
            e6.Sound._conn =
                game.DescendantAdded:Connect(
                function(aJ)
                    if aJ:IsA("Sound") then
                        e6.Sound.MuteTargetSound(aJ)
                    end
                end
            )
        end
    end
    do
        local e9 = cL:toggle({name = "Notifications", flag = "notif_enabled", default = false})
        local ea = cL:dependency_box()
        ea:setup_dependencies({{e9, true}})
        ea:slider({name = "Duration", flag = "notif_duration", min = 0.5, max = 3, default = 1.5, interval = 0.1})
    end
    t:OnHit(
        function(R)
            if g and g["hitsound_enabled"] then
                local dY = g["hs_file"]
                if dY and dY ~= "" then
                    play_hitsound(dY)
                end
            end
            if g and g["hitchams_enabled"] and R and R.player then
                HitChams(R.player)
            end
            local bq = g or a and a.flags or {}
            local an = bq["notif_enabled"] == true or bq["notif_enabled"] == 1 or bq["notif_enabled"] == "true"
            if not an then
                return
            end
            if R and R.player and R.player.Character then
                local v = R.player.Character
                local eb = v:FindFirstChildOfClass("Humanoid")
                if eb then
                    R.health = eb.Health
                    R.remaining_health = eb.Health
                end
            end
            local a5 = "Player"
            if R then
                if R.player then
                    if typeof(R.player) == "Instance" then
                        a5 = R.player.Name or "Player"
                    else
                        a5 = tostring(R.player)
                    end
                elseif R.name then
                    a5 = tostring(R.name)
                end
            end
            local a6 = 0
            if R and R.health then
                local ec = tonumber(R.health)
                a6 = ec and math.floor(ec) or 0
            end
            local ed = tostring(a5) .. " " .. tostring(a6)
            local ee = tonumber(bq and bq["notif_duration"] or g and g["notif_duration"]) or 1.5
            if ee <= 0 or ee > 10 or ee ~= ee then
                ee = 1.5
            end
            if a and a.notification then
                a:notification({text = ed, time = ee})
            end
        end
    )
    local HitChams
    do
        HitChams = function(ef)
            if not g["hitchams_enabled"] then
                return
            end
            if ef and ef.Character and ef.Character:FindFirstChild("HumanoidRootPart") then
                ef.Character.Archivable = true
                local eg = ef.Character:Clone()
                eg.Name = "Player Clone"
                local eh = {
                    "Head",
                    "UpperTorso",
                    "LowerTorso",
                    "LeftUpperArm",
                    "LeftLowerArm",
                    "LeftHand",
                    "RightUpperArm",
                    "RightLowerArm",
                    "RightHand",
                    "LeftUpperLeg",
                    "LeftLowerLeg",
                    "LeftFoot",
                    "RightUpperLeg",
                    "RightLowerLeg",
                    "RightFoot"
                }
                for A, ei in ipairs(eg:GetChildren()) do
                    if ei:IsA("BasePart") then
                        local ej = false
                        for A, ek in ipairs(eh) do
                            if ei.Name == ek then
                                ej = true
                                break
                            end
                        end
                        if not ej then
                            ei:Destroy()
                        end
                    elseif
                        ei:IsA("Accessory") or ei:IsA("Tool") or ei.Name == "face" or ei:IsA("Shirt") or ei:IsA("Pants") or
                            ei:IsA("Hat")
                     then
                        ei:Destroy()
                    end
                end
                if eg:FindFirstChild("Humanoid") then
                    eg.Humanoid:Destroy()
                end
                local el = a and a.flags or {}
                local em = el["hitchams_color"] or el["hitcham_color"] or nil
                local en = em and (em.Color or em) or nil
                for A, eo in ipairs(eg:GetChildren()) do
                    if eo:IsA("BasePart") then
                        eo.CanCollide = false
                        eo.Anchored = true
                        eo.Transparency = g["hitchams_transparency"] or 0.5
                        if en then
                            eo.Color = en
                        end
                        eo.Material = g["hitchams_material"] or Enum.Material.Neon
                    end
                end
                if eg:FindFirstChild("Head") then
                    local ep = eg.Head
                    ep.Transparency = g["hitchams_transparency"] or 0.5
                    if en then
                        ep.Color = en
                    end
                    ep.Material = g["hitchams_material"] or Enum.Material.Neon
                    if ep:FindFirstChild("face") then
                        ep.face:Destroy()
                    end
                end
                eg.Parent = game.Workspace
                local eq =
                    TweenInfo.new(
                    g["hitchams_duration"] or 2,
                    Enum.EasingStyle.Sine,
                    Enum.EasingDirection.InOut,
                    0,
                    true
                )
                for A, eo in ipairs(eg:GetChildren()) do
                    if eo:IsA("BasePart") then
                        local er = game:GetService("TweenService"):Create(eo, eq, {Transparency = 1})
                        er:Play()
                    end
                end
                task.delay(
                    g["hitchams_duration"] or 2,
                    function()
                        if eg and eg.Parent then
                            eg:Destroy()
                        end
                    end
                )
            end
        end
        local es = cL:toggle({name = "Chams", flag = "hitchams_enabled", default = false})
        es:colorpicker({name = "Color", flag = "hitchams_color", default = Color3.fromRGB(255, 0, 0)})
        local et = cL:dependency_box()
        et:setup_dependencies({{es, true}})
        et:dropdown(
            {
                name = "Material",
                flag = "hitchams_material",
                items = {"Neon", "ForceField", "Glass", "Plastic", "Metal", "Concrete"},
                default = "Neon"
            }
        )
        et:slider({name = "Duration", flag = "hitchams_duration", min = 0.5, max = 5, default = 2, interval = 0.1})
        et:slider({name = "Trs", flag = "hitchams_transparency", min = 0, max = 1, default = 0.5, interval = 0.05})
    end
    do
        local eu = {}
        local ev = nil
        local function ew()
            if not ev or not ev.Parent then
                ev = workspace:FindFirstChild("RebuildHitEffects") or Instance.new("Folder")
                ev.Name = "RebuildHitEffects"
                ev.Parent = workspace
            end
            return ev
        end
        local function ex()
            local ey = Instance.new("Attachment")
            local ez = Instance.new("ParticleEmitter")
            ez.Name = "Foam"
            ez.LightInfluence = 0.5
            ez.Lifetime = NumberRange.new(1, 1)
            ez.SpreadAngle = Vector2.new(360, -360)
            ez.VelocitySpread = 360
            ez.Speed = NumberRange.new(20, 20)
            ez.Brightness = 2.5
            ez.Size =
                NumberSequence.new(
                {
                    NumberSequenceKeypoint.new(0, 0),
                    NumberSequenceKeypoint.new(0.1, 0.65),
                    NumberSequenceKeypoint.new(0.65, 1.42),
                    NumberSequenceKeypoint.new(1, 0)
                }
            )
            ez.Enabled = false
            ez.Acceleration = Vector3.new(0, -66, 0)
            ez.Rate = 100
            ez.Texture = "rbxassetid://8297030850"
            ez.Rotation = NumberRange.new(-90, -90)
            ez.Orientation = Enum.ParticleOrientation.VelocityParallel
            ez.Color = ColorSequence.new(Color3.fromRGB(255, 255, 255))
            ez.Parent = ey
            eu["Cum"] = ey
            local eA = Instance.new("Attachment")
            local eB = Instance.new("ParticleEmitter")
            eB.Name = "Dots 1"
            eB.LightEmission = 1
            eB.Color = ColorSequence.new(Color3.fromRGB(255, 255, 255))
            eB.LockedToPart = false
            eB.ZOffset = 10
            eB.Texture = "rbxassetid://7216849075"
            eB.VelocitySpread = 360
            eB.Transparency =
                NumberSequence.new({NumberSequenceKeypoint.new(0, 0), NumberSequenceKeypoint.new(1, 0.663)})
            eB.Lifetime = NumberRange.new(1, 5)
            eB.Speed = NumberRange.new(1, 210)
            eB.SpreadAngle = Vector2.new(360, -360)
            eB.Rate = 60
            eB.Size =
                NumberSequence.new(
                {
                    NumberSequenceKeypoint.new(0, 0.1),
                    NumberSequenceKeypoint.new(0.428, 0),
                    NumberSequenceKeypoint.new(1, 0.627)
                }
            )
            eB.Enabled = false
            eB.Parent = eA
            local eC = Instance.new("ParticleEmitter")
            eC.Name = "Dots 2"
            eC.LightEmission = 1
            eC.Color = ColorSequence.new(Color3.fromRGB(255, 255, 255))
            eC.LockedToPart = false
            eC.ZOffset = 10
            eC.Texture = "rbxassetid://7216849075"
            eC.VelocitySpread = 360
            eC.Transparency =
                NumberSequence.new({NumberSequenceKeypoint.new(0, 0), NumberSequenceKeypoint.new(1, 0.663)})
            eC.Lifetime = NumberRange.new(1, 5)
            eC.Speed = NumberRange.new(1, 210)
            eC.SpreadAngle = Vector2.new(360, -360)
            eC.Rate = 100
            eC.Size =
                NumberSequence.new(
                {
                    NumberSequenceKeypoint.new(0, 0.1),
                    NumberSequenceKeypoint.new(0.502, 1.438),
                    NumberSequenceKeypoint.new(0.925, 1.125),
                    NumberSequenceKeypoint.new(1, 0.397)
                }
            )
            eC.Enabled = false
            eC.Orientation = Enum.ParticleOrientation.FacingCamera
            eC.Parent = eA
            eu["Particle"] = eA
            local eD = Instance.new("Attachment")
            local eE = Instance.new("ParticleEmitter")
            eE.Name = "Break2"
            eE.RotSpeed = NumberRange.new(1000)
            eE.VelocitySpread = -360
            eE.Color = ColorSequence.new(Color3.fromRGB(255, 255, 255))
            eE.Rate = 1
            eE.Texture = "rbxassetid://11973936966"
            eE.Rotation = NumberRange.new(-360, 360)
            eE.Transparency =
                NumberSequence.new(
                {
                    NumberSequenceKeypoint.new(0, 1, 0),
                    NumberSequenceKeypoint.new(0.10972569137811661, 0.27699530124664307, 0),
                    NumberSequenceKeypoint.new(0.5, 0, 0),
                    NumberSequenceKeypoint.new(1, 1, 0)
                }
            )
            eE.Lifetime = NumberRange.new(0.5)
            eE.Speed = NumberRange.new(0.01)
            eE.LightEmission = 0.5
            eE.SpreadAngle = Vector2.new(-360, 360)
            eE.Size = NumberSequence.new({NumberSequenceKeypoint.new(0, 6, 0), NumberSequenceKeypoint.new(1, 6, 0)})
            eE.Enabled = false
            eE.Parent = eD
            local eF = Instance.new("ParticleEmitter")
            eF.Name = "Break3"
            eF.RotSpeed = NumberRange.new(-150, 150)
            eF.Color = ColorSequence.new(Color3.fromRGB(255, 255, 255))
            eF.ZOffset = 4
            eF.Rotation = NumberRange.new(-360, 360)
            eF.Texture = "rbxassetid://5726444189"
            eF.Lifetime = NumberRange.new(0.5)
            eF.Speed = NumberRange.new(0.01)
            eF.LightEmission = 1
            eF.Rate = 1
            eF.Size = NumberSequence.new({NumberSequenceKeypoint.new(0, 7, 0), NumberSequenceKeypoint.new(1, 7, 0)})
            eF.Enabled = false
            eF.Parent = eD
            local eG = Instance.new("ParticleEmitter")
            eG.Name = "Break1"
            eG.VelocitySpread = -360
            eG.Texture = "rbxassetid://12239789629"
            eG.Color = ColorSequence.new(Color3.fromRGB(255, 255, 255))
            eG.LockedToPart = true
            eG.ZOffset = 3
            eG.LightEmission = 0.5
            eG.Rotation = NumberRange.new(-360, 360)
            eG.Transparency =
                NumberSequence.new(
                {
                    NumberSequenceKeypoint.new(0, 1, 0),
                    NumberSequenceKeypoint.new(0.5, 0, 0),
                    NumberSequenceKeypoint.new(1, 1, 0)
                }
            )
            eG.Lifetime = NumberRange.new(0.5)
            eG.Speed = NumberRange.new(0.01)
            eG.SpreadAngle = Vector2.new(-360, 360)
            eG.Rate = 1
            eG.Size = NumberSequence.new({NumberSequenceKeypoint.new(0, 10, 0), NumberSequenceKeypoint.new(1, 10, 0)})
            eG.Enabled = false
            eG.Parent = eD
            eu["Break"] = eD
        end
        local function eH(aD)
            if typeof(aD) == "Color3" then
                return aD
            end
            if typeof(aD) == "table" then
                local eI = aD.Color or aD.color or aD.Value or aD.value
                if eI and typeof(eI) == "Color3" then
                    return eI
                end
                local eJ, eK, bf = aD.r or aD.R or aD[1], aD.g or aD.G or aD[2], aD.b or aD.B or aD[3]
                if eJ and eK and bf then
                    if eJ <= 1 and eK <= 1 and bf <= 1 then
                        return Color3.new(eJ, eK, bf)
                    else
                        return Color3.fromRGB(eJ, eK, bf)
                    end
                end
            end
            if typeof(aD) == "string" then
                local c = aD:match("#?([%da-fA-F]+)")
                if c and #c == 6 then
                    local eJ = tonumber(c:sub(1, 2), 16)
                    local eK = tonumber(c:sub(3, 4), 16)
                    local bf = tonumber(c:sub(5, 6), 16)
                    if eJ and eK and bf then
                        return Color3.fromRGB(eJ, eK, bf)
                    end
                end
            end
            return Color3.fromRGB(255, 0, 0)
        end
        function HitEffect(ak, eL)
            if not ak or not ak.Character then
                return
            end
            local B = ak.Character:FindFirstChild("HumanoidRootPart")
            if not B then
                return
            end
            if not next(eu) then
                ex()
            end
            local eM = eu[eL]
            if not eM then
                return
            end
            local eN = eM:Clone()
            local el = a and a.flags or {}
            local b9 = eH(el["hiteffects_color"] or el["hiteffect_color"] or Color3.fromRGB(255, 255, 255))
            for A, aJ in pairs(eN:GetDescendants()) do
                if aJ:IsA("ParticleEmitter") then
                    aJ.Color = ColorSequence.new(b9)
                elseif aJ:IsA("Trail") then
                    aJ.Color = ColorSequence.new(b9)
                elseif aJ:IsA("Beam") then
                    aJ.Color = ColorSequence.new(b9)
                end
            end
            eN.Parent = B
            for A, aJ in pairs(eN:GetDescendants()) do
                if aJ:IsA("ParticleEmitter") then
                    aJ:Emit(aJ.Rate or 100)
                end
            end
            task.delay(
                2,
                function()
                    if eN and eN.Parent then
                        eN:Destroy()
                    end
                end
            )
        end
        _G.HitEffect = HitEffect
        local eO = cL:toggle({name = "Effects", flag = "hiteffect_enabled", default = false})
        eO:colorpicker({name = "Color", flag = "hiteffects_color", default = Color3.fromRGB(255, 255, 255)})
        local eP = cL:dependency_box()
        eP:setup_dependencies({{eO, true}})
        eP:dropdown({name = "Type", flag = "hiteffect_type", items = {"Cum", "Particle", "Break"}, default = "Cum"})
    end
    do
        local eQ = nil
        local eR = nil
        local eS = 0
        local eT = 0.1
        local eU = 0.5
        local function eV()
            local ak = targeting_state and targeting_state.current
            if not ak or not ak.Character then
                eQ = nil
                eR = nil
                return
            end
            local eb = ak.Character:FindFirstChildOfClass("Humanoid")
            if not eb then
                eQ = nil
                return
            end
            if eR ~= ak then
                eQ = eb.Health
                eR = ak
                eS = 0
                return
            end
            local eW = eb.Health
            local eX = tick()
            if eQ and eW < eQ then
                local eY = eQ - eW
                if eY >= eU and eX - eS >= eT then
                    eS = eX
                    if g and g["hitchams_enabled"] then
                        HitChams(ak)
                    end
                    if g and g["hiteffect_enabled"] then
                        local eL = g["hiteffect_type"] or "Cum"
                        if _G.HitEffect then
                            _G.HitEffect(ak, eL)
                        end
                    end
                    if g and g["hitsound_enabled"] then
                        local dY = g["hs_file"]
                        if dY and dY ~= "" then
                            play_hitsound(dY)
                        end
                    end
                    local an = g and g["notif_enabled"]
                    if an then
                        local a5 = ak.Name or "Player"
                        local a6 = math.floor(math.max(eW, 0))
                        local ed = tostring(a5) .. " " .. tostring(a6)
                        local ee = tonumber(g["notif_duration"]) or 1.5
                        if ee <= 0 or ee > 10 or ee ~= ee then
                            ee = 1.5
                        end
                        if a and a.notification then
                            a:notification({text = ed, time = ee})
                        end
                    end
                end
            end
            eQ = eW
        end
        s.run.Stepped:Connect(
            function()
                eV()
            end
        )
    end
    local eZ = cH:toggle({name = "Enabled", flag = "aimbot_enabled", default = false})
    local e_ = cH:dependency_box()
    e_:setup_dependencies({{eZ, true}})
    e_:dropdown(
        {
            name = "Part",
            flag = "aimbot_part",
            items = {
                "HumanoidRootPart",
                "Head",
                "UpperTorso",
                "LowerTorso",
                "LeftUpperArm",
                "LeftLowerArm",
                "LeftHand",
                "RightUpperArm",
                "RightLowerArm",
                "RightHand",
                "LeftUpperLeg",
                "LeftLowerLeg",
                "LeftFoot",
                "RightUpperLeg",
                "RightLowerLeg",
                "RightFoot"
            },
            default = "HumanoidRootPart"
        }
    )
    local f0 = cI:toggle({name = "Enabled", flag = "pred_enabled", default = false})
    local f1 = cI:dependency_box()
    f1:setup_dependencies({{f0, true}})
    local f2 = f1:dropdown({name = "Prediction Mode", flag = "pred_mode", items = {"Sets", "Auto"}, default = "Auto"})
    local f3 = cI:dependency_box()
    f3:setup_dependencies({{f0, true}, {f2, "Sets"}})
    f3:label({name = "PredictionX"})
    f3:textbox({flag = "pred_x", default = "0"})
    f3:label({name = "PredictionY"})
    f3:textbox({flag = "pred_y", default = "0"})
    f3:label({name = "PredictionZ"})
    f3:textbox({flag = "pred_z", default = "0"})
    cI:toggle({name = "ShowPrediction", flag = "show_prediction", default = false}):colorpicker(
        {name = "Color", flag = "prediction_color", default = c("#ffffff")}
    )
    local f4 = cJ:toggle({name = "Enabled", flag = "resolver_enabled", default = false})
    local f5 = cJ:dependency_box()
    f5:setup_dependencies({{f4, true}})
    f5:dropdown(
        {
            name = "Resolver Mode",
            flag = "resolver_mode",
            items = {"Velocity", "Recalculate", "MoveDirection", "LookVector", "CalculateCFrame"},
            default = "Velocity"
        }
    )
end
do
    local f6 = {"HumanoidRootPart", "Head", "UpperTorso", "Torso"}
    local f7 = {
        {20, 0.08960952},
        {21, 0.091171428},
        {22, 0.092733336},
        {23, 0.094295244},
        {24, 0.095857152},
        {25, 0.09741906},
        {26, 0.098980968},
        {27, 0.100542876},
        {28, 0.102104784},
        {29, 0.103666692},
        {30, 0.11252476},
        {31, 0.112978758},
        {32, 0.113432756},
        {33, 0.113886754},
        {34, 0.114340752},
        {35, 0.11479475},
        {36, 0.115248748},
        {37, 0.115702746},
        {38, 0.116156744},
        {39, 0.116610742},
        {40, 0.11706474},
        {41, 0.117518738},
        {42, 0.117972736},
        {43, 0.118426734},
        {44, 0.118880732},
        {45, 0.11933473},
        {46, 0.119788728},
        {47, 0.120242726},
        {48, 0.120696724},
        {49, 0.121150722},
        {50, 0.13544},
        {51, 0.1348236},
        {52, 0.1342072},
        {53, 0.1335908},
        {54, 0.1329744},
        {55, 0.132358},
        {56, 0.1317416},
        {57, 0.1311252},
        {58, 0.1305088},
        {59, 0.1298924},
        {60, 0.129276},
        {61, 0.1286596},
        {62, 0.1280432},
        {63, 0.1274268},
        {64, 0.1268104},
        {65, 0.1264236},
        {66, 0.1262627},
        {67, 0.1261018},
        {68, 0.1259409},
        {69, 0.12578},
        {70, 0.12533},
        {71, 0.125474},
        {72, 0.125618},
        {73, 0.125762},
        {74, 0.125906},
        {75, 0.12605},
        {76, 0.126194},
        {77, 0.126338},
        {78, 0.126482},
        {79, 0.126626},
        {80, 0.13934},
        {81, 0.1395937},
        {82, 0.1398474},
        {83, 0.1401011},
        {84, 0.1403548},
        {85, 0.1406085},
        {86, 0.1408622},
        {87, 0.1411159},
        {88, 0.1413696},
        {89, 0.1416233},
        {90, 0.141877},
        {91, 0.1421307},
        {92, 0.1423844},
        {93, 0.1426381},
        {94, 0.1428918},
        {95, 0.1431455},
        {96, 0.1433992},
        {97, 0.1436529},
        {98, 0.1439066},
        {99, 0.1441603},
        {100, 0.141987},
        {101, 0.1423107},
        {102, 0.1426344},
        {103, 0.1429581},
        {104, 0.1432818},
        {105, 0.1436055},
        {106, 0.1439292},
        {107, 0.1442529},
        {108, 0.1445766},
        {109, 0.1449003},
        {110, 0.144634},
        {111, 0.1449577},
        {112, 0.1452814},
        {113, 0.1456051},
        {114, 0.1459288},
        {115, 0.1462525},
        {116, 0.1465762},
        {117, 0.1468999},
        {118, 0.1472236},
        {119, 0.1475473},
        {120, 0.147281},
        {121, 0.1476047},
        {122, 0.1479284},
        {123, 0.1482521},
        {124, 0.1485758},
        {125, 0.1488995},
        {126, 0.1492232},
        {127, 0.1495469},
        {128, 0.1498706},
        {129, 0.1501943},
        {130, 0.149928},
        {131, 0.1502517},
        {132, 0.1505754},
        {133, 0.1508991},
        {134, 0.1512228},
        {135, 0.1515465},
        {136, 0.1518702},
        {137, 0.1521939},
        {138, 0.1525176},
        {139, 0.1528413},
        {140, 0.152575},
        {141, 0.1528987},
        {142, 0.1532224},
        {143, 0.1535461},
        {144, 0.1538698},
        {145, 0.1541935},
        {146, 0.1545172},
        {147, 0.1548409},
        {148, 0.1551646},
        {149, 0.1554883},
        {150, 0.155222},
        {151, 0.1555457},
        {152, 0.1558694},
        {153, 0.1561931},
        {154, 0.1565168},
        {155, 0.1568405},
        {156, 0.1571642},
        {157, 0.1574879},
        {158, 0.1578116},
        {159, 0.1581353},
        {160, 0.157869},
        {161, 0.1581927},
        {162, 0.1585164},
        {163, 0.1588401},
        {164, 0.1591638},
        {165, 0.1594875},
        {166, 0.1598112},
        {167, 0.1601349},
        {168, 0.1604586},
        {169, 0.1607823},
        {170, 0.160516},
        {171, 0.1608397},
        {172, 0.1611634},
        {173, 0.1614871},
        {174, 0.1618108},
        {175, 0.1621345},
        {176, 0.1624582},
        {177, 0.1627819},
        {178, 0.1631056},
        {179, 0.1634293},
        {180, 0.163163},
        {181, 0.1634867},
        {182, 0.1638104},
        {183, 0.1641341},
        {184, 0.1644578},
        {185, 0.1647815},
        {186, 0.1651052},
        {187, 0.1654289},
        {188, 0.1657526},
        {189, 0.1660763},
        {190, 0.16581},
        {191, 0.1661337},
        {192, 0.1664574},
        {193, 0.1667811},
        {194, 0.1671048},
        {195, 0.1674285},
        {196, 0.1677522},
        {197, 0.1680759},
        {198, 0.1683996},
        {199, 0.1687233},
        {200, 0.168457},
        {201, 0.1687807},
        {202, 0.1691044},
        {203, 0.1694281},
        {204, 0.1697518},
        {205, 0.1700755},
        {206, 0.1703992},
        {207, 0.1707229},
        {208, 0.1710466},
        {209, 0.1713703},
        {210, 0.171104},
        {211, 0.1714277},
        {212, 0.1717514},
        {213, 0.1720751},
        {214, 0.1723988},
        {215, 0.1727225},
        {216, 0.1730462},
        {217, 0.1733699},
        {218, 0.1736936},
        {219, 0.1740173},
        {220, 0.173751},
        {221, 0.1740747},
        {222, 0.1743984},
        {223, 0.1747221},
        {224, 0.1750458},
        {225, 0.1753695},
        {226, 0.1756932},
        {227, 0.1760169},
        {228, 0.1763406},
        {229, 0.1766643},
        {230, 0.176398},
        {231, 0.1767217},
        {232, 0.1770454},
        {233, 0.1773691},
        {234, 0.1776928},
        {235, 0.1780165},
        {236, 0.1783402},
        {237, 0.1786639},
        {238, 0.1789876},
        {239, 0.1793113},
        {240, 0.179045},
        {241, 0.1793687},
        {242, 0.1796924},
        {243, 0.1800161},
        {244, 0.1803398},
        {245, 0.1806635},
        {246, 0.1809872},
        {247, 0.1813109},
        {248, 0.1816346},
        {249, 0.1819583},
        {250, 0.181692},
        {251, 0.1820157},
        {252, 0.1823394},
        {253, 0.1826631},
        {254, 0.1829868},
        {255, 0.1833105},
        {256, 0.1836342},
        {257, 0.1839579},
        {258, 0.1842816},
        {259, 0.1846053},
        {260, 0.184339},
        {261, 0.1846627},
        {262, 0.1849864},
        {263, 0.1853101},
        {264, 0.1856338},
        {265, 0.1859575},
        {266, 0.1862812},
        {267, 0.1866049},
        {268, 0.1869286},
        {269, 0.1872523},
        {270, 0.186986},
        {271, 0.1873097},
        {272, 0.1876334},
        {273, 0.1879571},
        {274, 0.1882808},
        {275, 0.1886045},
        {276, 0.1889282},
        {277, 0.1892519},
        {278, 0.1895756},
        {279, 0.1898993},
        {280, 0.189633},
        {281, 0.1899567},
        {282, 0.1902804},
        {283, 0.1906041},
        {284, 0.1909278},
        {285, 0.1912515},
        {286, 0.1915752},
        {287, 0.1918989},
        {288, 0.1922226},
        {289, 0.1925463},
        {290, 0.19228},
        {291, 0.1926037},
        {292, 0.1929274},
        {293, 0.1932511},
        {294, 0.1935748},
        {295, 0.1938985},
        {296, 0.1942222},
        {297, 0.1945459},
        {298, 0.1948696},
        {299, 0.1951933},
        {300, 0.194927}
    }
    local function f8()
        local f9 = game:GetService("Stats")
        local fa
        local c4, A =
            pcall(
            function()
                local fb = f9.Network.ServerStatsItem["Data Ping"]:GetValueString()
                fa = tonumber((fb or ""):match("%d+"))
            end
        )
        if not c4 or not fa then
            return 0
        end
        local fc, fd
        for A, bv in ipairs(f7) do
            local fe = math.abs(fa - bv[1])
            if not fd or fe < fd then
                fd = fe
                fc = bv[2]
            end
        end
        return fc or 0
    end
    local function ce(u)
        if not u or not u.Character then
            return nil
        end
        local v = u.Character
        local cf = g and g["aimbot_part"]
        if cf and v:FindFirstChild(cf) then
            return v[cf]
        end
        for A, a5 in ipairs(f6) do
            local x = v:FindFirstChild(a5)
            if x then
                return x
            end
        end
        return nil
    end
    local ff = {lastPos = nil, lastTick = nil, lastPart = nil}
    local function fg(E)
        if not E then
            return nil
        end
        local F = E.Position
        if g["pred_enabled"] then
            local cV
            local fh = g["resolver_enabled"]
            local fi = g["resolver_mode"]
            if fh and fi and fi ~= "Velocity" then
                if fi == "Recalculate" or fi == "CalculateCFrame" then
                    if ff.lastPart ~= E then
                        ff.lastPos, ff.lastTick, ff.lastPart = E.Position, tick(), E
                    end
                    local _ = tick()
                    local ck = ff.lastTick and _ - ff.lastTick or 0
                    if ck > 0 and ff.lastPos then
                        cV = (E.Position - ff.lastPos) / ck
                    else
                        cV = E.AssemblyLinearVelocity or E.Velocity or Vector3.zero
                    end
                    ff.lastPos, ff.lastTick = E.Position, _
                elseif fi == "MoveDirection" then
                    local eb = E.Parent and E.Parent:FindFirstChildOfClass("Humanoid")
                    if eb then
                        cV = eb.MoveDirection * (eb.WalkSpeed or 16)
                    end
                elseif fi == "LookVector" then
                    local eb = E.Parent and E.Parent:FindFirstChildOfClass("Humanoid")
                    local bm = eb and eb.WalkSpeed or 16
                    cV = E.CFrame.LookVector * bm * 1.5
                end
            end
            cV = cV or E.AssemblyLinearVelocity or E.Velocity or Vector3.zero
            local fj = g["pred_mode"]
            if fj == "Auto" then
                local fb = f8()
                F = F + cV * Vector3.new(fb, fb, fb)
            else
                local fk = tonumber(g["pred_x"]) or 0
                local fl = tonumber(g["pred_y"]) or 0
                local fm = tonumber(g["pred_z"]) or 0
                F = F + cV * Vector3.new(fk, fl, fm)
            end
        end
        return F
    end
    local fn = getrawmetatable(game)
    local ah = fn.__index
    setreadonly(fn, false)
    fn.__index =
        newcclosure(
        function(self, ai)
            if
                not checkcaller() and ai and (ai == "Hit" or ai == "Silent" or ai == "Target") and g and
                    g["aimbot_enabled"]
             then
                local u = targeting_state.current
                local E = ce(u)
                if E then
                    local fo = fg(E) or E.Position
                    if ai == "Hit" then
                        return CFrame.new(fo)
                    elseif ai == "Silent" or ai == "Target" then
                        return E
                    end
                end
            end
            return ah(self, ai)
        end
    )
    setreadonly(fn, true)
end
do
    local Drawing = Drawing
    local da = game:GetService("UserInputService")
    local cB = game:GetService("RunService")
    local cu = workspace.CurrentCamera
    do
        local fp = getgenv().PredictionTracer
        if fp and fp.cleanup then
            pcall(fp.cleanup)
        end
    end
    local fq = {}
    getgenv().PredictionTracer = fq
    local fr = Drawing.new("Line")
    fr.Visible = false
    fr.Thickness = 6
    fr.Transparency = 0.7
    fr.Color = Color3.fromRGB(0, 0, 0)
    fq.tracerOutline = fr
    local fs = Drawing.new("Line")
    fs.Visible = false
    fs.Thickness = 1.5
    fs.Transparency = 1
    fq.tracer = fs
    local ft = 4
    local fu = Drawing.new("Circle")
    fu.Visible = false
    fu.Filled = false
    fu.Color = Color3.fromRGB(0, 0, 0)
    fu.Transparency = 0.8
    fu.Radius = 4
    fq.startOutline = fu
    local fv = Drawing.new("Circle")
    fv.Visible = false
    fv.Filled = true
    fv.Color = Color3.fromRGB(255, 255, 255)
    fv.Transparency = 1
    fv.Radius = 2
    fq.startCircle = fv
    local fw = Drawing.new("Circle")
    fw.Visible = false
    fw.Filled = false
    fw.Color = Color3.fromRGB(0, 0, 0)
    fw.Transparency = 0.8
    fw.Radius = 4
    fq.endOutline = fw
    local fx = Drawing.new("Circle")
    fx.Visible = false
    fx.Filled = true
    fx.Color = Color3.fromRGB(255, 255, 255)
    fx.Transparency = 1
    fx.Radius = 2
    fq.endCircle = fx
    local f6 = {"HumanoidRootPart", "Head", "UpperTorso", "Torso"}
    local f7 = {
        {20, 0.08960952},
        {30, 0.11252476},
        {50, 0.13544},
        {65, 0.1264236},
        {70, 0.12533},
        {80, 0.13934},
        {100, 0.141987},
        {110, 0.144634},
        {120, 0.147281},
        {130, 0.149928},
        {140, 0.152575},
        {150, 0.155222},
        {160, 0.157869},
        {170, 0.160516},
        {180, 0.163163},
        {190, 0.16581},
        {200, 0.168457},
        {210, 0.171104},
        {220, 0.173751},
        {230, 0.176398},
        {240, 0.179045},
        {250, 0.181692},
        {260, 0.184339},
        {270, 0.186986},
        {280, 0.189633},
        {290, 0.19228},
        {300, 0.194927}
    }
    local fy = {t = 0, val = 0}
    local function f8()
        local _ = tick and tick() or os.clock()
        if _ - (fy.t or 0) < 0.25 then
            return fy.val or 0
        end
        local f9 = game:GetService("Stats")
        local fa
        local c4, A =
            pcall(
            function()
                local fb = f9.Network.ServerStatsItem["Data Ping"]:GetValueString()
                fa = tonumber((fb or ""):match("%d+"))
            end
        )
        if not c4 or not fa then
            return fy.val or 0
        end
        local fc, fd
        for A, bv in ipairs(f7) do
            local fe = math.abs(fa - bv[1])
            if not fd or fe < fd then
                fd = fe
                fc = bv[2]
            end
        end
        fy.t = _
        fy.val = fc or fy.val or 0
        return fy.val or 0
    end
    local function ce(u)
        if not u or not u.Character then
            return nil
        end
        local v = u.Character
        local cf = g and g["aimbot_part"]
        if cf and v:FindFirstChild(cf) then
            return v[cf]
        end
        for A, a5 in ipairs(f6) do
            local x = v:FindFirstChild(a5)
            if x then
                return x
            end
        end
        return nil
    end
    local function fg(E)
        if not E then
            return nil
        end
        local F = E.Position
        if g["pred_enabled"] then
            local cV = E.AssemblyLinearVelocity or E.Velocity or Vector3.zero
            local fj = g["pred_mode"]
            if fj == "Auto" then
                local fb = f8()
                F = F + cV * Vector3.new(fb, fb, fb)
            else
                local fk = tonumber(g["pred_x"]) or 0
                local fl = tonumber(g["pred_y"]) or 0
                local fm = tonumber(g["pred_z"]) or 0
                F = F + cV * Vector3.new(fk, fl, fm)
            end
        end
        return F
    end
    local cD =
        cB.RenderStepped:Connect(
        function()
            if g["show_prediction"] and targeting_state.current then
                local E = ce(targeting_state.current)
                if E then
                    local fo = fg(E)
                    if fo then
                        local cv, cw = cu:WorldToViewportPoint(fo)
                        if cw then
                            local fz = da:GetMouseLocation()
                            fr.From = fz
                            fr.To = Vector2.new(cv.X, cv.Y)
                            fr.Thickness = math.max(1, (fs.Thickness or 2) + 2)
                            if not fr.Visible then
                                fr.Visible = true
                            end
                            fs.From = fz
                            fs.To = Vector2.new(cv.X, cv.Y)
                            local fA =
                                g["prediction_color"] and g["prediction_color"].Color or Color3.fromRGB(255, 255, 255)
                            if fs.Color ~= fA then
                                fs.Color = fA
                            end
                            if not fs.Visible then
                                fs.Visible = true
                            end
                            local fB = fs.Color
                            local fC = Vector2.new(cv.X, cv.Y)
                            fv.Position = fz
                            fv.Radius = math.max(1, ft * 0.25)
                            if fv.Color ~= fB then
                                fv.Color = fB
                            end
                            if not fv.Visible then
                                fv.Visible = true
                            end
                            fx.Position = fC
                            fx.Radius = math.max(1, ft * 0.5)
                            if fx.Color ~= fB then
                                fx.Color = fB
                            end
                            if not fx.Visible then
                                fx.Visible = true
                            end
                            local fD = math.max(1, (fs.Thickness or 2) + 2)
                            fu.Position = fz
                            fu.Thickness = fD
                            fu.Radius = fv.Radius + fD / 2
                            if not fu.Visible then
                                fu.Visible = true
                            end
                            fw.Position = fC
                            fw.Thickness = fD
                            fw.Radius = fx.Radius + fD / 2
                            if not fw.Visible then
                                fw.Visible = true
                            end
                        else
                            if fs.Visible then
                                fs.Visible = false
                            end
                            if fr.Visible then
                                fr.Visible = false
                            end
                            if fv.Visible then
                                fv.Visible = false
                            end
                            if fx.Visible then
                                fx.Visible = false
                            end
                            if fu.Visible then
                                fu.Visible = false
                            end
                            if fw.Visible then
                                fw.Visible = false
                            end
                        end
                    else
                        if fs.Visible then
                            fs.Visible = false
                        end
                        if fr.Visible then
                            fr.Visible = false
                        end
                        if fv.Visible then
                            fv.Visible = false
                        end
                        if fx.Visible then
                            fx.Visible = false
                        end
                        if fu.Visible then
                            fu.Visible = false
                        end
                        if fw.Visible then
                            fw.Visible = false
                        end
                    end
                else
                    if fs.Visible then
                        fs.Visible = false
                    end
                    if fr.Visible then
                        fr.Visible = false
                    end
                    if fv.Visible then
                        fv.Visible = false
                    end
                    if fx.Visible then
                        fx.Visible = false
                    end
                    if fu.Visible then
                        fu.Visible = false
                    end
                    if fw.Visible then
                        fw.Visible = false
                    end
                end
            else
                if fs.Visible then
                    fs.Visible = false
                end
                if fr.Visible then
                    fr.Visible = false
                end
                if fv.Visible then
                    fv.Visible = false
                end
                if fx.Visible then
                    fx.Visible = false
                end
                if fu.Visible then
                    fu.Visible = false
                end
                if fw.Visible then
                    fw.Visible = false
                end
            end
        end
    )
    table.insert(a.connections, cD)
    fq.conn = cD
    fq.cleanup = function()
        pcall(
            function()
                if fq.conn then
                    fq.conn:Disconnect()
                end
            end
        )
        local function fE(aJ)
            if aJ and aJ.Remove then
                pcall(
                    function()
                        aJ:Remove()
                    end
                )
            end
        end
        fE(fq.tracer)
        fE(fq.tracerOutline)
        fE(fq.startCircle)
        fE(fq.startOutline)
        fE(fq.endCircle)
        fE(fq.endOutline)
        getgenv().PredictionTracer = nil
    end
end
do
    local s = {
        rs = game:GetService("RunService"),
        uis = game:GetService("UserInputService"),
        camera = workspace.CurrentCamera
    }
    local cp = {
        line = nil,
        line_outline = nil,
        enabled = false,
        part = "HumanoidRootPart",
        origin = "mouse",
        connection = nil
    }
    local fF = {
        "Head",
        "UpperTorso",
        "LowerTorso",
        "HumanoidRootPart",
        "LeftUpperArm",
        "LeftLowerArm",
        "LeftHand",
        "RightUpperArm",
        "RightLowerArm",
        "RightHand",
        "LeftUpperLeg",
        "LeftLowerLeg",
        "LeftFoot",
        "RightUpperLeg",
        "RightLowerLeg",
        "RightFoot"
    }
end
getgenv().load_config = function(a5)
    a:load_config(readfile(a.directory .. "/configs/" .. a5 .. ".cfg"))
end
local fG = o:column()
local fH = fG:section({name = "Options"})
local fI = a:get_config()
config_holder = fH:list({flag = "config_name_list"})
fH:textbox({flag = "config_name_text_box"})
fH:button_holder({})
fH:button(
    {name = "Create", callback = function()
            writefile(a.directory .. "/configs/" .. g["config_name_text_box"] .. ".cfg", a:get_config())
            a:config_list_update()
        end}
)
fH:button(
    {name = "Delete", callback = function()
            delfile(a.directory .. "/configs/" .. g["config_name_list"] .. ".cfg")
            a:config_list_update()
        end}
)
fH:button_holder({})
fH:button(
    {name = "Load", callback = function()
            a:load_config(readfile(a.directory .. "/configs/" .. g["config_name_list"] .. ".cfg"))
            a:notification({text = "Loaded Config: " .. g["config_name_list"], time = 3})
        end}
)
fH:button(
    {name = "Save", callback = function()
            writefile(a.directory .. "/configs/" .. g["config_name_list"] .. ".cfg", a:get_config())
            a:config_list_update()
            a:notification({text = "Saved Config: " .. g["config_name_list"], time = 3})
        end}
)
fH:button_holder({})
fH:button(
    {name = "Refresh Configs", callback = function()
            a:config_list_update()
        end}
)
fH:button_holder({})
fH:button(
    {name = "Unload Config", callback = function()
            a:load_config(fI)
        end}
)
fH:button(
    {name = "Unload Menu", callback = function()
            a:load_config(fI)
            for A, fJ in a.guis do
                fJ:Destroy()
            end
            for A, fK in a.connections do
                fK:Disconnect()
            end
        end}
)
local fL, fM, fN = o:column():multi_section({names = {"Theme", "Game", "HUD"}})
fL:label({name = "Accent"}):colorpicker(
    {name = "Accent", color = c("#ffffff"), flag = "accent", callback = function(b9, fO)
            a:update_theme("accent", b9)
        end}
)
fL:label({name = "Contrast"}):colorpicker(
    {name = "Low", color = c("#2d2d2d"), flag = "low_contrast", callback = function(b9)
            if g["high_contrast"] and g["low_contrast"] then
                a:update_theme("contrast", d({e(0, g["low_contrast"].Color), e(1, g["high_contrast"].Color)}))
            end
        end}
):colorpicker(
    {name = "High", color = c("#101010"), flag = "high_contrast", callback = function(b9)
            a:update_theme("contrast", d({e(0, g["low_contrast"].Color), e(1, g["high_contrast"].Color)}))
        end}
)
fL:label({name = "Inline"}):colorpicker(
    {name = "Inline", color = c("#313131"), flag = "theme_inline", callback = function(b9, fO)
            a:update_theme("inline", b9)
        end}
)
fL:label({name = "Outline"}):colorpicker(
    {name = "Outline", color = c("#000000"), flag = "theme_outline", callback = function(b9, fO)
            a:update_theme("outline", b9)
        end}
)
fL:label({name = "Text Color"}):colorpicker(
    {name = "Main", color = c("#7b7b7b"), flag = "theme_text", callback = function(b9, fO)
            a:update_theme("text", b9)
        end}
):colorpicker(
    {name = "Outline", color = c("#282828"), flag = "theme_text_outline", callback = function(b9, fO)
            a:update_theme("text_outline", b9)
        end}
)
fL:label({name = "Glow"}):colorpicker(
    {name = "Glow", color = c("#ffffff"), flag = "theme_glow", callback = function(b9, fO)
            a:update_theme("glow", b9)
        end}
)
fN:label({name = "UI Bind"}):keybind({callback = j.set_menu_visibility, key = Enum.KeyCode.Insert})
fN:toggle(
    {name = "Keybind List", flag = "keybind_list", callback = function(fP)
            a.keybind_list_frame.Visible = fP
        end}
)
fN:toggle(
    {name = "CustomUI", flag = "custom_hud_enabled", callback = function(fP)
            r.set_visible(fP)
        end}
):colorpicker(
    {name = "Health", flag = "hud_health_color", color = r.colors.health_bar, callback = function(b9)
            r.colors.health_bar = b9
            r.update_bar_colors()
        end}
):colorpicker(
    {name = "Armor", flag = "hud_armor_color", color = r.colors.armor_bar, callback = function(b9)
            r.colors.armor_bar = b9
            r.update_bar_colors()
        end}
):colorpicker(
    {name = "Text", flag = "hud_text_color", color = r.colors.text, callback = function(b9)
            r.colors.text = b9
            r.update_bar_colors()
        end}
)
local fQ
local function fR()
    local fS = g["watermark_type"]
    local fT = {}
    local function fU()
        if fQ ~= nil then
            return fQ
        end
        local c4, R =
            pcall(
            function()
                return game:GetService("MarketplaceService"):GetProductInfo(game.PlaceId)
            end
        )
        local a5 = c4 and R and R.Name or tostring(game.PlaceId)
        fQ = a5
        return a5
    end
    if type(fS) == "table" then
        local cf = {}
        for A, ai in next, fS do
            cf[ai] = true
        end
        if cf["Date"] then
            fT[#fT + 1] = os.date("%y:%m:%d")
        end
        if cf["Time"] then
            fT[#fT + 1] = os.date("%H:%M:%S")
        end
        if cf["Place"] then
            fT[#fT + 1] = fU()
        end
        if cf["User"] then
            fT[#fT + 1] = i and i.Name or "?"
        end
    end
    if #fT == 0 then
        fT[1] = os.date("%H:%M:%S")
    end
    return "Rebuild.gg - " .. table.concat(fT, " - ")
end
local fV =
    fN:toggle(
    {name = "Watermark", flag = "watermark", callback = function(fP)
            p.set_visible(fP)
            if fP then
                p.change_text(fR())
            end
        end}
)
local fW = fN:dependency_box()
fW:setup_dependencies({{fV, true}})
fW:dropdown(
    {
        name = "Type",
        flag = "watermark_type",
        items = {"Time", "Date", "Place", "User"},
        multi = true,
        default = {"Time"},
        callback = function(cf)
            p.change_text(fR())
        end
    }
)
local fX =
    fN:toggle(
    {name = "Radar", flag = "hud_radar", callback = function(fP)
            q.set_visible(fP)
        end}
)
local fY = fN:dependency_box()
fY:setup_dependencies({{fX, true}})
fY:slider(
    {name = "Zoom", flag = "radar_zoom", min = 0.1, max = 2, default = 1, interval = 0.1, callback = function(aD)
            q.set_zoom(aD)
        end}
)
fM:button_holder({})
fM:button(
    {name = "Copy JobId", callback = function()
            setclipboard(game.JobId)
        end}
)
fM:button_holder({})
fM:button(
    {name = "Copy GameID", callback = function()
            setclipboard(game.GameId)
        end}
)
fM:button_holder({})
fM:button(
    {
        name = "Copy Join Script",
        callback = function()
            setclipboard(
                'game:GetService("TeleportService"):TeleportToPlaceInstance(' ..
                    game.PlaceId .. ', "' .. game.JobId .. '", game.Players.LocalPlayer)'
            )
        end
    }
)
fM:button_holder({})
fM:button(
    {name = "Rejoin", callback = function()
            game:GetService("TeleportService"):TeleportToPlaceInstance(game.PlaceId, game.JobId, i)
        end}
)
fM:button_holder({})
fM:button(
    {
        name = "Join New Server",
        callback = function()
            local fZ =
                game:GetService("HttpService"):JSONDecode(
                game:HttpGetAsync(
                    "https://games.roblox.com/v1/games/" .. game.PlaceId .. "/servers/Public?sortOrder=Asc&limit=100"
                )
            )
            local f_ = fZ.data[h(1, #fZ.data)]
            if f_.playing <= g["max_players"] then
                game:GetService("TeleportService"):TeleportToPlaceInstance(game.PlaceId, f_.id)
            end
        end
    }
)
fM:slider({name = "Max Players", flag = "max_players", min = 0, max = 40, default = 15, interval = 1})
k.open_tab()
task.spawn(
    function()
        while task.wait(1) do
            p.change_text(fR())
        end
    end
)
do
    local n = game:GetService("Players")
    local cB = game:GetService("RunService")
    local function g0(x)
        if x ~= i then
            q.add_dot(x)
        end
    end
    for A, x in ipairs(n:GetPlayers()) do
        g0(x)
    end
    table.insert(a.connections, n.PlayerAdded:Connect(g0))
    table.insert(
        a.connections,
        n.PlayerRemoving:Connect(
            function(x)
                q.remove_dot(x)
            end
        )
    )
    table.insert(
        a.connections,
        cB.RenderStepped:Connect(
            function()
                if q and g["hud_radar"] then
                    for A, x in ipairs(n:GetPlayers()) do
                        if x ~= i then
                            local v = x.Character
                            local B = v and v:FindFirstChild("HumanoidRootPart")
                            if B then
                                q.update_dot(x, B.Position)
                            end
                        end
                    end
                end
            end
        )
    )
end
a:config_list_update()
for g1, bb in next, f.preset do
    pcall(
        function()
            a:update_theme(g1, bb)
        end
    )
end
do
    local g2 = l:column()
    local g3 = g2:section({name = "Desync"})
    local g4 = {
        enabled = false,
        value_to_buy = 100,
        loop_conn = nil,
        armor_conn = nil,
        char_conn = nil,
        stopped = false,
        busy = false,
        last_click_t = 0,
        click_interval = 0.02,
        post_wait_frames = 2,
        last_attempt = 0,
        attempt_cooldown = 0.1,
        shop_head = nil,
        shop_clickdet = nil
    }
    local g5 = {autostomp_active = false}
    local function g6()
        local v = i.Character
        if not v then
            return nil
        end
        local dG = v:FindFirstChild("BodyEffects")
        local g7 = dG and dG:FindFirstChild("Armor")
        return g7 and g7.Value or nil
    end
    local function g8()
        local g9 = i:FindFirstChild("DataFolder")
        local ga = g9 and g9:FindFirstChild("Currency")
        return ga and ga.Value or 0
    end
    local function gb()
        local gc = workspace:FindFirstChild("Ignored")
        gc = gc and gc:FindFirstChild("Shop")
        if not gc then
            return nil
        end
        local c2 = gc:GetChildren()
        local gd = c2[16]
        local bE, ge
        if gd then
            bE = gd:FindFirstChild("Head")
            if bE then
                ge = bE:FindFirstChildOfClass("ClickDetector") or gd:FindFirstChildOfClass("ClickDetector")
            end
        end
        if not (gd and bE and ge) then
            gd, bE, ge = nil, nil, nil
            for A, gf in ipairs(c2) do
                local as = gf:FindFirstChild("Head")
                if as then
                    local gg = as:FindFirstChildOfClass("ClickDetector") or gf:FindFirstChildOfClass("ClickDetector")
                    if gg then
                        gd, bE, ge = gf, as, gg
                        break
                    end
                end
            end
        end
        return gd, bE, ge
    end
    local function gh()
        if g4.shop_head and g4.shop_clickdet then
            return g4.shop_head, g4.shop_clickdet
        end
        local A, bE, gi = gb()
        g4.shop_head, g4.shop_clickdet = bE, gi
        return bE, gi
    end
    local function gj()
        if not g4.enabled or g4.stopped or g4.busy then
            return
        end
        local _ = tick()
        if _ - g4.last_attempt < g4.attempt_cooldown then
            return
        end
        g4.last_attempt = _
        local ga = g6()
        if not ga then
            return
        end
        if ga >= 200 or ga > g4.value_to_buy then
            return
        end
        if g8() < 1000 then
            return
        end
        local bE, gi = gh()
        if not (bE and gi) then
            return
        end
        if _G.DesyncLibrary then
            g4.busy = true
            if g and g["Debug"] then
                print("[AutoArmor] moving to shop (instant)")
            end
            _G.DesyncLibrary.movedesyncto(bE.CFrame)
            pcall(
                function()
                    s.run.Heartbeat:Wait()
                    s.run.RenderStepped:Wait()
                end
            )
            for bp = 1, 30 do
                if g4.stopped or not g4.enabled then
                    break
                end
                local aD = g6()
                if aD and (aD >= 200 or aD >= g4.value_to_buy) then
                    break
                end
                if g8() < 1000 then
                    break
                end
                s.run.RenderStepped:Wait()
                pcall(fireclickdetector, gi)
                if g4.click_interval and g4.click_interval > 0 then
                    s.run.Heartbeat:Wait()
                    _G.DesyncLibrary.SynchronizeSyncWithPlayer()
                end
            end
            if g and g["Debug"] then
                print("[AutoArmor] resynced after purchase")
            end
            g4.busy = false
        end
    end
    local function gk()
        if g4.armor_conn then
            return
        end
        local v = i.Character
        if not v then
            return
        end
        local dG = v:FindFirstChild("BodyEffects")
        local g7 = dG and dG:FindFirstChild("Armor")
        if not g7 then
            return
        end
        g4.armor_conn =
            g7.Changed:Connect(
            function()
                gj()
            end
        )
        gj()
    end
    local function gl()
        if g4.char_conn then
            return
        end
        g4.char_conn =
            i.CharacterAdded:Connect(
            function()
                pcall(
                    function()
                        s.run.Heartbeat:Wait()
                        s.run.RenderStepped:Wait()
                    end
                )
                if g4.armor_conn then
                    g4.armor_conn:Disconnect()
                    g4.armor_conn = nil
                end
                g4.shop_head, g4.shop_clickdet = nil, nil
                if g4.enabled then
                    gh()
                    gk()
                    gj()
                end
            end
        )
    end
    local function gm()
        if g4.loop_conn then
            return
        end
        gh()
        gk()
        gl()
        g4.loop_conn =
            s.task.spawn(
            function()
                while g4.enabled do
                    s.task.wait(0.05)
                    if not g4.stopped then
                        gj()
                    end
                end
            end
        )
    end
    local function gn()
        if g4.loop_conn then
            pcall(
                function()
                    s.task.cancel(g4.loop_conn)
                end
            )
            g4.loop_conn = nil
        end
        if g4.armor_conn then
            g4.armor_conn:Disconnect()
            g4.armor_conn = nil
        end
        if g4.char_conn then
            g4.char_conn:Disconnect()
            g4.char_conn = nil
        end
        g4.busy = false
        g4.shop_head, g4.shop_clickdet = nil, nil
        if _G.DesyncLibrary then
            pcall(
                function()
                    _G.DesyncLibrary.SynchronizeSyncWithPlayer()
                end
            )
        end
    end
    local go =
        g3:toggle(
        {name = "Auto Armor", flag = "auto_armor_enabled", default = false, callback = function(state)
                g4.enabled = state
                if state then
                    gm()
                else
                    gn()
                end
                if autostomp_state and autostomp_state.enabled then
                    autostomp_state.last_sync = 0
                    autostomp_state.last_stomp = 0
                end
                g4.busy = state and g4.busy or false
            end}
    )
    local gp = g3:dependency_box()
    gp:setup_dependencies({{go, true}})
    gp:slider(
        {name = "BuyAt", flag = "armor_percent_to_buy", min = 1, max = 199, default = 100, callback = function(bb)
                g4.value_to_buy = bb
            end}
    )
    g4.value_to_buy =
        g and typeof(g["armor_percent_to_buy"]) == "number" and g["armor_percent_to_buy"] or g4.value_to_buy
    do
        local autostomp_state = {
            enabled = false,
            loop_conn = nil,
            hb_conn = nil,
            stomp_rate = 10,
            last_stomp = 0,
            was_active = false,
            tu_registered = false,
            noclip_char = nil,
            noclip_parts = {},
            y_offset = 0,
            last_sync = 0,
            sync_interval = 3
        }
        local function gq(u)
            return u and u.Character and u.Character:FindFirstChild("BodyEffects") and
                u.Character.BodyEffects:FindFirstChild("K.O") and
                u.Character.BodyEffects["K.O"].Value
        end
        local function gr(u)
            if not u or not u.Character then
                return nil
            end
            local v = u.Character
            local gs = v:FindFirstChild("UpperTorso")
            local gt = v:FindFirstChild("LowerTorso")
            local gu = gs or gt
            return gu and gu.CFrame
        end
        local function gv()
            if autostomp_state.noclip_char then
                for E, gw in pairs(autostomp_state.noclip_parts) do
                    if E and E.Parent then
                        pcall(
                            function()
                                E.CanCollide = gw
                            end
                        )
                    end
                end
                autostomp_state.noclip_parts = {}
                autostomp_state.noclip_char = nil
            end
        end
        local function gx(u)
            local v = u and u.Character
            if not v then
                return
            end
            if autostomp_state.noclip_char == v then
                return
            end
            gv()
            autostomp_state.noclip_char = v
            for A, P in ipairs(v:GetDescendants()) do
                if P:IsA("BasePart") then
                    autostomp_state.noclip_parts[P] = P.CanCollide
                    pcall(
                        function()
                            P.CanCollide = false
                        end
                    )
                end
            end
        end
        local function gy()
            if autostomp_state.hb_conn then
                return
            end
            autostomp_state.last_stomp = 0
            autostomp_state.last_sync = 0
            autostomp_state.was_active = false
            if not autostomp_state.tu_registered and t and t.OnTargetUpdate then
                autostomp_state.tu_registered = true
                t:OnTargetUpdate(
                    function(R)
                        if not autostomp_state.enabled then
                            return
                        end
                        if not R and autostomp_state.was_active then
                            gv()
                            pcall(
                                function()
                                    if _G.DesyncLibrary and _G.DesyncLibrary.SynchronizeSyncWithPlayer then
                                        _G.DesyncLibrary.SynchronizeSyncWithPlayer()
                                    end
                                end
                            )
                            autostomp_state.was_active = false
                        end
                        autostomp_state.last_stomp = 0
                    end
                )
            end
            autostomp_state.hb_conn =
                s.run.Heartbeat:Connect(
                function()
                    local ak = targeting_state and targeting_state.current
                    local gz = g4.busy == true
                    local gA = autostomp_state.enabled and not gz and ak and gq(ak)
                    g5.autostomp_active = gA and true or false
                    if not gz and autostomp_state.was_active and not gA then
                        autostomp_state.last_sync = 0
                        autostomp_state.last_stomp = 0
                    end
                    if gA then
                        gx(ak)
                        autostomp_state.was_active = true
                        local _ = os.clock()
                        if _ - autostomp_state.last_sync >= autostomp_state.sync_interval then
                            autostomp_state.last_sync = _
                            pcall(
                                function()
                                    if _G.DesyncLibrary and _G.DesyncLibrary.SynchronizeSyncWithPlayer then
                                        _G.DesyncLibrary.SynchronizeSyncWithPlayer()
                                    end
                                end
                            )
                        end
                        local gB = gr(ak)
                        if gB then
                            pcall(
                                function()
                                    if _G.DesyncLibrary and _G.DesyncLibrary.movedesyncto then
                                        _G.DesyncLibrary.movedesyncto(gB.X, gB.Y + autostomp_state.y_offset, gB.Z)
                                    end
                                end
                            )
                        end
                        local _ = os.clock()
                        local gC = 1 / math.max(1, autostomp_state.stomp_rate)
                        if _ - autostomp_state.last_stomp >= gC then
                            autostomp_state.last_stomp = _
                            pcall(
                                function()
                                    local gD = game:GetService("ReplicatedStorage"):FindFirstChild("MainEvent")
                                    if gD then
                                        gD:FireServer("Stomp")
                                    end
                                end
                            )
                        end
                    else
                        if autostomp_state.was_active then
                            gv()
                            pcall(
                                function()
                                    if _G.DesyncLibrary and _G.DesyncLibrary.SynchronizeSyncWithPlayer then
                                        _G.DesyncLibrary.SynchronizeSyncWithPlayer()
                                    end
                                end
                            )
                            autostomp_state.was_active = false
                        end
                    end
                end
            )
        end
        local function gE()
            if autostomp_state.loop_conn then
                s.task.cancel(autostomp_state.loop_conn)
                autostomp_state.loop_conn = nil
            end
            if autostomp_state.hb_conn then
                autostomp_state.hb_conn:Disconnect()
                autostomp_state.hb_conn = nil
            end
            gv()
            pcall(
                function()
                    if _G.DesyncLibrary and _G.DesyncLibrary.SynchronizeSyncWithPlayer then
                        _G.DesyncLibrary.SynchronizeSyncWithPlayer()
                    end
                end
            )
            autostomp_state.was_active = false
            g5.autostomp_active = false
        end
        local gF =
            g3:toggle(
            {name = "AutoStomp", flag = "autostomp_enabled", default = false, callback = function(an)
                    autostomp_state.enabled = an
                    if an then
                        gy()
                    else
                        gE()
                    end
                end}
        )
        local gG = g3:dependency_box()
        gG:setup_dependencies({{gF, true}})
        gG:slider(
            {
                name = "YOff",
                flag = "autostomp_y_offset",
                min = -1,
                max = 3,
                default = 0,
                interval = 0.01,
                callback = function(aD)
                    autostomp_state.y_offset = aD
                end
            }
        )
    end
    do
        local gH = {enabled = false, hb_conn = nil, mode = "VoidStatic"}
        local function gI()
            return s.math.random() * 1e21
        end
        local function gJ()
            return (s.math.random() < 0.5 and -1 or 1) * gI()
        end
        local function gK()
            if gH.hb_conn then
                return
            end
            gH.hb_conn =
                s.run.Heartbeat:Connect(
                function()
                    local gL = g4.busy == true or g5.autostomp_active == true
                    if gH.enabled and not gL then
                        pcall(
                            function()
                                if _G.DesyncLibrary and _G.DesyncLibrary.movedesyncto then
                                    local au = gH.mode
                                    local ac, ad, ae
                                    if au == "VoidStatic" then
                                        ac, ad, ae = -18e18, -18e18, -18e18
                                    elseif au == "VoidRandom" then
                                        ac = gJ()
                                        ad = -gI()
                                        ae = gJ()
                                    elseif au == "SkyStatic" then
                                        ac, ad, ae = 18e20, 18e20, 18e20
                                    elseif au == "SkyRandom" then
                                        ac = gJ()
                                        ad = gI()
                                        ae = gJ()
                                    elseif au == "WorldRandom" then
                                        ac = gJ()
                                        ad = gJ()
                                        ae = gJ()
                                    elseif au == "Infinity" then
                                        ac = s.math.huge
                                        ad = s.math.huge
                                        ae = -s.math.huge
                                    else
                                        ac, ad, ae = -18e18, -18e18, -18e18
                                    end
                                    _G.DesyncLibrary.movedesyncto(ac, ad, ae)
                                end
                            end
                        )
                    end
                end
            )
        end
        local function gM()
            if gH.hb_conn then
                gH.hb_conn:Disconnect()
                gH.hb_conn = nil
            end
            local gL = g4.busy == true or g5.autostomp_active == true
            if not gL then
                pcall(
                    function()
                        local gN = _G.DesyncLibrary
                        if gN and gN.SynchronizeSyncWithPlayer then
                            gN.SynchronizeSyncWithPlayer()
                            return
                        end
                        if gN and gN.movedesyncto then
                            local i = game and game.Players and game.Players.LocalPlayer
                            local v = i and i.Character
                            local B = v and v:FindFirstChild("HumanoidRootPart")
                            if B then
                                local x = B.Position
                                gN.movedesyncto(x.X, x.Y, x.Z)
                            end
                        end
                    end
                )
            end
        end
        local gO =
            g3:toggle(
            {name = "Voiding", flag = "voiding_enabled", default = false, callback = function(state)
                    gH.enabled = state
                    if state then
                        gK()
                    else
                        gM()
                    end
                end}
        )
        local gP = g3:dependency_box()
        gP:setup_dependencies({{gO, true}})
        gP:dropdown(
            {
                name = "Mode",
                flag = "voiding_mode",
                items = {"VoidStatic", "VoidRandom", "SkyStatic", "SkyRandom", "WorldRandom", "Infinity"},
                callback = function(aD)
                    gH.mode = aD
                end
            }
        )
    end
    do
        local gQ = l:column()
        local gR = gQ:section({name = "Movement"})
        local gS = {
            enabled = false,
            active = false,
            method = "Velocity",
            connection = nil,
            options = {
                Value = {Value = 16},
                TPTiming = 0,
                TPFrequency = {Value = 0.1},
                WallCheck = {Enabled = false},
                rayCheck = s and s.RaycastParams and s.RaycastParams.new() or RaycastParams.new(),
                PulseLength = {Value = 0.5},
                PulseDelay = {Value = 0.2}
            },
            correction = {mode = "None", last_dir = nil}
        }
        local gT = {"Velocity"}
        local gU = {"None", "Lerp"}
        local SpeedMethods = {Velocity = function(gV, gW)
                local V = i.Character and i.Character:FindFirstChild("HumanoidRootPart")
                if not V then
                    return
                end
                V.AssemblyLinearVelocity = gW * gV.Value.Value + s.Vector3.new(0, V.AssemblyLinearVelocity.Y, 0)
            end, Impulse = function(gV, gW)
                local V = i.Character and i.Character:FindFirstChild("HumanoidRootPart")
                if not V then
                    return
                end
                local fe = (gW * gV.Value.Value - V.AssemblyLinearVelocity) * s.Vector3.new(1, 0, 1)
                if fe.Magnitude > (gW == s.Vector3.new(0, 0, 0) and 10 or 2) then
                    V:ApplyImpulse(fe * V.AssemblyMass)
                end
            end, CFrame = function(gV, gW, ck)
                local V = i.Character and i.Character:FindFirstChild("HumanoidRootPart")
                local eb = i.Character and i.Character:FindFirstChildOfClass("Humanoid")
                if not V or not eb then
                    return
                end
                local gX = gW * s.math.max(gV.Value.Value - eb.WalkSpeed, 0) * ck
                if gV.WallCheck.Enabled then
                    gV.rayCheck.FilterDescendantsInstances = {i.Character, s.camera}
                    gV.rayCheck.CollisionGroup = V.CollisionGroup
                    local gY = s.workspace:Raycast(V.Position, gX, gV.rayCheck)
                    if gY then
                        gX = gY.Position + gY.Normal - V.Position
                    end
                end
                V.CFrame = V.CFrame + gX
            end, TP = function(gV, gW)
                if gV.TPTiming < s.tick() then
                    gV.TPTiming = s.tick() + gV.TPFrequency.Value
                    SpeedMethods.CFrame(gV, gW, 1)
                end
            end, Pulse = function(gV, gW)
                local V = i.Character and i.Character:FindFirstChild("HumanoidRootPart")
                local eb = i.Character and i.Character:FindFirstChildOfClass("Humanoid")
                if not V or not eb then
                    return
                end
                local ck = s.math.max(gV.Value.Value - eb.WalkSpeed, 0)
                ck =
                    ck *
                    (1 - s.math.min(s.tick() % (gV.PulseLength.Value + gV.PulseDelay.Value) / gV.PulseLength.Value, 1))
                V.AssemblyLinearVelocity = gW * (eb.WalkSpeed + ck) + s.Vector3.new(0, V.AssemblyLinearVelocity.Y, 0)
            end}
        local function gZ(aQ, ck, V, eb)
            local fj = gS.correction.mode
            if fj == "None" then
                return aQ
            end
            if aQ.Magnitude > 1e-3 then
                aQ = aQ.Unit
            else
                return aQ
            end
            if fj == "Lerp" then
                local bK = gS.correction.last_dir or aQ
                local fO = (s and s.math and s.math.clamp or math.clamp)(ck * 60 * 0.18, 0, 1)
                local g_ = bK:Lerp(aQ, fO)
                gS.correction.last_dir = g_
                return g_.Magnitude > 1e-3 and g_.Unit or aQ
            end
            return aQ
        end
        local h0 = s and s.table and s.table.find or table.find
        local h1 = s and s.table and s.table.insert or table.insert
        for a5 in pairs(SpeedMethods) do
            if not h0(gT, a5) then
                h1(gT, a5)
            end
        end
        local function h2()
            local eb = i.Character and i.Character:FindFirstChildOfClass("Humanoid")
            if not eb then
                return s.Vector3.new(0, 0, 0)
            end
            return eb.MoveDirection
        end
        local function h3()
            if gS.connection and gS.connection.Connected then
                return
            end
            if not (s and s.run) then
                if g and g["Debug"] then
                    warn("[SpeedHack] RunService missing; abort start")
                end
                return
            end
            if not i then
                return
            end
            gS.connection =
                s.run.Heartbeat:Connect(
                function(ck)
                    if not (gS.enabled and gS.active) then
                        return
                    end
                    local d5 = i.Character
                    local eb = d5 and d5:FindFirstChildOfClass("Humanoid")
                    local V = d5 and d5:FindFirstChild("HumanoidRootPart")
                    if not (eb and V) then
                        return
                    end
                    local h4 = SpeedMethods[gS.method]
                    if h4 then
                        local gW = eb.MoveDirection or s.Vector3.new(0, 0, 0)
                        gW = gZ(gW, ck, V, eb)
                        h4(gS.options, gW, ck)
                    end
                end
            )
            if g and g["Debug"] then
                print("[SpeedHack] started (", gS.method, ")")
            end
        end
        local function h5()
            if gS.connection then
                pcall(
                    function()
                        if gS.connection.Connected then
                            gS.connection:Disconnect()
                        end
                    end
                )
                gS.connection = nil
                if g and g["Debug"] then
                    print("[SpeedHack] stopped")
                end
            end
        end
        local h6 =
            gR:toggle(
            {name = "Speed", flag = "SpeedHack_Toggle", default = false, callback = function(bY)
                    gS.enabled = bY
                    if bY then
                        h3()
                    else
                        h5()
                    end
                    if g and g["Debug"] then
                        print("[SpeedHack] enabled:", bY)
                    end
                end}
        )
        if g then
            g["SpeedHack_Active"] = gS.active or false
        end
        local h7 =
            h6:keybind(
            {name = "Speed", flag = "SpeedHack_Keybind", default = "v", callback = function()
                    gS.active = not gS.active
                    if g then
                        g["SpeedHack_Active"] = gS.active
                    end
                    if a and a.update_dependencies then
                        a:update_dependencies()
                    end
                    if g and g["Debug"] then
                        print("[SpeedHack] active:", gS.active)
                    end
                end}
        )
        local h8 = gR:dependency_box()
        h8:setup_dependencies({{h6, true}})
        h8:textbox(
            {name = "Speed", flag = "SpeedHack_Value", default = "16", placeholder = "16", callback = function(bY)
                    local bb = tonumber(bY) or 16
                    gS.options.Value.Value = bb
                end}
        )
        h8:dropdown(
            {name = "Method", flag = "SpeedHack_Method", items = gT, default = "Velocity", callback = function(bY)
                    gS.method = bY
                    if a and a.update_dependencies then
                        a:update_dependencies()
                    end
                end}
        )
        h8:dropdown(
            {name = "MoveFix", flag = "SpeedHack_MoveFix", items = gU, default = "None", callback = function(bY)
                    gS.correction.mode = bY
                    gS.correction.last_dir = nil
                end}
        )
        local h9 = gR:dependency_box()
        h9:setup_dependencies({{h6, true}})
        h9:toggle(
            {name = "WallCheck", flag = "SpeedHack_WallCheck", default = false, callback = function(bY)
                    gS.options.WallCheck.Enabled = bY
                end}
        )
        local ha = gR:dependency_box()
        ha:setup_dependencies({{h6, true}, {"SpeedHack_Method", "TP"}})
        ha:slider(
            {
                name = "TPFreq",
                flag = "SpeedHack_TPFreq",
                min = 0.05,
                max = 1,
                default = 0.1,
                decimals = 2,
                callback = function(bY)
                    gS.options.TPFrequency.Value = bY
                end
            }
        )
        local hb = gR:dependency_box()
        hb:setup_dependencies({{h6, true}, {"SpeedHack_Method", "Pulse"}})
        hb:slider(
            {
                name = "PulseLen",
                flag = "SpeedHack_PulseLen",
                min = 0.1,
                max = 5,
                default = 0.5,
                decimals = 1,
                callback = function(bY)
                    gS.options.PulseLength.Value = bY
                end
            }
        )
        hb:slider(
            {
                name = "PulseDly",
                flag = "SpeedHack_PulseDly",
                min = 0.1,
                max = 1,
                default = 0.2,
                decimals = 2,
                callback = function(bY)
                    gS.options.PulseDelay.Value = bY
                end
            }
        )
        local function hc(v)
            if s and s.run then
                s.run.Heartbeat:Wait()
            end
            gS.active = false
            if g then
                g["SpeedHack_Active"] = false
            end
            if a and a.update_dependencies then
                a:update_dependencies()
            end
            h5()
            if gS.enabled then
                h3()
            end
            local w = v and v:FindFirstChildOfClass("Humanoid")
            if w then
                if gS._died_conn then
                    pcall(
                        function()
                            gS._died_conn:Disconnect()
                        end
                    )
                end
                gS._died_conn =
                    w.Died:Connect(
                    function()
                        if g and g["Debug"] then
                            print("[SpeedHack] died -> reset active & stop")
                        end
                        gS.active = false
                        if g then
                            g["SpeedHack_Active"] = false
                        end
                        if a and a.update_dependencies then
                            a:update_dependencies()
                        end
                        h5()
                    end
                )
            end
        end
        if i then
            if i.Character then
                hc(i.Character)
            end
            if gS._char_added then
                pcall(
                    function()
                        gS._char_added:Disconnect()
                    end
                )
            end
            gS._char_added =
                i.CharacterAdded:Connect(
                function(v)
                    if g and g["Debug"] then
                        print("[SpeedHack] CharacterAdded")
                    end
                    hc(v)
                end
            )
            if gS._char_removing then
                pcall(
                    function()
                        gS._char_removing:Disconnect()
                    end
                )
            end
            gS._char_removing =
                i.CharacterRemoving:Connect(
                function()
                    if g and g["Debug"] then
                        print("[SpeedHack] CharacterRemoving")
                    end
                    gS.active = false
                    if g then
                        g["SpeedHack_Active"] = false
                    end
                    if a and a.update_dependencies then
                        a:update_dependencies()
                    end
                    h5()
                end
            )
        end
        local hd = {enabled = false, active = false, connection = nil, options = {Speed = {Value = 1.5}}}
        local function he(ac, ad, ae)
            local hf = s and s.Vector3 and s.Vector3.new or Vector3 and Vector3.new
            return hf and hf(ac, ad, ae) or nil
        end
        local function hg(cR, state)
            if not cR then
                return
            end
            for A, E in ipairs(cR:GetDescendants()) do
                if E:IsA("BasePart") then
                    if state then
                        if E:GetAttribute("OriginalCollision") == nil then
                            E:SetAttribute("OriginalCollision", E.CanCollide)
                            E:SetAttribute("OriginalTouch", E.CanTouch)
                            E:SetAttribute("OriginalQuery", E.CanQuery)
                        end
                        E.CanCollide, E.CanTouch, E.CanQuery = false, false, false
                    else
                        if E:GetAttribute("OriginalCollision") ~= nil then
                            E.CanCollide = E:GetAttribute("OriginalCollision")
                            E.CanTouch = E:GetAttribute("OriginalTouch")
                            E.CanQuery = E:GetAttribute("OriginalQuery")
                            E:SetAttribute("OriginalCollision", nil)
                            E:SetAttribute("OriginalTouch", nil)
                            E:SetAttribute("OriginalQuery", nil)
                        end
                    end
                end
            end
        end
        local function hh()
            if hd.connection and hd.connection.Connected then
                return
            end
            if not (s and s.run) then
                return
            end
            hd.connection =
                s.run.Stepped:Connect(
                function()
                    if not (hd.enabled and hd.active) then
                        return
                    end
                    local v = i and i.Character
                    if not v then
                        return
                    end
                    hg(v, true)
                    local B = v:FindFirstChild("HumanoidRootPart")
                    local w = v:FindFirstChildOfClass("Humanoid")
                    if not (B and w) then
                        return
                    end
                    local bm = (hd.options.Speed.Value or 1.5) * 50
                    local hi = he(0, 0, 0)
                    local ct = s and s.uis or game:GetService("UserInputService")
                    local hj = s and s.cam or workspace and workspace.CurrentCamera
                    if not ct or not hj then
                        return
                    end
                    if ct:IsKeyDown(Enum.KeyCode.Space) then
                        hi = hi + he(0, bm, 0)
                    end
                    if ct:IsKeyDown(Enum.KeyCode.LeftControl) then
                        hi = hi + he(0, -bm, 0)
                    end
                    if ct:IsKeyDown(Enum.KeyCode.W) then
                        hi = hi + hj.CFrame.LookVector * bm
                    end
                    if ct:IsKeyDown(Enum.KeyCode.S) then
                        hi = hi + hj.CFrame.LookVector * -bm
                    end
                    if ct:IsKeyDown(Enum.KeyCode.D) then
                        hi = hi + hj.CFrame.RightVector * bm
                    end
                    if ct:IsKeyDown(Enum.KeyCode.A) then
                        hi = hi + hj.CFrame.RightVector * -bm
                    end
                    B.Velocity = hi
                    pcall(
                        function()
                            w:ChangeState(Enum.HumanoidStateType.Freefall)
                        end
                    )
                end
            )
            if g and g["Debug"] then
                print("[FlyHack] started")
            end
        end
        local function hk()
            if hd.connection then
                pcall(
                    function()
                        if hd.connection.Connected then
                            hd.connection:Disconnect()
                        end
                    end
                )
                hd.connection = nil
            end
            local v = i and i.Character
            hg(v, false)
            if v then
                local B = v:FindFirstChild("HumanoidRootPart")
                local w = v:FindFirstChildOfClass("Humanoid")
                if B then
                    B.Velocity = he(0, -2, 0)
                    local hl
                    hl =
                        (s and s.run and s.run.Stepped or game:GetService("RunService").Stepped):Connect(
                        function()
                            if not B or not B.Parent then
                                if hl and hl.Connected then
                                    hl:Disconnect()
                                end
                                return
                            end
                            B.Velocity = he(0, B.Velocity.Y, 0)
                            if hl and hl.Connected then
                                hl:Disconnect()
                            end
                        end
                    )
                end
                if w then
                    pcall(
                        function()
                            w:ChangeState(Enum.HumanoidStateType.Landing)
                        end
                    )
                end
            end
            if g and g["Debug"] then
                print("[FlyHack] stopped")
            end
        end
        local function hm()
            local v = i and i.Character
            hg(v, false)
            if not v then
                return
            end
            local B = v:FindFirstChild("HumanoidRootPart")
            local w = v:FindFirstChildOfClass("Humanoid")
            if B then
                pcall(
                    function()
                        B.AssemblyLinearVelocity = he(0, 0, 0)
                    end
                )
                pcall(
                    function()
                        B.AssemblyAngularVelocity = he(0, 0, 0)
                    end
                )
                B.Velocity = he(0, -2, 0)
                local hl
                hl =
                    (s and s.run and s.run.Stepped or game:GetService("RunService").Stepped):Connect(
                    function()
                        if not B or not B.Parent then
                            if hl and hl.Connected then
                                hl:Disconnect()
                            end
                            return
                        end
                        local fl = B.Velocity.Y
                        pcall(
                            function()
                                B.AssemblyLinearVelocity = he(0, fl, 0)
                            end
                        )
                        B.Velocity = he(0, fl, 0)
                        if hl and hl.Connected then
                            hl:Disconnect()
                        end
                    end
                )
            end
            if w then
                pcall(
                    function()
                        w:ChangeState(Enum.HumanoidStateType.Landing)
                    end
                )
            end
            if g and g["Debug"] then
                print("[FlyHack] soft-stopped (keybind)")
            end
        end
        local hn =
            gR:toggle(
            {name = "Flight", flag = "FlyHack_Toggle", default = false, callback = function(bY)
                    hd.enabled = bY
                    if bY then
                        hh()
                    else
                        hk()
                    end
                    if g and g["Debug"] then
                        print("[FlyHack] enabled:", bY)
                    end
                end}
        )
        if g then
            g["FlyHack_Active"] = hd.active or false
        end
        local ho =
            hn:keybind(
            {name = "Flight", flag = "FlyHack_Keybind", default = "b", callback = function()
                    hd.active = not hd.active
                    if not hd.active then
                        hm()
                    end
                    if g then
                        g["FlyHack_Active"] = hd.active
                    end
                    if a and a.update_dependencies then
                        a:update_dependencies()
                    end
                    if g and g["Debug"] then
                        print("[FlyHack] active:", hd.active)
                    end
                end}
        )
        local hp = gR:dependency_box()
        hp:setup_dependencies({{hn, true}})
        hp:textbox(
            {
                name = "Spd",
                flag = "FlyHack_Speed",
                default = tostring(hd.options.Speed.Value or 1.5),
                callback = function(aD)
                    local hq = tonumber(aD)
                    if hq then
                        hd.options.Speed.Value = hq
                    end
                end
            }
        )
        local function hr(v)
            if s and s.run then
                s.run.Heartbeat:Wait()
            end
            hd.active = false
            if g then
                g["FlyHack_Active"] = false
            end
            if a and a.update_dependencies then
                a:update_dependencies()
            end
            hk()
            if hd.enabled then
                hh()
            end
            local w = v and v:FindFirstChildOfClass("Humanoid")
            if w then
                if hd._died_conn then
                    pcall(
                        function()
                            hd._died_conn:Disconnect()
                        end
                    )
                end
                hd._died_conn =
                    w.Died:Connect(
                    function()
                        if g and g["Debug"] then
                            print("[FlyHack] died -> reset active & stop")
                        end
                        hd.active = false
                        if g then
                            g["FlyHack_Active"] = false
                        end
                        if a and a.update_dependencies then
                            a:update_dependencies()
                        end
                        hk()
                    end
                )
            end
        end
        if i then
            if i.Character then
                hr(i.Character)
            end
            if hd._char_added then
                pcall(
                    function()
                        hd._char_added:Disconnect()
                    end
                )
            end
            hd._char_added =
                i.CharacterAdded:Connect(
                function(v)
                    if g and g["Debug"] then
                        print("[FlyHack] CharacterAdded")
                    end
                    hr(v)
                end
            )
            if hd._char_removing then
                pcall(
                    function()
                        hd._char_removing:Disconnect()
                    end
                )
            end
            hd._char_removing =
                i.CharacterRemoving:Connect(
                function()
                    if g and g["Debug"] then
                        print("[FlyHack] CharacterRemoving")
                    end
                    hd.active = false
                    if g then
                        g["FlyHack_Active"] = false
                    end
                    if a and a.update_dependencies then
                        a:update_dependencies()
                    end
                    hk()
                end
            )
        end
        do
            local hs = s and s.workspace or workspace
            local ht = s and s.run or game:GetService("RunService")
            local hu = s and s.uis or game:GetService("UserInputService")
            local aO = s and (s.camera or s.cam) or hs and hs.CurrentCamera
            local hv = s and s.RaycastParams and s.RaycastParams.new and s.RaycastParams.new() or RaycastParams.new()
            hv.RespectCanCollide = true
            local hw = {
                enabled = false,
                connection = nil,
                _ib = nil,
                _ie = nil,
                _died_conn = nil,
                _char_added = nil,
                _char_removing = nil,
                shift_down = false,
                active = false,
                mode = "Velocity",
                value = 20,
                state_enabled = true,
                truss = nil,
                rp = hv
            }
            local function hx(hy)
                if not hw.truss then
                    local af = Instance.new("TrussPart")
                    af.Size = Vector3.new(2, 2, 2)
                    af.Transparency = 1
                    af.Anchored = true
                    hw.truss = af
                end
                hw.truss.Parent = hw.enabled and hy or nil
            end
            local function hz()
                local af = hw.truss
                if af then
                    pcall(
                        function()
                            af:Destroy()
                        end
                    )
                end
                hw.truss = nil
            end
            local function hA()
                if hw.connection and hw.connection.Connected then
                    return
                end
                local hB = ht and (ht.PreSimulation or ht.Stepped or ht.Heartbeat)
                hw.connection =
                    hB:Connect(
                    function(ck)
                        if not hw.enabled then
                            return
                        end
                        local v = i and i.Character
                        local w = v and v:FindFirstChildOfClass("Humanoid")
                        local V = v and v:FindFirstChild("HumanoidRootPart")
                        if not (w and V) then
                            return
                        end
                        local hC = {aO, v, hw.truss}
                        if hw.rp then
                            hw.rp.FilterDescendantsInstances = hC
                            pcall(
                                function()
                                    hw.rp.CollisionGroup = V.CollisionGroup
                                end
                            )
                        end
                        local hD =
                            hu and (hu:IsKeyDown(Enum.KeyCode.LeftShift) or hu:IsKeyDown(Enum.KeyCode.RightShift)) or
                            hw.shift_down
                        if hD then
                            hw.active = false
                            return
                        end
                        if hw.mode ~= "Climbing" then
                            local hE = w.MoveDirection
                            if hE.Magnitude < 0.05 then
                                hw.active = false
                                return
                            end
                            local aP = V.Position - Vector3.new(0, (w.HipHeight or 2) - 0.5, 0)
                            local cS = hE.Unit * 1
                            local gY = hs:Raycast(aP, cS, hw.rp)
                            if hw.active and not gY then
                                pcall(
                                    function()
                                        local aD = V.AssemblyLinearVelocity
                                        V.AssemblyLinearVelocity = Vector3.new(aD.X, 0, aD.Z)
                                    end
                                )
                            end
                            hw.active = gY ~= nil
                            if hw.active and gY.Normal.Y == 0 then
                                if hw.state_enabled then
                                    pcall(
                                        function()
                                            w:ChangeState(Enum.HumanoidStateType.Climbing)
                                        end
                                    )
                                end
                                pcall(
                                    function()
                                        local cV = V.AssemblyLinearVelocity
                                        V.AssemblyLinearVelocity = Vector3.new(cV.X, 0, cV.Z)
                                    end
                                )
                                if hw.mode == "CFrame" then
                                    V.CFrame = V.CFrame * CFrame.new(0, hw.value * ck, 0)
                                elseif hw.mode == "Impulse" then
                                    V:ApplyImpulse(Vector3.new(0, hw.value, 0) * V.AssemblyMass)
                                else
                                    pcall(
                                        function()
                                            local cV = V.AssemblyLinearVelocity
                                            V.AssemblyLinearVelocity = cV + Vector3.new(0, hw.value, 0)
                                        end
                                    )
                                end
                            end
                        else
                            local aP = V.Position - Vector3.new(0, (w.HipHeight or 2) - 0.5, 0)
                            local cS = V.CFrame.LookVector * 1
                            local gY = hs:Raycast(aP, cS, hw.rp)
                            if gY and not hD then
                                hx(aO)
                                local F = gY.Position - gY.Normal * 0.9
                                hw.truss.Position = F or Vector3.new(0, 0, 0)
                            else
                                if hw.truss then
                                    hw.truss.Position = Vector3.new(0, 0, 0)
                                end
                            end
                        end
                    end
                )
                if not (hw._ib and hw._ib.Connected) then
                    hw._ib =
                        hu.InputBegan:Connect(
                        function(dq, hF)
                            if hF then
                                return
                            end
                            if dq.KeyCode == Enum.KeyCode.LeftShift or dq.KeyCode == Enum.KeyCode.RightShift then
                                hw.shift_down = true
                            end
                        end
                    )
                end
                if not (hw._ie and hw._ie.Connected) then
                    hw._ie =
                        hu.InputEnded:Connect(
                        function(dq)
                            if dq.KeyCode == Enum.KeyCode.LeftShift or dq.KeyCode == Enum.KeyCode.RightShift then
                                hw.shift_down = false
                            end
                        end
                    )
                end
                if hw.mode == "Climbing" then
                    hx(aO)
                else
                    hz()
                end
            end
            local function hG()
                if hw.connection then
                    pcall(
                        function()
                            if hw.connection.Connected then
                                hw.connection:Disconnect()
                            end
                        end
                    )
                    hw.connection = nil
                end
                if hw._ib then
                    pcall(
                        function()
                            hw._ib:Disconnect()
                        end
                    )
                    hw._ib = nil
                end
                if hw._ie then
                    pcall(
                        function()
                            hw._ie:Disconnect()
                        end
                    )
                    hw._ie = nil
                end
                if hw._died_conn then
                    pcall(
                        function()
                            hw._died_conn:Disconnect()
                        end
                    )
                    hw._died_conn = nil
                end
                hw.shift_down = false
                hw.active = false
                hz()
            end
            local hH =
                gR:toggle(
                {name = "Spider", flag = "Spider_Toggle", default = false, callback = function(aD)
                        hw.enabled = aD
                        if aD then
                            hA()
                        else
                            hG()
                        end
                        if a and a.update_dependencies then
                            a:update_dependencies()
                        end
                    end}
            )
            local hI = gR:dependency_box()
            hI:setup_dependencies({{hH, true}})
            hI:dropdown(
                {
                    name = "Mode",
                    flag = "Spider_Mode",
                    items = {"Velocity", "Impulse", "CFrame", "Climbing"},
                    default = hw.mode,
                    callback = function(bY)
                        hw.mode = bY
                        local hJ = bY ~= "Climbing"
                        if g then
                            g["Spider_ShowControls"] = hJ
                        end
                        if hw.enabled then
                            if bY == "Climbing" then
                                hx(aO)
                            else
                                hz()
                            end
                        end
                        if a and a.update_dependencies then
                            a:update_dependencies()
                        end
                    end
                }
            )
            if g and g["Spider_ShowControls"] == nil then
                g["Spider_ShowControls"] = true
            end
            local hK = gR:dependency_box()
            hK:setup_dependencies({{hH, true}, {"Spider_ShowControls", true}})
            hK:slider(
                {
                    name = "Val",
                    flag = "Spider_Val",
                    min = 1,
                    max = 100,
                    default = hw.value,
                    decimals = 0,
                    callback = function(bY)
                        hw.value = bY
                    end
                }
            )
            hK:toggle(
                {name = "State", flag = "Spider_State", default = hw.state_enabled, callback = function(aD)
                        hw.state_enabled = aD
                    end}
            )
            local function hL(v)
                if ht and ht.Heartbeat then
                    ht.Heartbeat:Wait()
                end
                hG()
                if hw.enabled then
                    hA()
                end
                local w = v and v:FindFirstChildOfClass("Humanoid")
                if w then
                    if hw._died_conn then
                        pcall(
                            function()
                                hw._died_conn:Disconnect()
                            end
                        )
                    end
                    hw._died_conn =
                        w.Died:Connect(
                        function()
                            hG()
                        end
                    )
                end
            end
            if i then
                if i.Character then
                    hL(i.Character)
                end
                if hw._char_added then
                    pcall(
                        function()
                            hw._char_added:Disconnect()
                        end
                    )
                end
                hw._char_added =
                    i.CharacterAdded:Connect(
                    function(v)
                        hL(v)
                    end
                )
                if hw._char_removing then
                    pcall(
                        function()
                            hw._char_removing:Disconnect()
                        end
                    )
                end
                hw._char_removing =
                    i.CharacterRemoving:Connect(
                    function()
                        hG()
                    end
                )
            end
        end
        do
            local hs = s and s.workspace or workspace
            local ht = s and s.run or game:GetService("RunService")
            local function he(ac, ad, ae)
                local hf = s and s.Vector3 and s.Vector3.new or Vector3 and Vector3.new
                return hf and hf(ac, ad, ae) or nil
            end
            local hM = {
                enabled = false,
                mode = "Workspace",
                value = 196.2,
                connection = nil,
                prop_conn = nil,
                changed = false,
                original = nil
            }
            local function hN(hO)
                pcall(
                    function()
                        if hO and hO.Connected then
                            hO:Disconnect()
                        end
                    end
                )
            end
            local function hP(bY)
                if not hs then
                    return
                end
                hM.changed = true
                hs.Gravity = bY
                hM.changed = false
            end
            local function hQ()
                if not (ht and hs) then
                    return
                end
                if hM.original == nil then
                    hM.original = hs.Gravity
                end
                hN(hM.connection)
                hM.connection = nil
                hN(hM.prop_conn)
                hM.prop_conn = nil
                if hM.mode == "Workspace" then
                    hP(hM.value)
                    hM.prop_conn =
                        hs:GetPropertyChangedSignal("Gravity"):Connect(
                        function()
                            if hM.changed then
                                return
                            end
                            hP(hM.value)
                        end
                    )
                else
                    local hB = ht.PreSimulation or ht.Stepped
                    hM.connection =
                        hB:Connect(
                        function(ck)
                            if not hM.enabled then
                                return
                            end
                            local v = i and i.Character
                            local w = v and v:FindFirstChildOfClass("Humanoid")
                            local V = v and v:FindFirstChild("HumanoidRootPart")
                            if not (w and V) then
                                return
                            end
                            if w.FloorMaterial == Enum.Material.Air then
                                local fe = hs.Gravity - hM.value
                                if hM.mode == "Impulse" then
                                    V:ApplyImpulse(he(0, ck * fe, 0) * V.AssemblyMass)
                                else
                                    local hR = he(0, ck * fe, 0)
                                    pcall(
                                        function()
                                            V.AssemblyLinearVelocity = V.AssemblyLinearVelocity + hR
                                        end
                                    )
                                end
                            end
                        end
                    )
                end
            end
            local function hS()
                hN(hM.connection)
                hM.connection = nil
                hN(hM.prop_conn)
                hM.prop_conn = nil
                if hM.original ~= nil and hs then
                    pcall(
                        function()
                            hs.Gravity = hM.original
                        end
                    )
                end
            end
            local hT =
                gR:toggle(
                {name = "Gravity", flag = "Gravity_Toggle", default = false, callback = function(bY)
                        hM.enabled = bY
                        if bY then
                            hQ()
                        else
                            hS()
                        end
                    end}
            )
            local hU = gR:dependency_box()
            hU:setup_dependencies({{hT, true}})
            hU:dropdown(
                {
                    name = "Mode",
                    flag = "Gravity_Mode",
                    items = {"Workspace", "Impulse", "LinearVelocity"},
                    default = "Workspace",
                    callback = function(aD)
                        hM.mode = aD
                        if hM.enabled then
                            hS()
                            hQ()
                        end
                    end
                }
            )
            hU:slider(
                {
                    name = "Grv",
                    flag = "Gravity_Value",
                    min = 0,
                    max = 400,
                    default = 196.2,
                    decimals = 1,
                    callback = function(bY)
                        hM.value = bY
                        if hM.enabled and hM.mode == "Workspace" then
                            hP(hM.value)
                        end
                    end
                }
            )
        end
        do
            local hV = {enabled = false, connection = nil, min = 16}
            local hW =
                gR:toggle(
                {
                    name = "NoSlow",
                    flag = "NoSlow_Toggle",
                    default = false,
                    callback = function(bY)
                        hV.enabled = bY
                        if bY then
                            local hX = s and s.rs or game:GetService("RunService")
                            if not (hV.connection and hV.connection.Connected) then
                                hV.connection =
                                    hX.Heartbeat:Connect(
                                    function()
                                        local v = i and i.Character
                                        if not v then
                                            return
                                        end
                                        local w = v:FindFirstChildOfClass("Humanoid")
                                        if not w then
                                            return
                                        end
                                        local V = w.RootPart or v:FindFirstChild("HumanoidRootPart")
                                        if not V then
                                            return
                                        end
                                        local aQ = w.MoveDirection
                                        if aQ.Magnitude > 0 then
                                            local cV = V.AssemblyLinearVelocity
                                            local hY = Vector3.new(cV.X, 0, cV.Z).Magnitude
                                            if hY + 1e-3 < hV.min then
                                                local hZ = aQ.Unit
                                                V.AssemblyLinearVelocity =
                                                    Vector3.new(hZ.X * hV.min, cV.Y, hZ.Z * hV.min)
                                            end
                                        end
                                    end
                                )
                            end
                        else
                            if hV.connection then
                                pcall(
                                    function()
                                        hV.connection:Disconnect()
                                    end
                                )
                                hV.connection = nil
                            end
                        end
                    end
                }
            )
        end
        do
            local hu = s and s.uis or game:GetService("UserInputService")
            local ht = s and s.run or game:GetService("RunService")
            local hs = s and s.workspace or workspace
            local h_ = {enabled = false, mode = "Velocity", power = 50, connection = nil}
            local function i0()
                local v = i and i.Character
                local w = v and v:FindFirstChildOfClass("Humanoid")
                if not w then
                    return
                end
                local state = w:GetState()
                if state ~= Enum.HumanoidStateType.Running and state ~= Enum.HumanoidStateType.Landed then
                    return
                end
                local i1 = tonumber(h_.power) or 50
                pcall(
                    function()
                        if w.UseJumpPower ~= false then
                            w.JumpPower = i1
                        else
                            w.JumpHeight = math.max(1, i1 / 7)
                        end
                        w:ChangeState(Enum.HumanoidStateType.Jumping)
                    end
                )
            end
            local function i2()
                if h_.connection and h_.connection.Connected then
                    return
                end
                h_.connection =
                    ht.RenderStepped:Connect(
                    function()
                        if not h_.enabled then
                            return
                        end
                        if hu:GetFocusedTextBox() then
                            return
                        end
                        if hu:IsKeyDown(Enum.KeyCode.Space) then
                            i0()
                        end
                    end
                )
            end
            local function i3()
                if h_.connection then
                    pcall(
                        function()
                            if h_.connection.Connected then
                                h_.connection:Disconnect()
                            end
                        end
                    )
                    h_.connection = nil
                end
            end
            local i4 =
                gR:toggle(
                {name = "HighJump", flag = "HighJump_Toggle", default = false, callback = function(aD)
                        h_.enabled = aD
                        if aD then
                            i2()
                        else
                            i3()
                        end
                        if a and a.update_dependencies then
                            a:update_dependencies()
                        end
                    end}
            )
            local i5 = gR:dependency_box()
            i5:setup_dependencies({{i4, true}})
            i5:dropdown(
                {
                    name = "Mode",
                    flag = "HighJump_Mode",
                    items = {"Impulse", "Velocity", "CFrame", "Instant"},
                    default = h_.mode,
                    callback = function(bY)
                        h_.mode = bY
                    end
                }
            )
            i5:textbox(
                {name = "Pwr", flag = "HighJump_Power", default = tostring(h_.power), callback = function(ed)
                        local hq = tonumber(ed)
                        if not hq then
                            return
                        end
                        if hq < 1 then
                            hq = 1
                        end
                        if hq > 300 then
                            hq = 300
                        end
                        h_.power = hq
                    end}
            )
        end
        do
            local i6 = {enabled = false, hooked = false, old = nil, conn = nil, baselineJP = nil, baselineJH = nil}
            local function i7()
                local c4, i8 =
                    pcall(
                    function()
                        return game and game.IsLoaded and (game.IsLoaded(game) or game:IsLoaded())
                    end
                )
                if not c4 or not i8 then
                    pcall(
                        function()
                            if game and game.Loaded then
                                if game.Loaded.Wait then
                                    game.Loaded.Wait(game.Loaded)
                                else
                                    game.Loaded:Wait()
                                end
                            end
                        end
                    )
                end
            end
            local function i9()
                if i6.hooked then
                    return
                end
                if type(hookmetamethod) ~= "function" then
                    return
                end
                local ia =
                    game and game.IsA or
                    function(aJ, ib)
                        local c4, ic =
                            pcall(
                            function()
                                return aJ and aJ.IsA and aJ:IsA(ib)
                            end
                        )
                        return c4 and ic or false
                    end
                local id
                local function ie(self, ig, ih)
                    local ii = false
                    if type(checkcaller) == "function" then
                        ii = not checkcaller()
                    end
                    if i6.enabled and ii and ig == "JumpPower" and ia(self, "Humanoid") then
                        return
                    end
                    if not id then
                        return
                    end
                    return id(self, ig, ih)
                end
                local ij = type(newcclosure) == "function" and newcclosure(ie) or ie
                local c4, ik =
                    pcall(
                    function()
                        return hookmetamethod(game, "__newindex", ij)
                    end
                )
                if c4 and ik then
                    id = ik
                    i6.old = ik
                    i6.hooked = true
                end
            end
            local function il()
                local hX = s and s.rs or game:GetService("RunService")
                if i6.conn and i6.conn.Connected then
                    return
                end
                i6.conn =
                    hX.Heartbeat:Connect(
                    function()
                        local v = i and i.Character
                        if not v then
                            return
                        end
                        local w = v:FindFirstChildOfClass("Humanoid")
                        if not w then
                            return
                        end
                        if not i6.baselineJP then
                            i6.baselineJP = tonumber(w.JumpPower) or 50
                        end
                        if not i6.baselineJH then
                            i6.baselineJH = tonumber(w.JumpHeight) or 7.2
                        end
                        local im =
                            pcall(
                            function()
                                if w.UseJumpPower ~= false then
                                    if w.JumpPower < i6.baselineJP then
                                        w.JumpPower = i6.baselineJP
                                    end
                                else
                                    if w.JumpHeight < i6.baselineJH then
                                        w.JumpHeight = i6.baselineJH
                                    end
                                end
                            end
                        )
                        if not im then
                            return
                        end
                    end
                )
            end
            local function io()
                if i6.conn then
                    pcall(
                        function()
                            i6.conn:Disconnect()
                        end
                    )
                    i6.conn = nil
                end
            end
            local ip =
                gR:toggle(
                {name = "NoJumpCooldown", flag = "NoJumpCooldown_Toggle", default = false, callback = function(bY)
                        i6.enabled = bY
                        if bY then
                            i7()
                            i9()
                            if not i6.hooked then
                                il()
                            else
                                io()
                            end
                        else
                            io()
                        end
                    end}
            )
        end
        do
            local ht = s and s.run or game:GetService("RunService")
            local iq = {enabled = false, connection = nil, mode = "Velocity", value = 10}
            if iq.mode ~= "CFrame" and iq.mode ~= "Velocity" then
                iq.mode = "Velocity"
            end
            local function ir()
                if iq.connection and iq.connection.Connected then
                    return
                end
                local hB = ht and (ht.PreSimulation or ht.Stepped or ht.Heartbeat)
                iq.connection =
                    hB:Connect(
                    function(ck)
                        if not iq.enabled then
                            return
                        end
                        local v = i and i.Character
                        local w = v and v:FindFirstChildOfClass("Humanoid")
                        local V = v and v:FindFirstChild("HumanoidRootPart")
                        if not (w and V) then
                            return
                        end
                        if w.FloorMaterial ~= Enum.Material.Air then
                            return
                        end
                        local hE = w.MoveDirection
                        if hE.Magnitude < 0.05 then
                            return
                        end
                        local aQ = Vector3.new(hE.X, 0, hE.Z)
                        if aQ.Magnitude <= 0 then
                            return
                        end
                        aQ = aQ.Unit
                        if iq.mode == "CFrame" then
                            V.CFrame = V.CFrame + aQ * iq.value * (ck or 0) * 10
                        else
                            pcall(
                                function()
                                    local aD = V.AssemblyLinearVelocity
                                    local is = Vector3.new(aD.X, 0, aD.Z)
                                    local it = math.max(is.Magnitude, (w and w.WalkSpeed or 16) + iq.value * 3)
                                    local iu = aQ * it
                                    V.AssemblyLinearVelocity = Vector3.new(iu.X, aD.Y, iu.Z)
                                end
                            )
                        end
                    end
                )
            end
            local function iv()
                if iq.connection then
                    pcall(
                        function()
                            if iq.connection.Connected then
                                iq.connection:Disconnect()
                            end
                        end
                    )
                    iq.connection = nil
                end
            end
            local iw =
                gR:toggle(
                {name = "Strafe", flag = "Strafe_Toggle", default = false, callback = function(aD)
                        iq.enabled = aD
                        if aD then
                            ir()
                        else
                            iv()
                        end
                        if a and a.update_dependencies then
                            a:update_dependencies()
                        end
                    end}
            )
            local ix = gR:dependency_box()
            ix:setup_dependencies({{iw, true}})
            ix:dropdown(
                {
                    name = "Mode",
                    flag = "Strafe_Mode",
                    items = {"CFrame", "Velocity"},
                    default = iq.mode,
                    callback = function(bY)
                        iq.mode = bY
                    end
                }
            )
            ix:slider(
                {
                    name = "Str",
                    flag = "Strafe_Strength",
                    min = 1,
                    max = 20,
                    default = 10,
                    decimals = 0,
                    callback = function(bY)
                        iq.value = bY
                    end
                }
            )
        end
    end
    do
        local iy = l:column()
        local iz = iy:section({name = "Stuff"})
        local iA = {
            enabled = false,
            delay = 4,
            type = "Toxic",
            loop = nil,
            filter_installed = false,
            prev_filter = nil,
            _msgset = nil
        }
        local iB = {
            Toxic = {
                "you're trash, a newbie could do better",
                "imagine dying",
                "oops i forgot you were there, oh wait you don't even exist",
                "ez ez you got clapped by a low level",
                "why are you dying to me bro fr fr",
                "clapped by Rebuild user",
                "bro got clapped lol",
                "imagine being fatherless, go check where yours are",
                "sorry did my target aim hit you? if so you're trash",
                "bro got skill issues",
                "bozo can't even beat me",
                "are you serious rn",
                "ez bozo",
                "your dad never came back from the milk store for a reason",
                "did your mother drop you when you were born",
                "you really need a therapist",
                "you should go back to kindergarten bro",
                "i'm just better than you"
            },
            Ad = {
                "Rebuild > u",
                "Rebuild owns you",
                "get good get Rebuild",
                "stop crying and get Rebuild",
                "get Rebuild right now bro",
                "get your aim up and get Rebuild",
                "stop complaining and get Rebuild",
                "Rebuild > your career",
                "yes i know Rebuild is the best",
                "Rebuild has more features than your grandmother",
                "get better dude",
                "bro just get Rebuild lol",
                "yo 12 year old get Rebuild",
                "Rebuild on top fr fr",
                "Rebuild better than you smh smh smh"
            },
            Freak = {
                "wenomechainsama tumajarbisaun",
                "roll the ops on me then",
                "wdym touch grass i have one of those on my feet",
                "fortnite $19 gift card who wants it",
                "who are you talking to? a kill say bot?",
                "cheap microwave",
                "i like bricks",
                "what's up 'hackle cheatle' here guys, i've been arrested for multiple crimes including cheating",
                "🤓: stop hacking! it's against the rules!",
                "🤓: you can't just exploit here, it's illegal"
            }
        }
        local function iC()
            local iD = {}
            local iE = iB[iA.type] or {}
            for A, au in ipairs(iE) do
                iD[string.lower(au)] = true
            end
            iA._msgset = iD
        end
        local function iF()
            local c4, iG =
                pcall(
                function()
                    return game:GetService("TextChatService")
                end
            )
            if not c4 or not iG then
                return nil, nil
            end
            local iH = iG:FindFirstChild("TextChannels")
            local iI = iH and iH:FindFirstChild("RBXGeneral")
            if not iI then
                pcall(
                    function()
                        iH = iG:WaitForChild("TextChannels", 2)
                        iI = iH and iH:WaitForChild("RBXGeneral", 2)
                    end
                )
            end
            return iG, iI
        end
        local function iJ()
            if iA.filter_installed then
                return
            end
            local iG = select(1, iF())
            if not iG then
                return
            end
            iA.prev_filter = iG.OnIncomingMessage
            iG.OnIncomingMessage = function(T)
                local i = game:GetService("Players").LocalPlayer
                local iK = false
                if iA.hide_local and T and T.TextSource and i and T.TextSource.UserId == i.UserId then
                    local iL = string.lower(tostring(T.Text or ""))
                    if iA._msgset and iA._msgset[iL] then
                        iK = true
                    end
                end
                if iK then
                    return Enum.TextChatMessageStatus.Hidden
                end
                if iA.prev_filter then
                    local c4, ic = pcall(iA.prev_filter, T)
                    if c4 and ic ~= nil then
                        return ic
                    end
                end
                return Enum.TextChatMessageStatus.Displayed
            end
            iA.filter_installed = true
        end
        local function iM()
            local iG = select(1, iF())
            if not iG then
                return
            end
            if iA.filter_installed then
                iG.OnIncomingMessage = iA.prev_filter
                iA.prev_filter = nil
                iA.filter_installed = false
            end
        end
        local function iN(ed)
            local iG, iO = iF()
            if iO and iO.SendAsync then
                pcall(
                    function()
                        iO:SendAsync(ed)
                    end
                )
                return
            end
            local hX = game:GetService("ReplicatedStorage")
            local iP = hX:FindFirstChild("DefaultChatSystemChatEvents")
            local iQ = iP and iP:FindFirstChild("SayMessageRequest")
            if iQ then
                pcall(
                    function()
                        iQ:FireServer(ed, "All")
                    end
                )
            end
        end
        local function iR()
            if iA.loop then
                return
            end
            iC()
            if iA.hide_local then
                iJ()
            end
            local iS = s and s.task or task
            local iT = s and s.math or math
            iA.loop =
                iS.spawn(
                function()
                    while iA.enabled do
                        local iE = iB[iA.type] or {}
                        if #iE > 0 then
                            local iU = iT.random(1, #iE)
                            local T = iE[iU]
                            if iA.hide_local and iA._msgset then
                                iA._msgset[string.lower(T)] = true
                            end
                            iN(T)
                        end
                        local P = tonumber(iA.delay) or 4
                        iS.wait(iT.max(2, iT.min(P, 10)))
                    end
                end
            )
        end
        local function iV()
            if iA.loop then
                pcall(
                    function()
                        (s and s.task or task).cancel(iA.loop)
                    end
                )
                iA.loop = nil
            end
            iM()
        end
        local iW =
            iz:toggle(
            {name = "Enabled", flag = "ChatSpammer_Toggle", default = false, callback = function(aD)
                    iA.enabled = aD
                    if aD then
                        iR()
                    else
                        iV()
                    end
                    if a and a.update_dependencies then
                        a:update_dependencies()
                    end
                end}
        )
        local iX = iz:dependency_box()
        iX:setup_dependencies({{iW, true}})
        iX:dropdown(
            {
                name = "Type",
                flag = "ChatSpammer_Type",
                items = {"Toxic", "Ad", "Freak"},
                default = iA.type,
                callback = function(bY)
                    iA.type = bY
                    iC()
                end
            }
        )
        iX:slider(
            {
                name = "Dly",
                flag = "ChatSpammer_Delay",
                min = 2,
                max = 10,
                default = 4,
                decimals = 0,
                callback = function(bY)
                    iA.delay = bY
                end
            }
        )
        local iY = {enabled = false, saved_height = nil}
        do
            local c4, hs =
                pcall(
                function()
                    return game:GetService("Workspace")
                end
            )
            if c4 and hs then
                iY.saved_height = hs.FallenPartsDestroyHeight
            end
        end
        local function iZ(H)
            local c4, hs =
                pcall(
                function()
                    return game:GetService("Workspace")
                end
            )
            if not (c4 and hs) then
                return
            end
            if H then
                if iY.saved_height == nil then
                    iY.saved_height = hs.FallenPartsDestroyHeight
                end
                hs.FallenPartsDestroyHeight = -math.huge
            else
                if iY.saved_height ~= nil then
                    hs.FallenPartsDestroyHeight = iY.saved_height
                end
            end
        end
        do
            local function i_()
                local c4, hs =
                    pcall(
                    function()
                        return game:GetService("Workspace")
                    end
                )
                if c4 and hs and iY and iY.enabled then
                    pcall(
                        function()
                            if iY.saved_height ~= nil then
                                hs.FallenPartsDestroyHeight = iY.saved_height
                            end
                        end
                    )
                end
            end
            if a and a.connections and type(a.connections) == "table" then
                table.insert(a.connections, {Disconnect = i_})
            end
        end
        iz:toggle(
            {name = "AntiVoid", flag = "AntiVoid_Toggle", default = false, callback = function(aD)
                    iY.enabled = aD
                    iZ(aD)
                    if a and a.update_dependencies then
                        a:update_dependencies()
                    end
                end}
        )
        local j0 = {enabled = false, method = "CframeFling", health = 20, conn = nil}
        do
            if j0.method ~= "CframeFling" and j0.method ~= "VelocityFling" then
                j0.method = "CframeFling"
            end
        end
        local function j1()
            if j0.conn then
                pcall(
                    function()
                        j0.conn:Disconnect()
                    end
                )
                j0.conn = nil
            end
        end
        do
            if a and a.connections and type(a.connections) == "table" then
                table.insert(a.connections, {Disconnect = j1})
            end
        end
        local function j2()
            j1()
            local j3, hX =
                pcall(
                function()
                    return game:GetService("RunService")
                end
            )
            if not j3 or not hX then
                return
            end
            j0.conn =
                hX.Stepped:Connect(
                function()
                    local j4, j5 =
                        pcall(
                        function()
                            return game:GetService("Players")
                        end
                    )
                    if not j4 or not j5 then
                        return
                    end
                    local i = j5.LocalPlayer
                    local v = i and i.Character
                    local w = v and v:FindFirstChildOfClass("Humanoid")
                    if not w then
                        return
                    end
                    if w.Health <= j0.health then
                        local h4 = j0.method
                        if h4 ~= "CframeFling" and h4 ~= "VelocityFling" then
                            h4 = "CframeFling"
                            j0.method = h4
                        end
                        if h4 == "CframeFling" then
                            for A, aD in ipairs(v:GetChildren()) do
                                if aD:IsA("MeshPart") or aD:IsA("Part") then
                                    pcall(
                                        function()
                                            aD.CFrame =
                                                aD.CFrame *
                                                CFrame.fromEulerAnglesXYZ(math.rad(35), math.rad(35), math.rad(35)) *
                                                CFrame.new(0, 50, 0)
                                            aD.CFrame =
                                                aD.CFrame *
                                                CFrame.fromEulerAnglesXYZ(math.rad(-35), math.rad(20), math.rad(-15)) *
                                                CFrame.new(0, 50, 0)
                                        end
                                    )
                                end
                            end
                        elseif h4 == "VelocityFling" then
                            local B = v:FindFirstChild("HumanoidRootPart")
                            if B then
                                local j6 = Vector3.new(1e5, 1e5, 1e5)
                                pcall(
                                    function()
                                        B.Velocity, B.AssemblyLinearVelocity = j6, j6
                                        B.RotVelocity = Vector3.new(0, 1e4, 0)
                                        B.AssemblyAngularVelocity = Vector3.new(0, 1e4, 0)
                                    end
                                )
                            end
                        end
                    end
                end
            )
        end
        local function j7(aD)
            j0.enabled = aD
            if aD then
                j2()
            else
                j1()
            end
        end
        local j8 =
            iz:toggle(
            {name = "AntiStomp", flag = "AntiStomp_Toggle", default = false, callback = function(aD)
                    j7(aD)
                    if a and a.update_dependencies then
                        a:update_dependencies()
                    end
                end}
        )
        local j9 = iz:dependency_box()
        j9:setup_dependencies({{j8, true}})
        j9:dropdown(
            {
                name = "Mode",
                flag = "AntiStomp_Mode",
                items = {"CframeFling", "VelocityFling"},
                default = j0.method,
                callback = function(bY)
                    j0.method = bY
                end
            }
        )
        j9:slider(
            {
                name = "HP",
                flag = "AntiStomp_HP",
                min = 1,
                max = 100,
                default = j0.health,
                decimals = 0,
                callback = function(bY)
                    j0.health = bY
                end
            }
        )
        local ja = {enabled = false, conn = nil, bin = {}}
        local function jb()
            if ja.conn then
                pcall(
                    function()
                        ja.conn:Disconnect()
                    end
                )
                ja.conn = nil
            end
        end
        local function jc(state)
            local jd, je =
                pcall(
                function()
                    return game
                end
            )
            if not jd or not je then
                return
            end
            if state then
                local jf = je:GetDescendants()
                for bp = 1, #jf do
                    local aJ = jf[bp]
                    if aJ and (aJ.ClassName == "Seat" or aJ.ClassName == "VehicleSeat") then
                        if aJ.Parent ~= nil and ja.bin[aJ] == nil then
                            local jg, jh =
                                pcall(
                                function()
                                    return aJ.Parent
                                end
                            )
                            if jg and jh then
                                ja.bin[aJ] = jh
                                pcall(
                                    function()
                                        aJ.Parent = nil
                                    end
                                )
                            end
                        end
                    end
                end
            else
                for dK, jh in pairs(ja.bin) do
                    if dK then
                        pcall(
                            function()
                                dK.Parent = jh
                            end
                        )
                    end
                end
                ja.bin = {}
            end
        end
        local function ji(H)
            ja.enabled = H
            if H then
                jc(true)
                local jd, je =
                    pcall(
                    function()
                        return game
                    end
                )
                if jd and je then
                    jb()
                    ja.conn =
                        je.DescendantAdded:Connect(
                        function(aJ)
                            if not ja.enabled then
                                return
                            end
                            if aJ and (aJ.ClassName == "Seat" or aJ.ClassName == "VehicleSeat") then
                                if aJ.Parent ~= nil and ja.bin[aJ] == nil then
                                    local jg, jh =
                                        pcall(
                                        function()
                                            return aJ.Parent
                                        end
                                    )
                                    if jg and jh then
                                        ja.bin[aJ] = jh
                                        pcall(
                                            function()
                                                aJ.Parent = nil
                                            end
                                        )
                                    end
                                end
                            end
                        end
                    )
                end
            else
                jb()
                jc(false)
            end
        end
        do
            if a and a.connections and type(a.connections) == "table" then
                table.insert(
                    a.connections,
                    {Disconnect = function()
                            jb()
                            if ja and ja.enabled then
                                jc(false)
                            end
                        end}
                )
            end
        end
        local jj =
            iz:toggle(
            {name = "AntiSeats", flag = "AntiSeats_Toggle", default = false, callback = function(aD)
                    ji(aD)
                    if a and a.update_dependencies then
                        a:update_dependencies()
                    end
                end}
        )
        local jk = {enabled = false, bin = {}}
        local function jl(state)
            local jm, hs =
                pcall(
                function()
                    return game:GetService("Workspace")
                end
            )
            if not jm or not hs then
                return
            end
            local jn, jo = {}, {}
            local function hR(dK)
                if dK and typeof(dK) == "Instance" and not jo[dK] then
                    jo[dK] = true
                    jn[#jn + 1] = dK
                end
            end
            local jp = {
                "Donation Board by @DaaalzYT",
                " [Spit] - R$150 (READ DESC)",
                "[Spawn With AimViewer] - R$60",
                "[Char Command] - R$50 READ DESCRIPTION",
                "[Emoji \226\152\128 - R$59",
                "[Emoji \240\159\143\150 - R$59",
                "[Emoji \240\159\170\129 - R$75",
                "[Emoji \240\159\165\165 - R$85",
                "[Emoji \240\159\144\172] - R$35",
                "[Emoji \240\159\165\189] - R$35",
                "[Emoji \240\159\141\168 - R$60",
                "[Emoji \240\159\146\142] - R$100",
                "[Emoji \240\159\142\175] - R$60",
                "[10 streaks tags] - R$275",
                "[streak tag] - R$40",
                "[10 stomp effects] - R$325",
                "[stomp effect] - R$45",
                "[Emoji \240\159\146\184] - R$100",
                "[Emoji \240\159\141\128] - R$60",
                "[Emoji - [\240\159\140\184] - R75]",
                "[Emoji \240\159\146\165] - R$20",
                "[Emoji \240\159\145\145] - R$400",
                "[Emoji \226\155\177] - R$55 ",
                "[Spawn With Mask] - R$70",
                "[Spawn With Shotgun] - R$85",
                "[Spawn With TacticalSG] - R$115",
                "[Spawn With Armor] - R$100",
                "StandForLimitedKnives",
                "StandForLimitedFood",
                "Gun Stand",
                "Osiris Scythe -- 299R$ (Limited Stock)",
                "UmbrellaColor2",
                "UmbrellaColor1",
                "UmbrellaStick",
                "Mesh_0",
                "WashingMachineFUNC",
                "bush"
            }
            for bp = 1, #jp do
                local aJ = hs:FindFirstChild(jp[bp])
                if aJ then
                    hR(aJ)
                end
            end
            local a0 = hs:GetChildren()
            local iU = {159, 140, 628, 164, 575, 1462, 576, 569, 1612}
            for bp = 1, #iU do
                local bn = iU[bp]
                if a0[bn] then
                    hR(a0[bn])
                end
            end
            local jq = hs:FindFirstChild("Gun Stand")
            if jq then
                local jr = jq:FindFirstChild("Model")
                if jr then
                    local js = jr:GetChildren()
                    local jt = {6, 10}
                    for bp = 1, #jt do
                        local bn = jt[bp]
                        if js[bn] then
                            hR(js[bn])
                        end
                    end
                end
            end
            local ju = hs:FindFirstChild("MAP")
            if ju then
                local c3 = ju:FindFirstChild("Map")
                if c3 then
                    local js = c3:GetChildren()
                    local jv = js[603]
                    if jv then
                        local jw = jv:GetChildren()
                        local jx = {311, 89, 205}
                        for bp = 1, #jx do
                            local bn = jx[bp]
                            if jw[bn] then
                                hR(jw[bn])
                            end
                        end
                    end
                    local jy = {"Meshes/mountain", "Lights", "trash", "Gate", "Car2"}
                    for bp = 1, #jy do
                        local aJ = c3:FindFirstChild(jy[bp])
                        if aJ then
                            hR(aJ)
                        end
                    end
                end
            end
            local jz = hs:FindFirstChild("Summer Location")
            if jz then
                local jA = jz:FindFirstChild("Model")
                if jA then
                    local jB = jA:GetChildren()
                    local jC = {
                        5,
                        49,
                        58,
                        60,
                        61,
                        59,
                        44,
                        22,
                        19,
                        20,
                        46,
                        48,
                        29,
                        30,
                        10,
                        14,
                        16,
                        106,
                        40,
                        189,
                        47,
                        63,
                        8,
                        68,
                        38,
                        34
                    }
                    for bp = 1, #jC do
                        local bn = jC[bp]
                        if jB[bn] then
                            hR(jB[bn])
                        end
                    end
                    for A, jD in ipairs({"Sand castle", "Meshes/mountain"}) do
                        local aJ = jA:FindFirstChild(jD)
                        if aJ then
                            hR(aJ)
                        end
                    end
                end
                local jE = jz:FindFirstChild("Pool House")
                if jE then
                    local jF = jE:GetChildren()
                    if jF[3] then
                        hR(jF[3])
                    end
                    local jG = jE:FindFirstChild("Light")
                    if jG then
                        hR(jG)
                    end
                end
                local jH = jz:GetChildren()
                if jH[4] then
                    hR(jH[4])
                end
                local jI = jz:FindFirstChild("[Fish]")
                if jI then
                    hR(jI)
                end
            end
            local function jJ(jh, iU)
                local c4, jK =
                    pcall(
                    function()
                        return jh:GetChildren()
                    end
                )
                if c4 and jK and type(iU) == "number" and iU >= 1 and iU <= #jK then
                    return jK[iU]
                end
            end
            local jL = {function()
                    local jz = hs:FindFirstChild("Summer Location")
                    if not jz then
                        return
                    end
                    local jr = jz:FindFirstChild("Model")
                    if not jr then
                        return
                    end
                    return jJ(jr, 4)
                end, function()
                    local ju = hs:FindFirstChild("MAP")
                    if not ju then
                        return
                    end
                    local c3 = ju:FindFirstChild("Map")
                    if not c3 then
                        return
                    end
                    return jJ(c3, 800)
                end, function()
                    local jz = hs:FindFirstChild("Summer Location")
                    if not jz then
                        return
                    end
                    local jr = jz:FindFirstChild("Model")
                    if not jr then
                        return
                    end
                    return jJ(jr, 52)
                end, function()
                    local ju = hs:FindFirstChild("MAP")
                    if not ju then
                        return
                    end
                    local c3 = ju:FindFirstChild("Map")
                    if not c3 then
                        return
                    end
                    local jM = c3:FindFirstChild("Summer Location")
                    if not jM then
                        return
                    end
                    return jM:FindFirstChild("Beach Bar")
                end, function()
                    local ju = hs:FindFirstChild("MAP")
                    if not ju then
                        return
                    end
                    local c3 = ju:FindFirstChild("Map")
                    if not c3 then
                        return
                    end
                    local jM = c3:FindFirstChild("Summer Location")
                    if not jM then
                        return
                    end
                    return jM:FindFirstChild("Fishing Ship")
                end, function()
                    local ju = hs:FindFirstChild("MAP")
                    if not ju then
                        return
                    end
                    local c3 = ju:FindFirstChild("Map")
                    if not c3 then
                        return
                    end
                    return c3:FindFirstChild("BillboardSign")
                end, function()
                    local ju = hs:FindFirstChild("MAP")
                    if not ju then
                        return
                    end
                    local c3 = ju:FindFirstChild("Map")
                    if not c3 then
                        return
                    end
                    return jJ(c3, 265)
                end, function()
                    local ju = hs:FindFirstChild("MAP")
                    if not ju then
                        return
                    end
                    local c3 = ju:FindFirstChild("Map")
                    if not c3 then
                        return
                    end
                    local jN = jJ(c3, 655)
                    if not jN then
                        return
                    end
                    return jJ(jN, 13)
                end, function()
                    local ju = hs:FindFirstChild("MAP")
                    if not ju then
                        return
                    end
                    local c3 = ju:FindFirstChild("Map")
                    if not c3 then
                        return
                    end
                    local jN = jJ(c3, 655)
                    if not jN then
                        return
                    end
                    return jJ(jN, 11)
                end, function()
                    local ju = hs:FindFirstChild("MAP")
                    if not ju then
                        return
                    end
                    local c3 = ju:FindFirstChild("Map")
                    if not c3 then
                        return
                    end
                    return jJ(c3, 713)
                end, function()
                    local jO = hs:FindFirstChild("Boom Taco's")
                    if not jO then
                        return
                    end
                    local jr = jO:FindFirstChild("Model")
                    if not jr then
                        return
                    end
                    return jr:FindFirstChild("amthere8_ballzs")
                end, function()
                    local ju = hs:FindFirstChild("MAP")
                    if not ju then
                        return
                    end
                    return ju:FindFirstChild("Lights")
                end, function()
                    local ju = hs:FindFirstChild("MAP")
                    if not ju then
                        return
                    end
                    local c3 = ju:FindFirstChild("Map")
                    if not c3 then
                        return
                    end
                    local jM = c3:FindFirstChild("Summer Location")
                    if not jM then
                        return
                    end
                    return jM:FindFirstChild("mod")
                end, function()
                    local jP = jJ(hs, 10)
                    if not jP then
                        return
                    end
                    local jr = jP:FindFirstChild("Model")
                    if not jr then
                        return
                    end
                    local jQ = jr:FindFirstChild("Streak leaderboard")
                    if not jQ then
                        return
                    end
                    return jQ:FindFirstChild("Meshes/rounded_sides_Plane.003")
                end, function()
                    local jP = jJ(hs, 10)
                    if not jP then
                        return
                    end
                    local jr = jP:FindFirstChild("Model")
                    if not jr then
                        return
                    end
                    local jQ = jr:FindFirstChild("Streak leaderboard")
                    if not jQ then
                        return
                    end
                    return jQ:FindFirstChild("Meshes/rounded_sides_Plane.002")
                end, function()
                    local jP = jJ(hs, 10)
                    if not jP then
                        return
                    end
                    local jr = jP:FindFirstChild("Model")
                    if not jr then
                        return
                    end
                    local jQ = jr:FindFirstChild("Streak leaderboard")
                    if not jQ then
                        return
                    end
                    return jQ:FindFirstChild("Meshes/rounded_sides_Plane.001")
                end, function()
                    local jP = jJ(hs, 10)
                    if not jP then
                        return
                    end
                    local jr = jP:FindFirstChild("Model")
                    if not jr then
                        return
                    end
                    local jQ = jr:FindFirstChild("Streak leaderboard")
                    if not jQ then
                        return
                    end
                    return jQ:FindFirstChild("Model")
                end, function()
                    local jP = jJ(hs, 10)
                    if not jP then
                        return
                    end
                    local jr = jP:FindFirstChild("Model")
                    if not jr then
                        return
                    end
                    return jr:FindFirstChild("Streak leaderboard")
                end, function()
                    local jP = jJ(hs, 10)
                    if not jP then
                        return
                    end
                    local jr = jP:FindFirstChild("Model")
                    if not jr then
                        return
                    end
                    return jr:FindFirstChild("Model")
                end, function()
                    local jP = jJ(hs, 10)
                    if not jP then
                        return
                    end
                    return jP:FindFirstChild("Model")
                end, function()
                    return jJ(hs, 136)
                end, function()
                    return hs:FindFirstChild("GameBillboards")
                end, function()
                    local jP = jJ(hs, 10)
                    if not jP then
                        return
                    end
                    return jP:FindFirstChild("Top Time Played Leaderboard")
                end, function()
                    local jR = jJ(hs, 116)
                    if not jR then
                        return
                    end
                    local jS = jR:FindFirstChild("Model")
                    if not jS then
                        return
                    end
                    local jT = jS:FindFirstChild("Model")
                    if not jT then
                        return
                    end
                    local jU = jT:FindFirstChild("Model")
                    if not jU then
                        return
                    end
                    return jJ(jU, 8)
                end, function()
                    local jV = hs:FindFirstChild("PVP ARENA")
                    if not jV then
                        return
                    end
                    local jS = jV:FindFirstChild("Model")
                    if not jS then
                        return
                    end
                    return jS:FindFirstChild("Model")
                end, function()
                    local jV = hs:FindFirstChild("PVP ARENA")
                    if not jV then
                        return
                    end
                    local jS = jV:FindFirstChild("Model")
                    if not jS then
                        return
                    end
                    return jS:FindFirstChild("Sand castle")
                end, function()
                    local ju = hs:FindFirstChild("MAP")
                    if not ju then
                        return
                    end
                    local c3 = ju:FindFirstChild("Map")
                    if not c3 then
                        return
                    end
                    return jJ(c3, 742)
                end, function()
                    local ju = hs:FindFirstChild("MAP")
                    if not ju then
                        return
                    end
                    local c3 = ju:FindFirstChild("Map")
                    if not c3 then
                        return
                    end
                    return c3:FindFirstChild("Car2")
                end, function()
                    return hs:FindFirstChild("Construction Site")
                end, function()
                    return jJ(hs, 200)
                end, function()
                    return jJ(hs, 121)
                end, function()
                    return jJ(hs, 198)
                end, function()
                    local ju = hs:FindFirstChild("MAP")
                    if not ju then
                        return
                    end
                    local c3 = ju:FindFirstChild("Map")
                    if not c3 then
                        return
                    end
                    local jv = jJ(c3, 603)
                    if not jv then
                        return
                    end
                    local jW = jJ(jv, 265)
                    if not jW then
                        return
                    end
                    return jW:FindFirstChild("Palm Tree")
                end, function()
                    local ju = hs:FindFirstChild("MAP")
                    if not ju then
                        return
                    end
                    local c3 = ju:FindFirstChild("Map")
                    if not c3 then
                        return
                    end
                    local jv = jJ(c3, 603)
                    if not jv then
                        return
                    end
                    local jW = jJ(jv, 265)
                    if not jW then
                        return
                    end
                    return jJ(jW, 2)
                end, function()
                    local ju = hs:FindFirstChild("MAP")
                    if not ju then
                        return
                    end
                    local c3 = ju:FindFirstChild("Map")
                    if not c3 then
                        return
                    end
                    local jv = jJ(c3, 603)
                    if not jv then
                        return
                    end
                    local jX = jJ(jv, 207)
                    if not jX then
                        return
                    end
                    local jr = jX:FindFirstChild("Model")
                    if not jr then
                        return
                    end
                    return jJ(jr, 2)
                end, function()
                    local ju = hs:FindFirstChild("MAP")
                    if not ju then
                        return
                    end
                    local c3 = ju:FindFirstChild("Map")
                    if not c3 then
                        return
                    end
                    local jv = jJ(c3, 603)
                    if not jv then
                        return
                    end
                    local jX = jJ(jv, 207)
                    if not jX then
                        return
                    end
                    local jr = jX:FindFirstChild("Model")
                    if not jr then
                        return
                    end
                    return jr:FindFirstChild("Palm Tree")
                end, function()
                    return jJ(hs, 270)
                end, function()
                    return jJ(hs, 267)
                end, function()
                    return hs:FindFirstChild("Palm Tree")
                end, function()
                    local jY = jJ(hs, 125)
                    if not jY then
                        return
                    end
                    return jY:FindFirstChild("Palm Tree")
                end, function()
                    local bq = hs:FindFirstChild("Folder")
                    if not bq then
                        return
                    end
                    local jZ = jJ(bq, 66)
                    if not jZ then
                        return
                    end
                    local jr = jZ:FindFirstChild("Model")
                    if not jr then
                        return
                    end
                    return jr:FindFirstChild("Palm Tree")
                end, function()
                    local bq = hs:FindFirstChild("Folder")
                    if not bq then
                        return
                    end
                    local jZ = jJ(bq, 66)
                    if not jZ then
                        return
                    end
                    local j_ = jJ(jZ, 4)
                    if not j_ then
                        return
                    end
                    return j_:FindFirstChild("Palm Tree")
                end, function()
                    local bq = hs:FindFirstChild("Folder")
                    if not bq then
                        return
                    end
                    local jZ = jJ(bq, 66)
                    if not jZ then
                        return
                    end
                    return jZ:FindFirstChild("Palm Tree")
                end, function()
                    local bq = hs:FindFirstChild("Folder")
                    if not bq then
                        return
                    end
                    local jZ = jJ(bq, 66)
                    if not jZ then
                        return
                    end
                    local E = jZ:FindFirstChild("Part")
                    if not E then
                        return
                    end
                    return jJ(E, 2)
                end, function()
                    local bq = hs:FindFirstChild("Folder")
                    if not bq then
                        return
                    end
                    local jZ = jJ(bq, 66)
                    if not jZ then
                        return
                    end
                    local E = jZ:FindFirstChild("Part")
                    if not E then
                        return
                    end
                    return E:FindFirstChild("Palm Tree")
                end, function()
                    local bq = hs:FindFirstChild("Folder")
                    if not bq then
                        return
                    end
                    local jZ = jJ(bq, 66)
                    if not jZ then
                        return
                    end
                    return jZ:FindFirstChild("Part")
                end, function()
                    local k0 = jJ(hs, 460)
                    if not k0 then
                        return
                    end
                    return jJ(k0, 2)
                end, function()
                    local k0 = jJ(hs, 460)
                    if not k0 then
                        return
                    end
                    local jS = k0:FindFirstChild("Model")
                    if not jS then
                        return
                    end
                    return jS:FindFirstChild("Model")
                end, function()
                    return jJ(hs, 224)
                end, function()
                    local k1 = jJ(hs, 126)
                    if not k1 then
                        return
                    end
                    return jJ(k1, 3)
                end, function()
                    local jz = hs:FindFirstChild("Summer Location")
                    if not jz then
                        return
                    end
                    return jz:FindFirstChild("mod")
                end, function()
                    local jz = hs:FindFirstChild("Summer Location")
                    if not jz then
                        return
                    end
                    return jJ(jz, 14)
                end, function()
                    local jz = hs:FindFirstChild("Summer Location")
                    if not jz then
                        return
                    end
                    return jJ(jz, 16)
                end, function()
                    local jz = hs:FindFirstChild("Summer Location")
                    if not jz then
                        return
                    end
                    return jJ(jz, 18)
                end, function()
                    local jz = hs:FindFirstChild("Summer Location")
                    if not jz then
                        return
                    end
                    return jJ(jz, 19)
                end, function()
                    local jz = hs:FindFirstChild("Summer Location")
                    if not jz then
                        return
                    end
                    return jJ(jz, 21)
                end, function()
                    local jz = hs:FindFirstChild("Summer Location")
                    if not jz then
                        return
                    end
                    return jz:FindFirstChild("Hammock")
                end, function()
                    local jz = hs:FindFirstChild("Summer Location")
                    if not jz then
                        return
                    end
                    return jJ(jz, 20)
                end, function()
                    local jz = hs:FindFirstChild("Summer Location")
                    if not jz then
                        return
                    end
                    return jJ(jz, 13)
                end, function()
                    local jz = hs:FindFirstChild("Summer Location")
                    if not jz then
                        return
                    end
                    local jr = jz:FindFirstChild("Model")
                    if not jr then
                        return
                    end
                    return jr:FindFirstChild("Meshes/mountain")
                end, function()
                    local jz = hs:FindFirstChild("Summer Location")
                    if not jz then
                        return
                    end
                    return jJ(jz, 15)
                end, function()
                    local jz = hs:FindFirstChild("Summer Location")
                    if not jz then
                        return
                    end
                    return jz:FindFirstChild("Palm Tree")
                end}
            for bp = 1, #jL do
                local c4, dK = pcall(jL[bp])
                if c4 and typeof(dK) == "Instance" then
                    hR(dK)
                end
            end
            local k2 = hs:FindFirstChild("Players")
            if k2 then
                local k3, j5 =
                    pcall(
                    function()
                        return game:GetService("Players")
                    end
                )
                if k3 and j5 then
                    local k4 = k2:GetChildren()
                    for bp = 1, #k4 do
                        local au = k4[bp]
                        local k5 = typeof(au) == "Instance" and au:IsA("Model")
                        if k5 then
                            local k6 = au:FindFirstChildOfClass("Humanoid") ~= nil
                            local k7 = j5:FindFirstChild(au.Name) ~= nil
                            if k6 and not k7 then
                                hR(au)
                            end
                        end
                    end
                end
            end
            if state then
                for bp = 1, #jn do
                    local dK = jn[bp]
                    if dK.Parent ~= nil and jk.bin[dK] == nil then
                        local jg, jh =
                            pcall(
                            function()
                                return dK.Parent
                            end
                        )
                        if jg and jh then
                            jk.bin[dK] = jh
                            pcall(
                                function()
                                    dK.Parent = nil
                                end
                            )
                        end
                    end
                end
            else
                for dK, jh in pairs(jk.bin) do
                    pcall(
                        function()
                            dK.Parent = jh
                        end
                    )
                end
                jk.bin = {}
            end
        end
        local function k8(H)
            jk.enabled = H
            jl(H)
        end
        do
            if a and a.connections and type(a.connections) == "table" then
                table.insert(
                    a.connections,
                    {Disconnect = function()
                            if jk and jk.enabled then
                                k8(false)
                            end
                        end}
                )
            end
        end
        local k9 = {conn = nil, prev = nil}
        local function ka()
            if getgenv and getgenv().OPTIMIZED_GRAPHICS then
                return
            end
            local hs = game:GetService("Workspace")
            local kb = game:GetService("Lighting")
            local ht = s and s.run or game:GetService("RunService")
            local kc = s and s.task or task
            k9.prev = {
                GlobalShadows = kb.GlobalShadows,
                FogEnd = kb.FogEnd,
                QualityLevel = (function()
                    local c4, kd =
                        pcall(
                        function()
                            return settings().Rendering.QualityLevel
                        end
                    )
                    return c4 and kd or nil
                end)()
            }
            local ke = {
                hs:FindFirstChild("Lights"),
                hs:FindFirstChild("MAP") and hs.MAP:FindFirstChild("Graffiti") or nil,
                hs:FindFirstChild("MAP") and hs.MAP:FindFirstChild("Map") and hs.MAP.Map:FindFirstChild("Game-Houses") or
                    nil
            }
            for A, e1 in next, ke do
                if e1 then
                    pcall(
                        function()
                            e1:Destroy()
                        end
                    )
                end
            end
            for A, ac in next, game:GetDescendants() do
                local bn = ac.Name
                if bn == "Meshes/mountain" or bn == "print" or bn == "Image Ad Unit 2" then
                    pcall(
                        function()
                            ac:Destroy()
                        end
                    )
                end
            end
            local kf = hs:FindFirstChild("Ignored")
            if kf then
                for A, kg in next, kf:GetChildren() do
                    local bn = kg.Name
                    if bn == "HouseOwn" or bn == "Folder" or bn == "HouseItemSale" or bn == "ItemsDrop" then
                        pcall(
                            function()
                                kg:Destroy()
                            end
                        )
                    end
                end
            end
            local ju = hs:FindFirstChild("MAP")
            if ju then
                local c3 = ju:FindFirstChild("Map")
                if c3 then
                    for A, kh in next, c3:GetChildren() do
                        if kh:IsA("Model") then
                            pcall(
                                function()
                                    kh:Destroy()
                                end
                            )
                        end
                    end
                end
                local ki = ju:FindFirstChild("Indestructible")
                if ki then
                    for A, kh in next, ki:GetChildren() do
                        if kh:IsA("Model") then
                            pcall(
                                function()
                                    kh:Destroy()
                                end
                            )
                        end
                    end
                end
            end
            local kj = {"Accessory", "Decal", "ShirtGraphic", "Shirt", "Pants", "Seat", "VehicleSeat", "SpecialMesh"}
            for A, ac in next, hs:GetDescendants() do
                for A, kk in next, kj do
                    if ac:IsA(kk) then
                        pcall(
                            function()
                                ac:Destroy()
                            end
                        )
                    end
                end
            end
            local kl = hs:FindFirstChildOfClass("Terrain")
            if kl then
                kl.WaterWaveSize = 0
                kl.WaterWaveSpeed = 0
                kl.WaterReflectance = 0
                kl.WaterTransparency = 0
            end
            kb.GlobalShadows = false
            kb.FogEnd = 9e9
            pcall(
                function()
                    settings().Rendering.QualityLevel = 1
                end
            )
            for A, aD in next, game:GetDescendants() do
                if
                    aD:IsA("Part") or aD:IsA("UnionOperation") or aD:IsA("MeshPart") or aD:IsA("CornerWedgePart") or
                        aD:IsA("WedgePart") or
                        aD:IsA("TrussPart")
                 then
                    aD.Material = Enum.Material.Plastic
                    aD.Reflectance = 0
                elseif aD:IsA("Decal") then
                    aD.Transparency = 1
                elseif aD:IsA("ParticleEmitter") or aD:IsA("Trail") then
                    aD.Lifetime = NumberRange.new(0)
                end
            end
            for A, eN in next, kb:GetDescendants() do
                if
                    eN:IsA("BlurEffect") or eN:IsA("SunRaysEffect") or eN:IsA("ColorCorrectionEffect") or
                        eN:IsA("BloomEffect") or
                        eN:IsA("DepthOfFieldEffect")
                 then
                    eN.Enabled = false
                end
            end
            k9.conn =
                hs.DescendantAdded:Connect(
                function(av)
                    kc.spawn(
                        function()
                            if av:IsA("ForceField") or av:IsA("Sparkles") or av:IsA("Smoke") or av:IsA("Fire") then
                                local km = ht and ht.Heartbeat or game:GetService("RunService").Heartbeat
                                km:Wait()
                                pcall(
                                    function()
                                        av:Destroy()
                                    end
                                )
                            end
                        end
                    )
                end
            )
            if getgenv then
                getgenv().OPTIMIZED_GRAPHICS = true
            end
        end
        local function kn()
            if k9.conn and k9.conn.Connected then
                pcall(
                    function()
                        k9.conn:Disconnect()
                    end
                )
            end
            k9.conn = nil
            local kb = game:GetService("Lighting")
            local fp = k9.prev
            if fp then
                pcall(
                    function()
                        kb.GlobalShadows = fp.GlobalShadows
                        kb.FogEnd = fp.FogEnd
                        if fp.QualityLevel ~= nil then
                            settings().Rendering.QualityLevel = fp.QualityLevel
                        end
                    end
                )
            end
            if getgenv then
                getgenv().OPTIMIZED_GRAPHICS = nil
            end
        end
        local ko =
            iz:toggle(
            {name = "ClearTrash", flag = "ClearTrash_Toggle", default = false, callback = function(aD)
                    k8(aD)
                    if a and a.update_dependencies then
                        a:update_dependencies()
                    end
                end}
        )
        local kp =
            iz:toggle(
            {name = "PotatoMode", flag = "PotatoMode_Toggle", default = false, callback = function(aD)
                    if aD then
                        ka()
                    else
                        kn()
                    end
                    if a and a.update_dependencies then
                        a:update_dependencies()
                    end
                end}
        )
        table.insert(
            a.connections,
            {Disconnect = function()
                    if getgenv and getgenv().OPTIMIZED_GRAPHICS then
                        kn()
                    end
                end}
        )
    end
end
for g1, bb in next, f.preset do
    pcall(
        function()
            a:update_theme(g1, bb)
        end
    )
end
a:notification({text = "hello, client is loaded, onyx hub = zalupa ebanaya", time = 10})
